{"version":3,"sources":["localization/ja_jp sync /.json$","localization/en_us sync /.json$","localization/zh_tw sync /.json$","common.ts","component/relation/graph.tsx","component/relation/query.tsx","component/simulator/course-data.tsx","component/simulator/horse-proper-rate.tsx","component/simulator/horse-stat-data.tsx","library/race/common.tsx","component/simulator/horse-data.tsx","library/race/constant.ts","library/race/race-horse.ts","component/simulator/race-result.tsx","library/race/horse.ts","library/race/course.ts","component/simulator/simulator-calculator.tsx","component/simulator/simulator.tsx","component/skill/skill-item.tsx","component/skill/index.tsx","localization.ts","app.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","RunningStyle","DistanceType","GroundType","TurnType","InoutType","CoursePhase","GroundStatus","ProperRate","characters","characterJson","relations","relationJson","relationMembers","relationMemberJson","RelationGraph","props","characterIds","i","length","j","calculateRelation","this","idToPortrait","_","targetId","localization","className","src","process","alt","character","name","createRow","id1","id2","targetRelations","intersection","reduce","sum","parseInt","Component","RelationQuery","horses","selectHorse","event","value","target","setState","horseId","state","rel","forEach","targetHorseId","push","relation","image","sortBy","horseRow","relationArray","buildRelationArray","FormControl","InputLabel","Select","labelId","onChange","MenuItem","undefined","Common","time","hour","Math","floor","hourString","minute","minuteString","toString","padStart","second","secondString","minorString","Option","CourseData","setData","strategy","span","site","Strategy","Nige","RunningStyleNige","Senko","RunningStyleSenko","Sashi","RunningStyleSashi","Oikomi","RunningStyleOikomi","groundStatus","Good","GroundStatusGood","SlightlyHeavy","GroundStatusSlightlyHeavy","Heavy","GroundStatusHeavy","Bad","GroundStatusBad","racecourse","Racecourse","course","key","courseCategories","ground","Ground","distance","Distance","strategyComponent","getStrategyComponent","groundStatusComponent","getGroundStatusComponent","racecourseComponent","getRacecourseComponent","groundComponent","getGroundComponent","distanceComponent","getDistanceComponent","gutter","HorseProperRate","properRateTypes","properTypes","properName","properRateType","camelProperRateType","camelCase","properRate","G","F","E","D","C","B","A","S","HorseStatData","stats","min","max","data","speed","stamina","pow","guts","wiz","ResultFlag","HorseData","constant","baseDistance","minSpeed","minSpeedRate","minSpeedGutsCoefSqrt","minSpeedGutsCoef","startDash","targetSpeedCoefficient","startAccelAdd","targetSpeed","baseTargetSpeedRandomMinusVal1","baseTargetSpeedRandomMinusVal2","baseTargetSpeedRandomPlusVal1","baseTargetSpeedRandomLogCoefficient","baseTargetSpeedRandomCoefficient","Start","Middle","End","LastSpurt","phaseEndBaseTargetSpeedCoef","addSpeedParamCoef","baseTargetSpeedCoef","lastSpurtBaseTargetSpeedAddCoef","lastSpurtTargetSpeedCoefSqrt","upSlopeAddSpeedVal1","downSlopeAddSpeedVal1","downSlopeAddSpeedVal2","firstBlockSlowStyles","lastSpurtTargetSpeedStep","accel","accelPhaseCoef","accelPowCoef","accelPowCoefUpSlope","accelPowCoefSqrt","accelDecreaseCoef","accelDecreaseZeroHpCoef","hp","hpInitialVal1","hpMaxCoef","hpDecBase","hpDecRateBaseNormal","hpDecRateBaseTemptation","hpDecRateBasePositionKeepPaseDown","hpDecRateMultiplyDownSlopeAccelMode","speedGapParam1","speedGapParam1Pow","groundModifierMultiHpSub","Turf","Dirt","hpGutsBase","hpGutsCoef","hpGutsCoefSqrt","distanceTargetSpeedCoefficient","blockPortion","distanceShort","distanceMile","distanceMiddle","distanceLong","Number","MAX_VALUE","startSpeed","phaseStart","phaseMiddle","phaseEnd","positionSense","frameTime","gateTimeRange","finishTimeCoef","lastSpurt","determineRateBase","determineRateWizMultiplier","targetDistanceFromGoal","slope","downSlopeAccelModeChanceBase","downSlopeEndChance","BreakPoint","Mode","RaceResult","raceResults","timeAverage","meanBy","timeShown","parseFloat","finish_time_min","secondToTime","TimeMin","timeDeviationSum","fullLastSpurtCount","hpLeftSum","result","resultFlags","has","FullLastSpurt","hpLeft","TimeAverage","TimeStandardDeviation","TimeShown","FullLastSpurtRate","HpLeftAverage","toFixed","sqrt","toLocaleString","style","Horse","stat","Course","courseData","_courseData","getDistanceType","turn","slope_per","Short","Mile","Long","distanceProperRate","distanceProperRateJson","groundProperRate","groundProperRateJson","RaceHorse","horse","runningStyle","_course","_horse","_runningStyle","_speedWizRandomRange","_speedWizRandom","_phase","_mode","Set","_speed","_lastSpurtTargetSpeed","_hp","_distance","_time","_breakPoints","_startDashTargetSpeed","_slopePer","resultFlag","finishFirstBlock","delete","FirstBlock","FinishPhaseStart","phaseStartDistance","finishBlock","refreshSpeedRandomValue","FinishBlock","blockDistance","finishPhaseStart","FinishPhaseMiddle","phaseMiddleDistance","calculateLastSpurt","add","maxLastSpurtTargetSpeed","calculateAccelAndRun","hpCost","finalSpeed","lastSpurtDistance","lastSpurtTargetSpeed","lastSpurtSpeedCandidates","phaseEndBaseTargetSpeed","baseTargetSpeed","phaseEndTargetSpeedAddition","maxDistance","hpDecreaseRate","accelToTargetSpeed","currentSpeed","phaseEndAccelTime","phaseEndAccelDistance","phaseEndAccelHpCost","phaseEndFinalSpeed","lastSpurtAccelTime","lastSpurtAccelDistance","lastSpurtAccelHpCost","runDistance","phaseEndRunTime","phaseEndRunHpCost","getRunHpDecrease","lastSpurtRunTime","lastSpurtRunHpCost","hpDiff","candidate","randomByCandidates","lastSpurtDetermineRate","finishPhaseMiddle","FinishPhaseEnd","phaseEndDistance","finishPhaseEnd","FinishPhaseLastSpurt","doLastSpurt","finishLastSpurt","triggerPositionSense","zeroHp","ZeroHp","changeSlope","slopePer","checkDownSlopeAccelMode","DownSlopeAccel","DownSlopeAccelMode","random","triggerSkill","reachGoal","breakPointMap","None","FinishFirstBlock","PositionSense","Slope","Skill","Goal","upperBound","log10","lowerBound","distanceType","StartDash","startDashTargetSpeed","slopeAdd","abs","baseTargetSpeedRandom","realTargetSpeed","groundType","power","baseAccel","UpSlope","Temptation","PositionKeepPaceDown","phaseEndHpDecreaseRate","modeHpDecreaseRate","minParameters","minKey","minDistance","entries","targetValue","Array","isArray","parameters","breakPoint","accelTime","accelDistance","accelHpCost","runTime","speedCoefficient","realAccelTime","nr","realAccelDistance","speedHpDecreaseRate","getSpeedHpDecrease","runHpCost","realRunTime","realRunDistance","slopePers","allSlopePers","addBreakPoint","type","pop","maxHp","buildSlopeBreakPoints","doGateOpen","debugOutput","finishStartDash","minBreakpoint","doAccelAndRun","removeBreakPoint","initialSpeed","targetSpeedByDistanceSquare","getAccelHpDecrease","determineRate","randomNumber","log","SimulatorCalculator","calculate","a","running","finished","groundTypeTurf","groundTypeDirt","distanceTypeShort","distanceTypeMile","distanceTypeMiddle","distanceTypeLong","runningStyleNige","runningStyleSenko","runningStyleSashi","runningStyleOikomi","rounds","targetCourse","targetHorse","counter","started","worksPerThread","ceil","concurrency","Promise","raceHorse","simulate","skills","normal","rare","unique","temptation","triggered","delay","progressPercent","round","SimulatorCalculateRounds","disabled","onClick","SimulatorCalculate","percent","courses","Simulator","updateCourse","loadCourseData","courseId","race_track_id","SkillItem","propSkill","skill","useState","description","rarity","need_skill_point","grade_value","Skills","skillArray","skill_data","index","Localization","default","localizer","getLocalizationJaJp","getLocalizationEnUs","getLocalizationZhTw","getLocalization","locale","files","fileJson","fileKey","structure","split","merge","require","Header","Layout","Content","Footer","App","changeLocalization","theme","mode","defaultSelectedKeys","Item","to","exact","path","render","defaultValue","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7a73267.chunk.js","sourcesContent":["var map = {\n\t\"./character/name.json\": 163,\n\t\"./course/ground.json\": 164,\n\t\"./course/inout.json\": 165,\n\t\"./course/racecourse.json\": 166,\n\t\"./site.json\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 162;","var map = {\n\t\"./character/name.json\": 169,\n\t\"./course/racecourse.json\": 170,\n\t\"./site.json\": 171\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 168;","var map = {\n\t\"./character/name.json\": 173,\n\t\"./course/racecourse.json\": 174,\n\t\"./site.json\": 175\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 172;","export interface LocalizationData {\n  character: {\n    name: LocalizationMap,\n  },\n  course: {\n    racecourse: LocalizationMap,\n    ground: LocalizationMap,\n    inout: LocalizationMap,\n  },\n  site: LocalizationMap,\n  [key: string]: string | LocalizationSubData,\n}\n\nexport interface LocalizationSubData {\n  [key: string]: string | LocalizationSubData,\n}\n\ninterface LocalizationMap {\n  [key: string]: string,\n}\n\nexport enum RunningStyle {\n  Nige = 'RunningStyleNige',\n  Senko = 'RunningStyleSenko',\n  Sashi = 'RunningStyleSashi',\n  Oikomi = 'RunningStyleOikomi',\n}\n\nexport enum DistanceType {\n  Short = 'DistanceTypeShort',\n  Mile = 'DistanceTypeMile',\n  Middle = 'DistanceTypeMiddle',\n  Long = 'DistanceTypeLong',\n}\n\nexport enum GroundType {\n  Turf = '1',\n  Dirt = '2',\n}\n\nexport enum TurnType {\n  Right = '1',\n  Left = '2',\n  Straight = '4',\n}\n\nexport enum InoutType {\n  Normal = '1',\n  Inner = '2',\n  Outer = '3',\n  OuterInner = '4',\n}\n\nexport enum CoursePhase {\n  Start = 0,\n  Middle = 1,\n  End = 2,\n  LastSpurt = 3,\n}\n\nexport enum GroundStatus {\n  Good = 'GroundStatusGood',\n  SlightlyHeavy = 'GroundStatusSlightlyHeavy',\n  Heavy = 'GroundStatusHeavy',\n  Bad = 'GroundStatusBad',\n}\n\nexport enum ProperRate {\n  G = '1',\n  F = '2',\n  E = '3',\n  D = '4',\n  C = '5',\n  B = '6',\n  A = '7',\n  S = '8',\n}\n\nexport interface CourseCategory {\n  [key: string]: {\n    [key: string]: {\n      [key: string]: CourseDataType,\n    },\n  },\n}\n\nexport interface CourseDataType {\n  id: string,\n  race_track_id: string,\n  distance: number,\n  ground: GroundType,\n  turn: TurnType,\n  inout: InoutType,\n  course_set_status_id: string,\n  finish_time_min: string,\n  finish_time_min_random_range: string,\n  finish_time_max: string,\n  finish_time_max_random_range: string,\n  param: {\n    corner: { start?: number, end?: number }[],\n    straight: { start: number, end: number }[],\n  }\n  slope_per: { distance: number, slope_per: number }[],\n}\n\nclass Common {\n  static secondToTime(time: number): string {\n    const hour = Math.floor(time / 3600);\n    const hourString = hour > 0 ? `${hour}:` : '';\n    const minute = Math.floor((time - hour * 3600) / 60);\n    const minuteString = minute > 0\n      ? `${hour > 0 ? `${minute.toString().padStart(2, '0')}` : minute}:`\n      : '';\n    const second = Math.floor(time - hour * 3600 - minute * 60);\n    const secondString = second > 0\n      ? `${(hour > 0 || minute > 0) ? `${second.toString().padStart(2, '0')}` : second}`\n      : '0';\n    const minorString = `.${Math.floor((time - hour * 3600 - minute * 60 - second) * 1000).toString().padStart(3, '0')}`;\n    return `${hourString}${minuteString}${secondString}${minorString}`;\n  }\n}\n\nexport default Common;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport 'react-tabs/style/react-tabs.css';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n}\n\nclass RelationGraph extends Component<IProps, IState> {\n  static calculateRelation(id1: string, id2: string) {\n    if (id1 === id2) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  characterIds: string[];\n\n  relations: { [key: string]: { [key: string]: number } };\n\n  constructor(props: IProps) {\n    super(props);\n    this.characterIds = Object.keys(characters);\n    this.relations = {};\n    for (let i = 0; i < this.characterIds.length; i += 1) {\n      this.relations[this.characterIds[i]] = {};\n      for (let j = 0; j < this.characterIds.length; j += 1) {\n        this.relations[this.characterIds[i]][this.characterIds[j]] = RelationGraph.calculateRelation(this.characterIds[i], this.characterIds[j]);\n      }\n    }\n  }\n\n  createRow(id: string) {\n    return (\n      <tr key={`relation_row_${id}`}>\n        <th key={`portrait_row_${id}`}>{this.idToPortrait(id)}</th>\n        { _.map(this.characterIds, (targetId) => <th key={`relation_${id}_${targetId}`}>{ RelationGraph.calculateRelation(id, targetId) }</th>) }\n      </tr>\n    );\n  }\n\n  idToPortrait(id: string) {\n    const { localization } = this.props;\n    return (\n      <img\n        className=\"portrait\"\n        src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${id}.png`}\n        alt={localization.character.name[id]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <table>\n          <tbody>\n            <tr>\n              <th />\n              { _.map(this.characterIds, (id) => <th key={`portrait_column_${id}`}>{this.idToPortrait(id)}</th>) }\n            </tr>\n            { _.map(this.characterIds, (id) => this.createRow(id)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationGraph;\n","import _ from 'lodash';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport React, { Component } from 'react';\r\n\r\nimport '../../app.css';\r\nimport './relation.css';\r\n\r\nimport { LocalizationData } from '../../common';\r\nimport characterJson from '../../db/character.json';\r\nimport relationJson from '../../db/relation.json';\r\nimport relationMemberJson from '../../db/relation_member.json';\r\n\r\nconst characters = characterJson as { [key: string]: {} };\r\nconst relations = relationJson as { [key: string]: string };\r\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\r\n\r\ninterface HorseRow {\r\n  name: string;\r\n  relation: number;\r\n  image: string;\r\n}\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n}\r\n\r\ninterface IState {\r\n  horseId: string\r\n}\r\n\r\nclass RelationQuery extends Component<IProps, IState> {\r\n  static calculateRelation(id1: string | undefined, id2: string): number {\r\n    if (id1 === id2 || id1 === undefined) {\r\n      return 0;\r\n    }\r\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\r\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\r\n  }\r\n\r\n  horses: string[];\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.horses = Object.keys(characters);\r\n    this.state = {\r\n      horseId: '',\r\n    };\r\n  }\r\n\r\n  selectHorse = (event: any) => {\r\n    const { value } = event.target;\r\n    this.setState({ horseId: value });\r\n  };\r\n\r\n  buildRelationArray() {\r\n    const { horseId } = this.state;\r\n    const { localization } = this.props;\r\n    let rel: HorseRow[] = [];\r\n    this.horses.forEach((targetHorseId) => {\r\n      if (targetHorseId !== horseId) {\r\n        rel.push({\r\n          name: localization.character.name[targetHorseId],\r\n          relation: RelationQuery.calculateRelation(horseId, targetHorseId),\r\n          image: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\r\n        });\r\n      }\r\n    });\r\n    rel = _.sortBy(rel, [(horseRow) => -horseRow.relation]);\r\n\r\n    return rel.map((horseRow) => (\r\n      <tr>\r\n        <td>{horseRow.name}</td>\r\n        <td><img className=\"portrait\" src={horseRow.image} alt={horseRow.name} /></td>\r\n        <td>{horseRow.relation}</td>\r\n      </tr>\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    const { localization } = this.props;\r\n    const relationArray = this.buildRelationArray();\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"dropdown\">\r\n          <FormControl>\r\n            <InputLabel id=\"demo-simple-select-label\">ウマ</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              onChange={this.selectHorse}\r\n            >\r\n              { this.horses.map((targetHorseId) => (\r\n                <MenuItem key={`${targetHorseId}_option`} value={targetHorseId}>\r\n                  <img\r\n                    className=\"portrait\"\r\n                    src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`}\r\n                    alt={localization.character.name[targetHorseId]}\r\n                  />\r\n                  {localization.character.name[targetHorseId]}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <table>\r\n          {relationArray}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RelationQuery;\r\n","import _ from 'lodash';\r\nimport {\r\n  Row, Col, Select,\r\n} from 'antd';\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  CourseCategory, CourseDataType, GroundStatus, LocalizationData, RunningStyle,\r\n} from '../../common';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './simulator.css';\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n  localization: LocalizationData,\r\n  courseCategories: CourseCategory,\r\n  setData: (key: string, value: any) => void,\r\n  state: {\r\n    strategy?: string,\r\n    groundStatus?: string,\r\n    racecourse?: string,\r\n    ground?: string,\r\n    distance?: number,\r\n    course?: CourseDataType,\r\n  },\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass CourseData extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  getStrategyComponent() {\r\n    const { localization, setData, state } = this.props;\r\n    const { strategy } = state;\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Strategy}:`}</span>\r\n          <Select className=\"select\" value={strategy} onChange={(value) => setData('strategy', value)}>\r\n            <Option value={RunningStyle.Nige}>{localization.site.RunningStyleNige}</Option>\r\n            <Option value={RunningStyle.Senko}>{localization.site.RunningStyleSenko}</Option>\r\n            <Option value={RunningStyle.Sashi}>{localization.site.RunningStyleSashi}</Option>\r\n            <Option value={RunningStyle.Oikomi}>{localization.site.RunningStyleOikomi}</Option>\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getGroundStatusComponent() {\r\n    const { localization, setData, state } = this.props;\r\n    const { groundStatus } = state;\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.GroundStatus}:`}</span>\r\n          <Select className=\"select\" value={groundStatus} onChange={(value) => setData('groundStatus', value)}>\r\n            <Option value={GroundStatus.Good}>{localization.site.GroundStatusGood}</Option>\r\n            <Option value={GroundStatus.SlightlyHeavy}>{localization.site.GroundStatusSlightlyHeavy}</Option>\r\n            <Option value={GroundStatus.Heavy}>{localization.site.GroundStatusHeavy}</Option>\r\n            <Option value={GroundStatus.Bad}>{localization.site.GroundStatusBad}</Option>\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getRacecourseComponent() {\r\n    const { localization, setData, state } = this.props;\r\n    const { racecourse } = state;\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Racecourse}:`}</span>\r\n          <Select className=\"select\" value={racecourse} onChange={(value) => setData('racecourse', value)}>\r\n            { _.map(localization.course.racecourse, (value: string, key: string) => (\r\n              <Option value={key}>{value}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getGroundComponent() {\r\n    const {\r\n      localization, courseCategories, setData, state,\r\n    } = this.props;\r\n    const { racecourse, ground } = state;\r\n\r\n    if (racecourse === undefined) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Ground}:`}</span>\r\n          <Select className=\"select\" value={ground} onChange={(value) => setData('ground', value)}>\r\n            { _.map(courseCategories[racecourse], (value: string, key: string) => (\r\n              <Option value={key}>{localization.course.ground[key]}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getDistanceComponent() {\r\n    const {\r\n      localization, courseCategories, setData, state,\r\n    } = this.props;\r\n    const { racecourse, ground, distance } = state;\r\n\r\n    if (racecourse === undefined || ground === undefined) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Distance}:`}</span>\r\n          <Select className=\"select\" value={distance} onChange={(value) => setData('distance', value)}>\r\n            { _.map(courseCategories[racecourse][ground], (value: string, key: number) => (\r\n              <Option value={key}>{key}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const strategyComponent = this.getStrategyComponent();\r\n    const groundStatusComponent = this.getGroundStatusComponent();\r\n    const racecourseComponent = this.getRacecourseComponent();\r\n    const groundComponent = this.getGroundComponent();\r\n    const distanceComponent = this.getDistanceComponent();\r\n\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        {strategyComponent}\r\n        {groundStatusComponent}\r\n        {racecourseComponent}\r\n        {groundComponent}\r\n        {distanceComponent}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseData;\r\n","import _ from 'lodash';\r\nimport { Row, Col, Select } from 'antd';\r\nimport React, { Component } from 'react';\r\n\r\nimport { LocalizationData } from '../../common';\r\n\r\nimport './simulator.css';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  setData: (key: string, value: any) => void,\r\n  state: { [key: string]: string },\r\n\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass HorseProperRate extends Component<IProps, IState> {\r\n  static readonly properRateTypes = {\r\n    GroundType: ['GroundTypeTurf', 'GroundTypeDirt'],\r\n    DistanceType: ['DistanceTypeShort', 'DistanceTypeMile', 'DistanceTypeMiddle', 'DistanceTypeLong'],\r\n    RunningStyle: ['RunningStyleNige', 'RunningStyleSenko', 'RunningStyleSashi', 'RunningStyleOikomi'],\r\n  };\r\n\r\n  static readonly properRate = {\r\n    G: '1',\r\n    F: '2',\r\n    E: '3',\r\n    D: '4',\r\n    C: '5',\r\n    B: '6',\r\n    A: '7',\r\n    S: '8',\r\n  };\r\n\r\n  render() {\r\n    const { localization, setData, state } = this.props;\r\n    return (\r\n      <>\r\n        { _.map(HorseProperRate.properRateTypes, (properTypes, properName) => (\r\n          <>\r\n            <Row gutter={[8, 8]}><Col span={24}>{localization.site[properName]}</Col></Row>\r\n            <Row gutter={[8, 8]}>\r\n              { _.map(properTypes, (properRateType) => {\r\n                const camelProperRateType = _.camelCase(properRateType);\r\n                return (\r\n                  <Col span={4}>\r\n                    <div className=\"flex\">\r\n                      <span className=\"select-label\">{`${localization.site[properRateType]}:`}</span>\r\n                      <Select className=\"select\" value={state[camelProperRateType]} onChange={(value) => setData(camelProperRateType, value)}>\r\n                        { _.map(HorseProperRate.properRate, (value, key) => (\r\n                          <Select.Option value={value}>{localization.site[key]}</Select.Option>\r\n                        ))}\r\n                      </Select>\r\n                    </div>\r\n                  </Col>\r\n                );\r\n              })}\r\n            </Row>\r\n          </>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HorseProperRate;\r\n","import _ from 'lodash';\r\nimport { InputNumber, Row, Col } from 'antd';\r\nimport React, { Component } from 'react';\r\n\r\nimport { LocalizationData } from '../../common';\r\n\r\nimport './simulator.css';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  setData: (key: string, value: any) => void,\r\n  state: { [key: string]: number },\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass HorseStatData extends Component<IProps, IState> {\r\n  static readonly stats = {\r\n    speed: 'Speed',\r\n    stamina: 'Stamina',\r\n    pow: 'Power',\r\n    guts: 'Guts',\r\n    wiz: 'Wiz',\r\n  };\r\n\r\n  render() {\r\n    const { localization, setData, state } = this.props;\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        { _.map(HorseStatData.stats, (value, key) => (\r\n          <Col span={4}>\r\n            <div className=\"flex\">\r\n              <span className=\"select-label\">{`${localization.site[value]}:`}</span>\r\n              <InputNumber className=\"select\" value={state[key]} min={1} max={1200} onChange={(data) => setData(key, data)} />\r\n            </div>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HorseStatData;\r\n","export enum ResultFlag {\r\n  FullLastSpurt,\r\n}\r\n\r\nclass Common {\r\n}\r\n\r\nexport default Common;\r\n","import React, { Component } from 'react';\r\n\r\nimport { LocalizationData } from '../../common';\r\nimport HorseProperRate from './horse-proper-rate';\r\nimport HorseStatData from './horse-stat-data';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData,\r\n  setData: (key: string, value: any) => void,\r\n  state: any,\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass HorseData extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { localization, setData, state } = this.props;\r\n    return (\r\n      <>\r\n        <HorseStatData localization={localization} setData={setData} state={state} />\r\n        <HorseProperRate localization={localization} setData={setData} state={state} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HorseData;\r\n","import {\r\n  RunningStyle, CoursePhase, GroundType, GroundStatus,\r\n} from '../../common';\r\n\r\nconst constant = {\r\n  baseDistance: 2000,\r\n  minSpeed: {\r\n    minSpeedRate: 0.85,\r\n    minSpeedGutsCoefSqrt: 200,\r\n    minSpeedGutsCoef: 0.001,\r\n  },\r\n  startDash: {\r\n    targetSpeedCoefficient: 0.85,\r\n    startAccelAdd: 24,\r\n  },\r\n  targetSpeed: {\r\n    baseTargetSpeedRandomMinusVal1: -0.0065,\r\n    baseTargetSpeedRandomMinusVal2: 5500,\r\n    baseTargetSpeedRandomPlusVal1: 5500,\r\n    baseTargetSpeedRandomLogCoefficient: 0.1,\r\n    baseTargetSpeedRandomCoefficient: 0.01,\r\n    targetSpeedCoefficient: {\r\n      [RunningStyle.Nige]: {\r\n        [CoursePhase.Start]: 1,\r\n        [CoursePhase.Middle]: 0.98,\r\n        [CoursePhase.End]: 0.98,\r\n        [CoursePhase.LastSpurt]: 0.98,\r\n      },\r\n      [RunningStyle.Senko]: {\r\n        [CoursePhase.Start]: 0.978,\r\n        [CoursePhase.Middle]: 0.991,\r\n        [CoursePhase.End]: 0.975,\r\n        [CoursePhase.LastSpurt]: 0.975,\r\n      },\r\n      [RunningStyle.Sashi]: {\r\n        [CoursePhase.Start]: 0.938,\r\n        [CoursePhase.Middle]: 0.998,\r\n        [CoursePhase.End]: 0.994,\r\n        [CoursePhase.LastSpurt]: 0.994,\r\n      },\r\n      [RunningStyle.Oikomi]: {\r\n        [CoursePhase.Start]: 0.931,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 1,\r\n        [CoursePhase.LastSpurt]: 1,\r\n      },\r\n    },\r\n    phaseEndBaseTargetSpeedCoef: 500,\r\n    addSpeedParamCoef: 0.002,\r\n    baseTargetSpeedCoef: 1.05,\r\n    lastSpurtBaseTargetSpeedAddCoef: 0.01,\r\n    lastSpurtTargetSpeedCoefSqrt: 500,\r\n    upSlopeAddSpeedVal1: 200,\r\n    downSlopeAddSpeedVal1: 0.3,\r\n    downSlopeAddSpeedVal2: 10,\r\n    firstBlockSlowStyles: [RunningStyle.Sashi, RunningStyle.Oikomi],\r\n    lastSpurtTargetSpeedStep: 0.1,\r\n  },\r\n  accel: {\r\n    accelPhaseCoef: {\r\n      [RunningStyle.Nige]: {\r\n        [CoursePhase.Start]: 1,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 0.996,\r\n        [CoursePhase.LastSpurt]: 0.996,\r\n      },\r\n      [RunningStyle.Senko]: {\r\n        [CoursePhase.Start]: 0.985,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 0.996,\r\n        [CoursePhase.LastSpurt]: 0.996,\r\n      },\r\n      [RunningStyle.Sashi]: {\r\n        [CoursePhase.Start]: 0.975,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 1,\r\n        [CoursePhase.LastSpurt]: 1,\r\n      },\r\n      [RunningStyle.Oikomi]: {\r\n        [CoursePhase.Start]: 0.945,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 0.997,\r\n        [CoursePhase.LastSpurt]: 0.997,\r\n      },\r\n    },\r\n    accelPowCoef: 0.0006,\r\n    accelPowCoefUpSlope: 0.0004,\r\n    accelPowCoefSqrt: 500,\r\n    startAccelAdd: 24,\r\n    accelDecreaseCoef: {\r\n      [CoursePhase.Start]: -1.2,\r\n      [CoursePhase.Middle]: -0.8,\r\n      [CoursePhase.End]: 1.2,\r\n      [CoursePhase.LastSpurt]: 1.2,\r\n    },\r\n    accelDecreaseZeroHpCoef: -1.2,\r\n  },\r\n  hp: {\r\n    hpInitialVal1: 0.8,\r\n    hpMaxCoef: {\r\n      [RunningStyle.Nige]: 0.95,\r\n      [RunningStyle.Senko]: 0.89,\r\n      [RunningStyle.Sashi]: 1.0,\r\n      [RunningStyle.Oikomi]: 0.995,\r\n    },\r\n    hpDecBase: 20,\r\n    hpDecRateBaseNormal: 1,\r\n    hpDecRateBaseTemptation: 1.6,\r\n    hpDecRateBasePositionKeepPaseDown: 0.6,\r\n    hpDecRateMultiplyDownSlopeAccelMode: 0.4,\r\n    speedGapParam1: 12,\r\n    speedGapParam1Pow: 144,\r\n    groundModifierMultiHpSub: {\r\n      [GroundType.Turf]: {\r\n        [GroundStatus.Good]: 1,\r\n        [GroundStatus.SlightlyHeavy]: 1,\r\n        [GroundStatus.Heavy]: 1.02,\r\n        [GroundStatus.Bad]: 1.02,\r\n      },\r\n      [GroundType.Dirt]: {\r\n        [GroundStatus.Good]: 1,\r\n        [GroundStatus.SlightlyHeavy]: 1,\r\n        [GroundStatus.Heavy]: 1.01,\r\n        [GroundStatus.Bad]: 1.02,\r\n      },\r\n    },\r\n    hpGutsBase: 1,\r\n    hpGutsCoef: 200,\r\n    hpGutsCoefSqrt: 600,\r\n  },\r\n  course: {\r\n    distanceTargetSpeedCoefficient: 0.001,\r\n    blockPortion: 1 / 24,\r\n    distanceShort: { min: 0, max: 1400 },\r\n    distanceMile: { min: 1401, max: 1800 },\r\n    distanceMiddle: { min: 1801, max: 2400 },\r\n    distanceLong: { min: 2401, max: Number.MAX_VALUE },\r\n    startSpeed: 3,\r\n    phaseStart: 1 / 6,\r\n    phaseMiddle: 4 / 6,\r\n    phaseEnd: 5 / 6,\r\n    positionSense: 10 / 24,\r\n    frameTime: 1 / 15,\r\n    gateTimeRange: { min: 0, max: 0.1 },\r\n    finishTimeCoef: 1.18,\r\n  },\r\n  lastSpurt: {\r\n    determineRateBase: 0.15,\r\n    determineRateWizMultiplier: 0.0005,\r\n    targetDistanceFromGoal: 60,\r\n  },\r\n  slope: {\r\n    downSlopeAccelModeChanceBase: 0.0004,\r\n    downSlopeEndChance: 0.2,\r\n  },\r\n};\r\n\r\nexport default constant;\r\n","import _ from 'lodash';\r\nimport nr from 'newton-raphson-method';\r\nimport util from 'util';\r\n\r\nimport constant from './constant';\r\nimport Course from './course';\r\nimport Horse, { HorseStat } from './horse';\r\n\r\nimport distanceProperRateJson from '../../db/proper_rate/distance.json';\r\nimport groundProperRateJson from '../../db/proper_rate/ground.json';\r\nimport runningStyleProperRateJson from '../../db/proper_rate/running_style.json';\r\nimport { ResultFlag } from './common';\r\nimport { RunningStyle, CoursePhase } from '../../common';\r\n\r\nconst distanceProperRate = distanceProperRateJson as { [key: string]: { speed: number, power: number } };\r\nconst groundProperRate = groundProperRateJson as { [key: string]: number };\r\nconst runningStyleProperRate = runningStyleProperRateJson as { [key: string]: number };\r\n\r\nenum BreakPoint {\r\n  Goal = '0000',\r\n\r\n  FinishFirstBlock = '1000',\r\n  FinishPhaseStart = '1010',\r\n  FinishPhaseMiddle = '1020',\r\n  FinishPhaseEnd = '1030',\r\n  FinishPhaseLastSpurt = '1040',\r\n\r\n  LastSpurt = '2000',\r\n  PositionSense = '2010',\r\n  Skill = '2020',\r\n  DownSlopeAccelMode = '2030',\r\n  ZeroHp = '2040',\r\n\r\n  FinishBlock = '3000',\r\n  Slope = '3010',\r\n\r\n  None = '9999',\r\n}\r\n\r\ninterface BreakPointData {\r\n  distance?: number,\r\n  time?: number,\r\n  parameters?: any\r\n}\r\n\r\ninterface BreakPointSet {\r\n  [BreakPoint.FinishFirstBlock]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseStart]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseMiddle]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseEnd]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseLastSpurt]?: BreakPointData,\r\n\r\n  [BreakPoint.LastSpurt]?: BreakPointData,\r\n  [BreakPoint.PositionSense]?: BreakPointData,\r\n  [BreakPoint.Skill]?: BreakPointData[],\r\n  [BreakPoint.DownSlopeAccelMode]?: BreakPointData,\r\n  [BreakPoint.ZeroHp]?: BreakPointData,\r\n\r\n  [BreakPoint.FinishBlock]?: BreakPointData,\r\n  [BreakPoint.Slope]?: BreakPointData[],\r\n\r\n  [BreakPoint.Goal]?: BreakPointData,\r\n\r\n  [BreakPoint.None]?: BreakPointData,\r\n}\r\n\r\nenum Mode {\r\n  StartDash,\r\n  FirstBlock,\r\n  LastSpurt,\r\n  UpSlope,\r\n  DownSlopeAccel,\r\n  Temptation,\r\n  PositionKeepPaceDown,\r\n  ZeroHp,\r\n}\r\n\r\ninterface LastSpurtCandidate {\r\n  time: number,\r\n  targetSpeed: number,\r\n  lastSpurtDistance: number,\r\n}\r\n\r\nclass RaceHorse {\r\n  private _course: Course;\r\n\r\n  private _horse: Horse;\r\n\r\n  private _runningStyle: RunningStyle;\r\n\r\n  private _speedWizRandomRange: [number, number] = [0, 0];\r\n\r\n  private _speedWizRandom: number = 0;\r\n\r\n  private _phase: CoursePhase = CoursePhase.Start;\r\n\r\n  private _mode: Set<Mode> = new Set<Mode>();\r\n\r\n  private _speed: number = 0;\r\n\r\n  private _lastSpurtTargetSpeed: number = 0;\r\n\r\n  private _hp: number = 0;\r\n\r\n  private _distance: number = 0;\r\n\r\n  private _time: number = 0;\r\n\r\n  private _breakPoints: BreakPointSet = {};\r\n\r\n  private _startDashTargetSpeed: number | undefined = undefined;\r\n\r\n  private _slopePer: number = 0;\r\n\r\n  resultFlag: Set<ResultFlag> = new Set<ResultFlag>();\r\n\r\n  constructor({ horse, runningStyle, course }: {\r\n    horse: Horse,\r\n    runningStyle: RunningStyle,\r\n    course: Course,\r\n  }) {\r\n    this._horse = horse;\r\n    this._course = course;\r\n    this._runningStyle = runningStyle;\r\n\r\n    const upperBound = (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\r\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\r\n    const lowerBound = constant.targetSpeed.baseTargetSpeedRandomMinusVal1\r\n      + (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\r\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\r\n    this._speedWizRandomRange = [lowerBound, upperBound];\r\n    this.refreshSpeedRandomValue();\r\n  }\r\n\r\n  get maxHp(): number {\r\n    return this._course.distance + this.stat.stamina * constant.hp.hpMaxCoef[this._runningStyle] * constant.hp.hpInitialVal1;\r\n  }\r\n\r\n  get hp(): number {\r\n    return this._hp;\r\n  }\r\n\r\n  get time(): number {\r\n    return this._time;\r\n  }\r\n\r\n  private get lastSpurtDetermineRate(): number {\r\n    return constant.lastSpurt.determineRateBase + constant.lastSpurt.determineRateWizMultiplier * this.stat.wiz;\r\n  }\r\n\r\n  private get stat(): HorseStat {\r\n    return {\r\n      speed: this._horse.stat.speed,\r\n      stamina: this._horse.stat.stamina,\r\n      pow: this._horse.stat.pow,\r\n      guts: this._horse.stat.guts,\r\n      wiz: this._horse.stat.wiz,\r\n    };\r\n  }\r\n\r\n  private get minSpeed(): number {\r\n    return this._course.baseTargetSpeed * constant.minSpeed.minSpeedRate\r\n      + Math.sqrt(this.stat.guts * constant.minSpeed.minSpeedGutsCoefSqrt) * constant.minSpeed.minSpeedGutsCoef;\r\n  }\r\n\r\n  private get startDashTargetSpeed(): number {\r\n    if (this._startDashTargetSpeed === undefined) {\r\n      this._startDashTargetSpeed = Math.max(this._course.baseTargetSpeed * constant.startDash.targetSpeedCoefficient, this.minSpeed);\r\n    }\r\n    return this._startDashTargetSpeed;\r\n  }\r\n\r\n  private get baseTargetSpeed(): number {\r\n    return this._course.baseTargetSpeed * constant.targetSpeed.targetSpeedCoefficient[this._runningStyle][this._phase];\r\n  }\r\n\r\n  private get baseTargetSpeedRandom(): number {\r\n    return this.baseTargetSpeed * this._speedWizRandom;\r\n  }\r\n\r\n  private get phaseEndTargetSpeedAddition(): number {\r\n    return Math.sqrt(constant.targetSpeed.phaseEndBaseTargetSpeedCoef * this.stat.speed)\r\n      * constant.targetSpeed.addSpeedParamCoef * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].speed;\r\n  }\r\n\r\n  private get maxLastSpurtTargetSpeed(): number {\r\n    return Math.max(\r\n      (this.baseTargetSpeed + this.phaseEndTargetSpeedAddition + constant.targetSpeed.lastSpurtBaseTargetSpeedAddCoef * this._course.baseTargetSpeed)\r\n          * constant.targetSpeed.baseTargetSpeedCoef\r\n        + this.phaseEndTargetSpeedAddition,\r\n      this.minSpeed,\r\n    );\r\n  }\r\n\r\n  private get lastSpurtTargetSpeed(): number {\r\n    return this._lastSpurtTargetSpeed;\r\n  }\r\n\r\n  private get realTargetSpeed(): number {\r\n    if (this._mode.has(Mode.StartDash) || this._mode.has(Mode.FirstBlock)) {\r\n      return this.startDashTargetSpeed;\r\n    }\r\n    if (this._mode.has(Mode.LastSpurt)) {\r\n      return this.lastSpurtTargetSpeed;\r\n    }\r\n\r\n    const slopePer = this._slopePer;\r\n    let slopeAdd = 0;\r\n    if (slopePer >= 1) {\r\n      slopeAdd = -slopePer * constant.targetSpeed.upSlopeAddSpeedVal1 / this.stat.pow;\r\n    } else if (slopePer <= -1 && this._mode.has(Mode.DownSlopeAccel)) {\r\n      slopeAdd = constant.targetSpeed.downSlopeAddSpeedVal1 + Math.abs(slopePer) / constant.targetSpeed.downSlopeAddSpeedVal2;\r\n    }\r\n    return this.baseTargetSpeed + this.baseTargetSpeedRandom + slopeAdd\r\n      + (this._phase >= 2 ? this.phaseEndTargetSpeedAddition : 0);\r\n  }\r\n\r\n  get targetSpeed(): number {\r\n    if (this._mode.has(Mode.ZeroHp)) {\r\n      return this.minSpeed;\r\n    }\r\n    return Math.max(this.minSpeed, this.realTargetSpeed);\r\n  }\r\n\r\n  refreshSpeedRandomValue(): void {\r\n    this._speedWizRandom = _.random(...this._speedWizRandomRange, true);\r\n  }\r\n\r\n  private get baseAccel(): number {\r\n    return constant.accel.accelPhaseCoef[this._runningStyle][this._phase]\r\n      * Math.sqrt(this.stat.pow * constant.accel.accelPowCoefSqrt)\r\n      * groundProperRate[this._horse.properRate.groundType[this._course.groundType]]\r\n      * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].power;\r\n  }\r\n\r\n  get accel(): number {\r\n    if (this._mode.has(Mode.ZeroHp)) {\r\n      return constant.accel.accelDecreaseZeroHpCoef;\r\n    }\r\n\r\n    if (this._speed <= this.targetSpeed) {\r\n      return (this._mode.has(Mode.StartDash) ? constant.accel.startAccelAdd : 0)\r\n        + this.baseAccel * (this._mode.has(Mode.UpSlope) ? constant.accel.accelPowCoefUpSlope : constant.accel.accelPowCoef);\r\n    }\r\n    return constant.accel.accelDecreaseCoef[this._phase];\r\n  }\r\n\r\n  private get phaseEndHpDecreaseRate() {\r\n    return constant.hp.hpGutsBase + constant.hp.hpGutsCoef / Math.sqrt(constant.hp.hpGutsCoefSqrt * this.stat.guts);\r\n  }\r\n\r\n  private get modeHpDecreaseRate() {\r\n    if (this._mode.has(Mode.Temptation)) {\r\n      return constant.hp.hpDecRateBaseTemptation;\r\n    }\r\n    if (this._mode.has(Mode.PositionKeepPaceDown)) {\r\n      return constant.hp.hpDecRateBasePositionKeepPaseDown;\r\n    }\r\n    return constant.hp.hpDecRateBaseNormal;\r\n  }\r\n\r\n  get hpDecreaseRate(): number {\r\n    return constant.hp.hpDecBase * constant.hp.groundModifierMultiHpSub[this._course.groundType][this._course.groundStatus]\r\n      * (this._phase >= CoursePhase.End ? this.phaseEndHpDecreaseRate : 1)\r\n      * this.modeHpDecreaseRate\r\n      * (this._mode.has(Mode.DownSlopeAccel) ? constant.hp.hpDecRateMultiplyDownSlopeAccelMode : 1);\r\n  }\r\n\r\n  get minBreakpoint(): { breakPoint: BreakPoint, distance: number, parameters: any } {\r\n    let minKey: BreakPoint = BreakPoint.None;\r\n    let minDistance: number = Number.MAX_VALUE;\r\n    let minParameters: any;\r\n    for (const [key, value] of Object.entries(this._breakPoints)) {\r\n      let targetValue: BreakPointData;\r\n      if (Array.isArray(value)) {\r\n        targetValue = value[value.length - 1];\r\n      } else {\r\n        targetValue = value;\r\n      }\r\n\r\n      if (targetValue.distance !== undefined) {\r\n        if (targetValue.distance < minDistance) {\r\n          minDistance = targetValue.distance;\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        } else if (targetValue.distance === minDistance && key < minKey) {\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        }\r\n      } else if (targetValue.time !== undefined) {\r\n        const distance = this._distance + (targetValue.time - this._time) * this._speed;\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        } else if (targetValue.distance === minDistance && key < minKey) {\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        }\r\n      }\r\n    }\r\n    return { breakPoint: minKey, distance: minDistance, parameters: minParameters };\r\n  }\r\n\r\n  private static getAccelHpDecrease({\r\n    initialSpeed, accel, time, hpDecreaseRate, baseTargetSpeed,\r\n  }: {\r\n    initialSpeed: number, accel: number, time: number, hpDecreaseRate: number, baseTargetSpeed: number,\r\n  }): number {\r\n    const speedCoefficient = (initialSpeed - baseTargetSpeed + constant.hp.speedGapParam1);\r\n    return hpDecreaseRate\r\n      * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\r\n      / constant.hp.speedGapParam1Pow;\r\n  }\r\n\r\n  private static getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }: { speed: number, hpDecreaseRate: number, baseTargetSpeed: number }) {\r\n    return hpDecreaseRate * (speed - baseTargetSpeed + constant.hp.speedGapParam1) ** 2 / constant.hp.speedGapParam1Pow;\r\n  }\r\n\r\n  private static getRunHpDecrease({\r\n    speed, hpDecreaseRate, baseTargetSpeed, time,\r\n  }: {\r\n    speed: number, hpDecreaseRate: number, baseTargetSpeed: number, time: number,\r\n  }): number {\r\n    return RaceHorse.getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }) * time;\r\n  }\r\n\r\n  private static accelToTargetSpeed({\r\n    accel, currentSpeed, targetSpeed, maxDistance, hpDecreaseRate, baseTargetSpeed,\r\n  }: {\r\n    accel: number,\r\n    currentSpeed: number,\r\n    targetSpeed: number,\r\n    maxDistance: number,\r\n    hpDecreaseRate: number,\r\n    baseTargetSpeed: number\r\n  }) {\r\n    const targetSpeedByDistanceSquare = currentSpeed ** 2 + 2 * accel * maxDistance;\r\n    const finalSpeed = accel > 0\r\n      ? Math.min(targetSpeed, Math.sqrt(targetSpeedByDistanceSquare))\r\n      : Math.max(targetSpeed, Math.sqrt(Math.max(targetSpeedByDistanceSquare, 0)));\r\n    const time = (finalSpeed - currentSpeed) / accel;\r\n    const distance = (currentSpeed + currentSpeed + accel * time) * time / 2;\r\n    const hpCost = RaceHorse.getAccelHpDecrease({\r\n      initialSpeed: currentSpeed,\r\n      accel,\r\n      time,\r\n      hpDecreaseRate,\r\n      baseTargetSpeed,\r\n    });\r\n    return {\r\n      time, distance, hpCost, finalSpeed,\r\n    };\r\n  }\r\n\r\n  private doGateOpen(): void {\r\n    this._time += Math.floor(_.random(constant.course.gateTimeRange.min, constant.course.gateTimeRange.max, true) / constant.course.frameTime)\r\n      * constant.course.frameTime;\r\n    this._mode.add(Mode.StartDash);\r\n    this._breakPoints[BreakPoint.FinishBlock] = { distance: this._course.blockDistance };\r\n    this._breakPoints[BreakPoint.Goal] = { distance: this._course.distance };\r\n  }\r\n\r\n  private finishStartDash(): void {\r\n    const { accel, targetSpeed } = this;\r\n    const {\r\n      time, distance, hpCost, finalSpeed,\r\n    } = RaceHorse.accelToTargetSpeed({\r\n      accel,\r\n      currentSpeed: this._speed,\r\n      targetSpeed,\r\n      maxDistance: this._course.distance,\r\n      hpDecreaseRate: this.hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n    this._time += time;\r\n    this._distance += distance;\r\n    this._hp -= hpCost;\r\n    this._speed = finalSpeed;\r\n\r\n    this._mode.delete(Mode.StartDash);\r\n    if (this._runningStyle === RunningStyle.Sashi || this._runningStyle === RunningStyle.Oikomi) {\r\n      this._breakPoints[BreakPoint.FinishFirstBlock] = { distance: this._course.blockDistance };\r\n      this._mode.add(Mode.FirstBlock);\r\n    } else {\r\n      this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\r\n    }\r\n  }\r\n\r\n  private calculateAccelAndRun(distance: number) {\r\n    const { accel, targetSpeed } = this;\r\n    const {\r\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\r\n    } = RaceHorse.accelToTargetSpeed({\r\n      accel,\r\n      currentSpeed: this._speed,\r\n      targetSpeed,\r\n      maxDistance: distance - this._distance,\r\n      hpDecreaseRate: this.hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n\r\n    const runDistance = (distance - this._distance - accelDistance);\r\n    const runTime = runDistance / finalSpeed;\r\n    const runHpCost = RaceHorse.getRunHpDecrease({\r\n      speed: finalSpeed,\r\n      time: runTime,\r\n      hpDecreaseRate: this.hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n\r\n    return {\r\n      time: accelTime + runTime,\r\n      distance: accelDistance + runDistance,\r\n      hpCost: accelHpCost + runHpCost,\r\n      finalSpeed,\r\n    };\r\n  }\r\n\r\n  private doAccelAndRun(distance: number) {\r\n    const { accel, targetSpeed, hpDecreaseRate } = this;\r\n    const {\r\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\r\n    } = RaceHorse.accelToTargetSpeed({\r\n      accel,\r\n      currentSpeed: this._speed,\r\n      targetSpeed,\r\n      maxDistance: distance - this._distance,\r\n      hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n\r\n    if (accelHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\r\n      /**\r\n       * Accel HP cost formula:\r\n       * hpDecrease = hpDecreaseRate * (accel^2 * time^3 / 3 + accel * time^2 * speedCoefficient + speedCoefficient^2 * time)/ 144\r\n       * speedCoefficient = initialSpeed - baseTargetSpeed + 12\r\n       * Given accel and initialSpeed, hpDecrease = this.hp is a cubic equation of time.\r\n       * It's hard to get a formula solution, but we can get a approximate value by applying Newton's Method.\r\n       */\r\n      const speedCoefficient = this._speed - this._course.baseTargetSpeed + constant.hp.speedGapParam1;\r\n      const realAccelTime = nr(\r\n        (time: number) => (\r\n          hpDecreaseRate * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\r\n        ),\r\n        (time: number) => (\r\n          hpDecreaseRate * (accel ** 2 * time ** 2 + accel * time * 2 * speedCoefficient + speedCoefficient ** 2)\r\n        ),\r\n        10,\r\n      );\r\n      const realAccelDistance = (this._speed + this._speed + accel * accelTime) * accelTime / 2;\r\n      this._time += realAccelTime;\r\n      this._distance += realAccelDistance;\r\n      this._hp = 0;\r\n      this._mode.add(Mode.ZeroHp);\r\n      delete this._breakPoints[BreakPoint.ZeroHp];\r\n      return false;\r\n    }\r\n\r\n    this._hp -= accelHpCost;\r\n    this._time += accelTime;\r\n    this._distance += accelDistance;\r\n    this._speed = finalSpeed;\r\n\r\n    const speedHpDecreaseRate = RaceHorse.getSpeedHpDecrease({\r\n      speed: this._speed,\r\n      hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n    const runDistance = distance - this._distance;\r\n    const runTime = runDistance / this._speed;\r\n    const runHpCost = speedHpDecreaseRate * runTime;\r\n\r\n    if (runHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\r\n      const realRunTime = this._hp / speedHpDecreaseRate;\r\n      const realRunDistance = realRunTime * this._speed;\r\n      this._time += realRunTime;\r\n      this._distance += realRunDistance;\r\n      this._hp = 0;\r\n      this._mode.add(Mode.ZeroHp);\r\n      delete this._breakPoints[BreakPoint.ZeroHp];\r\n      return false;\r\n    }\r\n\r\n    this._hp -= runHpCost;\r\n    this._time += runTime;\r\n    this._distance += runDistance;\r\n    if (!this._mode.has(Mode.ZeroHp)) {\r\n      this._breakPoints[BreakPoint.ZeroHp] = { distance: this._distance + this.hp / speedHpDecreaseRate * this._speed };\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private finishFirstBlock = () => {\r\n    this._mode.delete(Mode.FirstBlock);\r\n    this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\r\n  };\r\n\r\n  private finishBlock = () => {\r\n    if (!this._mode.has(Mode.LastSpurt) && this._course.distance > this._distance) {\r\n      this.refreshSpeedRandomValue();\r\n      this._breakPoints[BreakPoint.FinishBlock] = { distance: this._distance + this._course.blockDistance };\r\n    }\r\n  };\r\n\r\n  private finishPhaseStart = () => {\r\n    this._phase = CoursePhase.Middle;\r\n    this._breakPoints[BreakPoint.FinishPhaseMiddle] = { distance: this._course.phaseMiddleDistance };\r\n  };\r\n\r\n  private static randomByCandidates(lastSpurtSpeedCandidates: LastSpurtCandidate[], determineRate: number): LastSpurtCandidate {\r\n    const randomNumber = Math.random();\r\n    const targetItem = Math.min(\r\n      lastSpurtSpeedCandidates.length - 1,\r\n      Math.floor(Math.log(randomNumber) / Math.log(1 - determineRate)),\r\n    );\r\n    return lastSpurtSpeedCandidates[targetItem];\r\n  }\r\n\r\n  private calculateLastSpurt = (): { lastSpurtDistance: number, lastSpurtTargetSpeed: number } => {\r\n    this._mode.add(Mode.LastSpurt);\r\n    this._lastSpurtTargetSpeed = this.maxLastSpurtTargetSpeed;\r\n    const { hpCost, finalSpeed } = this.calculateAccelAndRun(this._course.distance - constant.lastSpurt.targetDistanceFromGoal);\r\n    this._mode.delete(Mode.LastSpurt);\r\n    if (hpCost <= this._hp && finalSpeed === this._lastSpurtTargetSpeed) {\r\n      this.resultFlag.add(ResultFlag.FullLastSpurt);\r\n      return {\r\n        lastSpurtDistance: this._distance,\r\n        lastSpurtTargetSpeed: finalSpeed,\r\n      };\r\n    }\r\n\r\n    let lastSpurtSpeedCandidates: LastSpurtCandidate[] = [];\r\n    const phaseEndBaseTargetSpeed = this.baseTargetSpeed + this.phaseEndTargetSpeedAddition;\r\n    const maxDistance = this._course.distance - this._distance - constant.lastSpurt.targetDistanceFromGoal;\r\n    const { accel, hpDecreaseRate } = this;\r\n    const { baseTargetSpeed } = this._course;\r\n    for (; this.lastSpurtTargetSpeed >= phaseEndBaseTargetSpeed; this._lastSpurtTargetSpeed -= constant.targetSpeed.lastSpurtTargetSpeedStep) {\r\n      const {\r\n        time: phaseEndAccelTime,\r\n        distance: phaseEndAccelDistance,\r\n        hpCost: phaseEndAccelHpCost,\r\n        finalSpeed: phaseEndFinalSpeed,\r\n      } = RaceHorse.accelToTargetSpeed({\r\n        accel,\r\n        currentSpeed: this._speed,\r\n        targetSpeed: phaseEndBaseTargetSpeed,\r\n        maxDistance,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n      const {\r\n        time: lastSpurtAccelTime,\r\n        distance: lastSpurtAccelDistance,\r\n        hpCost: lastSpurtAccelHpCost,\r\n      } = RaceHorse.accelToTargetSpeed({\r\n        accel,\r\n        currentSpeed: phaseEndFinalSpeed,\r\n        targetSpeed: this.lastSpurtTargetSpeed,\r\n        maxDistance: maxDistance - phaseEndAccelDistance,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n      const runDistance = maxDistance - phaseEndAccelDistance - lastSpurtAccelDistance;\r\n      const phaseEndRunTime = runDistance / phaseEndBaseTargetSpeed;\r\n      const phaseEndRunHpCost = RaceHorse.getRunHpDecrease({\r\n        speed: phaseEndBaseTargetSpeed,\r\n        time: phaseEndRunTime,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n      const lastSpurtRunTime = runDistance / this.lastSpurtTargetSpeed;\r\n      const lastSpurtRunHpCost = RaceHorse.getRunHpDecrease({\r\n        speed: this.lastSpurtTargetSpeed,\r\n        time: lastSpurtRunTime,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n\r\n      if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + lastSpurtRunHpCost) {\r\n        lastSpurtSpeedCandidates.push({\r\n          lastSpurtDistance: this._distance,\r\n          targetSpeed: this.lastSpurtTargetSpeed,\r\n          time: phaseEndAccelTime + lastSpurtAccelTime + lastSpurtRunTime,\r\n        });\r\n      } else if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost) {\r\n        const hpLeft = this.hp - (phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost);\r\n        const hpDiff = lastSpurtRunHpCost - phaseEndRunHpCost;\r\n        lastSpurtSpeedCandidates.push({\r\n          lastSpurtDistance: this._distance + phaseEndAccelDistance + runDistance * (1 - hpLeft / hpDiff),\r\n          targetSpeed: this.lastSpurtTargetSpeed,\r\n          time: phaseEndAccelTime + lastSpurtAccelTime + (hpLeft / hpDiff) * lastSpurtRunTime + (1 - hpLeft / hpDiff) * phaseEndRunTime,\r\n        });\r\n      }\r\n    }\r\n    lastSpurtSpeedCandidates.push({\r\n      lastSpurtDistance: Number.MAX_VALUE,\r\n      targetSpeed: phaseEndBaseTargetSpeed,\r\n      time: Number.MAX_VALUE,\r\n    });\r\n    lastSpurtSpeedCandidates = _.sortBy(lastSpurtSpeedCandidates, ['time']);\r\n    const candidate = RaceHorse.randomByCandidates(lastSpurtSpeedCandidates, this.lastSpurtDetermineRate);\r\n    return {\r\n      lastSpurtDistance: candidate.lastSpurtDistance,\r\n      lastSpurtTargetSpeed: candidate.targetSpeed,\r\n    };\r\n  };\r\n\r\n  private finishPhaseMiddle = () => {\r\n    this._phase = CoursePhase.End;\r\n    const { lastSpurtDistance, lastSpurtTargetSpeed } = this.calculateLastSpurt();\r\n    this._breakPoints[BreakPoint.FinishPhaseEnd] = { distance: this._course.phaseEndDistance };\r\n    this._breakPoints[BreakPoint.LastSpurt] = { distance: lastSpurtDistance };\r\n    this._lastSpurtTargetSpeed = lastSpurtTargetSpeed;\r\n  };\r\n\r\n  private finishPhaseEnd = () => {\r\n    this._phase = CoursePhase.LastSpurt;\r\n    this._breakPoints[BreakPoint.FinishPhaseLastSpurt] = { distance: this._course.distance };\r\n  };\r\n\r\n  private doLastSpurt = () => {\r\n    this._mode.add(Mode.LastSpurt);\r\n    delete this._breakPoints[BreakPoint.FinishBlock];\r\n  };\r\n\r\n  private finishLastSpurt = () => {};\r\n\r\n  private triggerPositionSense = () => {};\r\n\r\n  private zeroHp = () => {\r\n    if (this.hp <= 0) {\r\n      this._mode.add(Mode.ZeroHp);\r\n    }\r\n  };\r\n\r\n  private changeSlope = ({ slopePer }: { slopePer: number }) => {\r\n    if (this._slopePer > -1 && slopePer <= -1) {\r\n      this.checkDownSlopeAccelMode();\r\n    } else if (this._slopePer <= -1 && slopePer > -1) {\r\n      this._mode.delete(Mode.DownSlopeAccel);\r\n      delete this._breakPoints[BreakPoint.DownSlopeAccelMode];\r\n    }\r\n    this._slopePer = slopePer;\r\n  };\r\n\r\n  private checkDownSlopeAccelMode = () => {\r\n    if (this._mode.has(Mode.DownSlopeAccel)) {\r\n      if (Math.random() <= constant.slope.downSlopeEndChance) {\r\n        this._mode.delete(Mode.DownSlopeAccel);\r\n      } else {\r\n        this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\r\n      }\r\n    } else {\r\n      if (Math.random() <= this.stat.wiz * constant.slope.downSlopeAccelModeChanceBase) {\r\n        this._mode.add(Mode.DownSlopeAccel);\r\n        this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\r\n      }\r\n    }\r\n  };\r\n\r\n  private triggerSkill = () => {};\r\n\r\n  private reachGoal = () => {\r\n    this._breakPoints = {};\r\n  };\r\n\r\n  private readonly breakPointMap: { [key in BreakPoint]: (parameters: any) => void } = {\r\n    [BreakPoint.None]: () => {},\r\n    [BreakPoint.FinishFirstBlock]: this.finishFirstBlock,\r\n    [BreakPoint.FinishBlock]: this.finishBlock,\r\n    [BreakPoint.FinishPhaseStart]: this.finishPhaseStart,\r\n    [BreakPoint.FinishPhaseMiddle]: this.finishPhaseMiddle,\r\n    [BreakPoint.FinishPhaseEnd]: this.finishPhaseEnd,\r\n    [BreakPoint.LastSpurt]: this.doLastSpurt,\r\n    [BreakPoint.FinishPhaseLastSpurt]: this.finishLastSpurt,\r\n    [BreakPoint.PositionSense]: this.triggerPositionSense,\r\n    [BreakPoint.ZeroHp]: this.zeroHp,\r\n    [BreakPoint.Slope]: this.changeSlope,\r\n    [BreakPoint.DownSlopeAccelMode]: this.checkDownSlopeAccelMode,\r\n    [BreakPoint.Skill]: this.triggerSkill,\r\n    [BreakPoint.Goal]: this.reachGoal,\r\n  };\r\n\r\n  buildSlopeBreakPoints() {\r\n    const slopePers = this._course.allSlopePers;\r\n    for (let i = slopePers.length - 1; i > 0; i -= 1) {\r\n      this.addBreakPoint(BreakPoint.Slope, {\r\n        distance: slopePers[i].distance,\r\n        parameters: {\r\n          slopePer: slopePers[i].slope_per,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  addBreakPoint(type: BreakPoint, data: BreakPointData) {\r\n    switch (type) {\r\n      case BreakPoint.Skill:\r\n      case BreakPoint.Slope:\r\n        if (!(type in this._breakPoints)) {\r\n          this._breakPoints[type] = [data];\r\n        } else {\r\n          this._breakPoints[type]?.push(data);\r\n        }\r\n        break;\r\n      default:\r\n        this._breakPoints[type] = data;\r\n        break;\r\n    }\r\n  }\r\n\r\n  removeBreakPoint(type: BreakPoint) {\r\n    switch (type) {\r\n      case BreakPoint.Skill:\r\n      case BreakPoint.Slope:\r\n        this._breakPoints[type]?.pop();\r\n        if (this._breakPoints[type]?.length === 0) {\r\n          delete this._breakPoints[type];\r\n        }\r\n        break;\r\n      default:\r\n        delete this._breakPoints[type];\r\n        break;\r\n    }\r\n  }\r\n\r\n  simulate() {\r\n    this._speed = constant.course.startSpeed;\r\n    this._time = 0;\r\n    this._distance = 0;\r\n    this._hp = this.maxHp;\r\n    this._mode = new Set();\r\n    this._phase = CoursePhase.Start;\r\n    this._breakPoints = {};\r\n\r\n    this.buildSlopeBreakPoints();\r\n    this.doGateOpen();\r\n    this.debugOutput();\r\n    this.finishStartDash();\r\n    this.debugOutput();\r\n\r\n    while (Object.keys(this._breakPoints).length > 0) {\r\n      const { breakPoint, distance, parameters } = this.minBreakpoint;\r\n      if (this.doAccelAndRun(distance)) {\r\n        this.removeBreakPoint(breakPoint);\r\n        this.breakPointMap[breakPoint](parameters);\r\n      }\r\n      this.debugOutput();\r\n    }\r\n  }\r\n\r\n  debugOutput() {\r\n    return;\r\n    const debugData = {\r\n      hp: this.hp,\r\n      speed: this._speed,\r\n      time: this._time,\r\n      distance: this._distance,\r\n      phase: this._phase,\r\n      mode: Array.from(this._mode),\r\n      breakPoints: util.inspect(this._breakPoints, { depth: null }),\r\n      slopePer: this._slopePer,\r\n    };\r\n    console.log(debugData);\r\n  }\r\n}\r\n\r\nexport default RaceHorse;\r\n","import React, { Component } from 'react';\r\n\r\nimport _ from 'lodash';\r\nimport Common, { CourseDataType, LocalizationData } from '../../common';\r\nimport { RaceResultData } from './common';\r\nimport constant from '../../library/race/constant';\r\nimport { ResultFlag } from '../../library/race/common';\r\n\r\nimport './simulator.css';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  raceResults: RaceResultData[];\r\n  course?: CourseDataType,\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass RaceResult extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { localization, raceResults, course } = this.props;\r\n    if (course === undefined || raceResults.length === 0) {\r\n      return (\r\n        <>\r\n        </>\r\n      );\r\n    }\r\n\r\n    const timeAverage = _.meanBy(raceResults, 'time');\r\n    const timeShown: string = (timeAverage * constant.course.finishTimeCoef > parseFloat(course.finish_time_min) / 10000)\r\n      ? Common.secondToTime(timeAverage * constant.course.finishTimeCoef)\r\n      : localization.site.TimeMin;\r\n\r\n    let timeDeviationSum = 0;\r\n    let fullLastSpurtCount = 0;\r\n    let hpLeftSum = 0;\r\n    for (const result of raceResults) {\r\n      timeDeviationSum += (result.time - timeAverage) ** 2;\r\n      if (result.resultFlags.has(ResultFlag.FullLastSpurt)) {\r\n        fullLastSpurtCount += 1;\r\n      }\r\n      hpLeftSum += result.hpLeft;\r\n    }\r\n    return (\r\n      <table>\r\n        <tr>\r\n          <th>{localization.site.TimeAverage}</th>\r\n          <th>{localization.site.TimeStandardDeviation}</th>\r\n          <th>{localization.site.TimeShown}</th>\r\n          <th>{localization.site.FullLastSpurtRate}</th>\r\n          <th>{localization.site.HpLeftAverage}</th>\r\n        </tr>\r\n        <tr>\r\n          <td>{timeAverage.toFixed(3)}</td>\r\n          <td>{Math.sqrt(timeDeviationSum / raceResults.length).toFixed(3)}</td>\r\n          <td>{timeShown}</td>\r\n          <td>{(fullLastSpurtCount / raceResults.length).toLocaleString('en', { style: 'percent' })}</td>\r\n          <td>{(hpLeftSum / raceResults.length).toFixed(3)}</td>\r\n        </tr>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaceResult;\r\n","import {\r\n  DistanceType, ProperRate, GroundType, RunningStyle,\r\n} from '../../common';\r\n\r\nexport interface HorseStat {\r\n  speed: number;\r\n  stamina: number;\r\n  pow: number;\r\n  guts: number;\r\n  wiz: number;\r\n}\r\n\r\nexport interface HorseProperRate {\r\n  distanceType: { [key in DistanceType]: ProperRate },\r\n  groundType: { [key in GroundType]: ProperRate },\r\n  runningStyle: { [key in RunningStyle]: ProperRate },\r\n}\r\n\r\nclass Horse {\r\n  stat: HorseStat;\r\n\r\n  properRate: HorseProperRate;\r\n\r\n  constructor(\r\n    { stat, properRate }: {\r\n      stat: HorseStat,\r\n      properRate: HorseProperRate,\r\n    },\r\n  ) {\r\n    this.stat = stat;\r\n    this.properRate = properRate;\r\n  }\r\n}\r\n\r\nexport default Horse;\r\n","import constant from './constant';\r\nimport {\r\n  DistanceType, GroundType, GroundStatus, CourseDataType, TurnType,\r\n} from '../../common';\r\n\r\nclass Course {\r\n  private _courseData: CourseDataType;\r\n\r\n  groundStatus: GroundStatus;\r\n\r\n  static getDistanceType(distance: number): DistanceType {\r\n    if (distance >= constant.course.distanceShort.min && distance <= constant.course.distanceShort.max) {\r\n      return DistanceType.Short;\r\n    }\r\n    if (distance >= constant.course.distanceMile.min && distance <= constant.course.distanceMile.max) {\r\n      return DistanceType.Mile;\r\n    }\r\n    if (distance >= constant.course.distanceMiddle.min && distance <= constant.course.distanceMiddle.max) {\r\n      return DistanceType.Middle;\r\n    }\r\n    if (distance >= constant.course.distanceLong.min && distance <= constant.course.distanceLong.max) {\r\n      return DistanceType.Long;\r\n    }\r\n    return DistanceType.Long;\r\n  }\r\n\r\n  constructor({ courseData, groundStatus } : { courseData: CourseDataType, groundStatus: GroundStatus }) {\r\n    this._courseData = courseData;\r\n    this.groundStatus = groundStatus;\r\n  }\r\n\r\n  get distance(): number {\r\n    return this._courseData.distance;\r\n  }\r\n\r\n  get distanceType(): DistanceType {\r\n    return Course.getDistanceType(this.distance);\r\n  }\r\n\r\n  get groundType(): GroundType {\r\n    return this._courseData.ground;\r\n  }\r\n\r\n  get turnType(): TurnType {\r\n    return this._courseData.turn;\r\n  }\r\n\r\n  get blockDistance(): number {\r\n    return this.distance * constant.course.blockPortion;\r\n  }\r\n\r\n  get phaseStartDistance(): number {\r\n    return this.distance * constant.course.phaseStart;\r\n  }\r\n\r\n  get phaseMiddleDistance(): number {\r\n    return this.distance * constant.course.phaseMiddle;\r\n  }\r\n\r\n  get phaseEndDistance(): number {\r\n    return this.distance * constant.course.phaseEnd;\r\n  }\r\n\r\n  get positionSenseDistance(): number {\r\n    return this.distance * constant.course.positionSense;\r\n  }\r\n\r\n  get baseTargetSpeed(): number {\r\n    return 20 - (this.distance - constant.baseDistance) * constant.course.distanceTargetSpeedCoefficient;\r\n  }\r\n\r\n  get allSlopePers(): { distance: number, slope_per: number }[] {\r\n    return this._courseData.slope_per;\r\n  }\r\n}\r\n\r\nexport default Course;\r\n","import _ from 'lodash';\r\nimport {\r\n  Button, Col, InputNumber, Row, Progress,\r\n} from 'antd';\r\nimport React, { Component } from 'react';\r\nimport Promise from 'bluebird';\r\n\r\nimport {\r\n  CourseDataType, DistanceType, GroundStatus, GroundType, LocalizationData, RunningStyle,\r\n} from '../../common';\r\nimport {\r\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate, RaceResultData,\r\n} from './common';\r\nimport Horse from '../../library/race/horse';\r\nimport Course from '../../library/race/course';\r\nimport RaceHorse from '../../library/race/race-horse';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './simulator.css';\r\n\r\ninterface SimulatorState extends IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\r\n  strategy?: string,\r\n  groundStatus?: string,\r\n  racecourse?: string,\r\n  ground?: string,\r\n  distance?: number,\r\n  course?: CourseDataType,\r\n}\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  setData: (key: string, value: any) => void,\r\n  state: SimulatorState,\r\n}\r\n\r\ninterface IState {\r\n  running: boolean,\r\n  finished: number,\r\n  rounds: number,\r\n}\r\n\r\nclass SimulatorCalculator extends Component<IProps, IState> {\r\n  static readonly concurrency = 50;\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      running: false,\r\n      rounds: 1000,\r\n      finished: 0,\r\n    };\r\n  }\r\n\r\n  calculate = async () => {\r\n    this.setState({\r\n      running: true,\r\n      finished: 0,\r\n    });\r\n    const { state, setData } = this.props;\r\n    const {\r\n      speed, stamina, pow, guts, wiz,\r\n      strategy, groundStatus, course,\r\n      groundTypeTurf, groundTypeDirt,\r\n      distanceTypeShort, distanceTypeMile, distanceTypeMiddle, distanceTypeLong,\r\n      runningStyleNige, runningStyleSenko, runningStyleSashi, runningStyleOikomi,\r\n    } = state;\r\n    const { rounds } = this.state;\r\n\r\n    const targetCourse = new Course({\r\n      courseData: course as CourseDataType,\r\n      groundStatus: groundStatus as GroundStatus,\r\n    });\r\n    const targetHorse = new Horse({\r\n      stat: {\r\n        speed, stamina, pow, guts, wiz,\r\n      },\r\n      properRate: {\r\n        groundType: {\r\n          [GroundType.Turf]: groundTypeTurf,\r\n          [GroundType.Dirt]: groundTypeDirt,\r\n        },\r\n        distanceType: {\r\n          [DistanceType.Short]: distanceTypeShort,\r\n          [DistanceType.Mile]: distanceTypeMile,\r\n          [DistanceType.Middle]: distanceTypeMiddle,\r\n          [DistanceType.Long]: distanceTypeLong,\r\n        },\r\n        runningStyle: {\r\n          [RunningStyle.Nige]: runningStyleNige,\r\n          [RunningStyle.Senko]: runningStyleSenko,\r\n          [RunningStyle.Sashi]: runningStyleSashi,\r\n          [RunningStyle.Oikomi]: runningStyleOikomi,\r\n        },\r\n      },\r\n    });\r\n\r\n    let counter = 0;\r\n    let started = 0;\r\n    const worksPerThread = Math.ceil(rounds / SimulatorCalculator.concurrency);\r\n    const raceResults: RaceResultData[] = [];\r\n    await Promise.map(\r\n      new Array(SimulatorCalculator.concurrency),\r\n      async () => {\r\n        const raceHorse = new RaceHorse({\r\n          horse: targetHorse, course: targetCourse, runningStyle: strategy as RunningStyle,\r\n        });\r\n        for (let i = 0; i < worksPerThread && started < rounds; i += 1) {\r\n          started += 1;\r\n          raceHorse.simulate();\r\n          raceResults.push({\r\n            time: raceHorse.time,\r\n            resultFlags: raceHorse.resultFlag,\r\n            hpLeft: raceHorse.hp > 0 ? raceHorse.hp : 0,\r\n            skills: {\r\n              normal: 0,\r\n              rare: 0,\r\n              unique: false,\r\n            },\r\n            temptation: {\r\n              triggered: false,\r\n              time: 0,\r\n            },\r\n          });\r\n          counter += 1;\r\n          this.setState({ finished: counter });\r\n          await Promise.delay(0);\r\n        }\r\n      },\r\n      { concurrency: SimulatorCalculator.concurrency },\r\n    );\r\n    this.setState({ running: false });\r\n    setData('raceResults', raceResults);\r\n  };\r\n\r\n  render() {\r\n    const { localization, state } = this.props;\r\n    const { course } = state;\r\n    const { finished, rounds, running } = this.state;\r\n    const progressPercent = _.round(finished / rounds * 100, 1);\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        <Col span={4}>\r\n          <div className=\"flex\">\r\n            <span className=\"select-label\">{`${localization.site.SimulatorCalculateRounds}:`}</span>\r\n            <InputNumber\r\n              className=\"select\"\r\n              value={rounds}\r\n              min={1}\r\n              max={1000}\r\n              onChange={(value) => this.setState({ rounds: value })}\r\n            />\r\n            <Button\r\n              className=\"select-label\"\r\n              type=\"primary\"\r\n              disabled={course === undefined || running}\r\n              onClick={this.calculate}\r\n            >\r\n              {localization.site.SimulatorCalculate}\r\n            </Button>\r\n            { running ? <Progress className=\"select-label\" percent={progressPercent} /> : null }\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimulatorCalculator;\r\n","/* eslint-disable react/no-unused-state */\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  CourseCategory, CourseDataType, GroundStatus, GroundType, LocalizationData, ProperRate, RunningStyle,\r\n} from '../../common';\r\nimport {\r\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate, RaceResultData,\r\n} from './common';\r\nimport CourseData from './course-data';\r\nimport HorseData from './horse-data';\r\nimport RaceResult from './race-result';\r\nimport SimulatorCalculator from './simulator-calculator';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './simulator.css';\r\nimport '../../app.css';\r\n\r\nimport courseJson from '../../db/course.json';\r\n\r\nconst courses = courseJson as { [key: string]: CourseDataType };\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n}\r\n\r\ninterface IProperRate extends IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\r\n}\r\n\r\ninterface IState extends IHorseState, IProperRate {\r\n  strategy?: RunningStyle,\r\n  racecourse?: string,\r\n  ground?: GroundType,\r\n  distance?: number,\r\n  groundStatus?: GroundStatus,\r\n\r\n  course?: CourseDataType,\r\n  raceResults: RaceResultData[],\r\n}\r\n\r\nclass Simulator extends Component<IProps, IState> {\r\n  private courseCategories: CourseCategory = {};\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.loadCourseData();\r\n    this.state = {\r\n      speed: 1200,\r\n      stamina: 300,\r\n      pow: 1200,\r\n      guts: 300,\r\n      wiz: 300,\r\n\r\n      groundTypeTurf: ProperRate.A,\r\n      groundTypeDirt: ProperRate.A,\r\n\r\n      distanceTypeShort: ProperRate.A,\r\n      distanceTypeMile: ProperRate.A,\r\n      distanceTypeMiddle: ProperRate.A,\r\n      distanceTypeLong: ProperRate.A,\r\n\r\n      runningStyleNige: ProperRate.A,\r\n      runningStyleSenko: ProperRate.A,\r\n      runningStyleSashi: ProperRate.A,\r\n      runningStyleOikomi: ProperRate.A,\r\n\r\n      strategy: RunningStyle.Nige,\r\n      racecourse: '10001',\r\n      ground: GroundType.Turf,\r\n      distance: 1200,\r\n      groundStatus: GroundStatus.Good,\r\n      course: this.courseCategories['10001'][GroundType.Turf][1200],\r\n      raceResults: [],\r\n    };\r\n  }\r\n\r\n  updateCourse = () => {\r\n    const {\r\n      strategy, racecourse, ground, distance, groundStatus,\r\n    } = this.state;\r\n    if (racecourse === undefined || ground === undefined || distance === undefined || strategy === undefined || groundStatus === undefined) {\r\n      this.setState({ course: undefined });\r\n    } else {\r\n      this.setState({ course: this.courseCategories[racecourse][ground][distance] });\r\n    }\r\n  };\r\n\r\n  setData = (key: string, value: any): void => {\r\n    switch (key) {\r\n      case 'racecourse':\r\n        this.setState({\r\n          racecourse: value,\r\n          ground: undefined,\r\n          distance: undefined,\r\n          course: undefined,\r\n        });\r\n        break;\r\n      case 'ground':\r\n        this.setState({\r\n          ground: value as GroundType,\r\n          distance: undefined,\r\n          course: undefined,\r\n        });\r\n        break;\r\n      case 'distance':\r\n      case 'strategy':\r\n      case 'groundStatus':\r\n        this.setState<'distance' | 'strategy' | 'groundStatus'>({ [key]: value }, this.updateCourse);\r\n        break;\r\n      case 'speed':\r\n      case 'stamina':\r\n      case 'pow':\r\n      case 'guts':\r\n      case 'wiz':\r\n        this.setState({ [key]: value as number } as Pick<IHorseState, keyof IHorseState>);\r\n        break;\r\n      case 'raceResults':\r\n        this.setState({ raceResults: value });\r\n        break;\r\n      default:\r\n        this.setState({ [key]: value } as Pick<IProperRate, keyof IProperRate>);\r\n        break;\r\n    }\r\n  };\r\n\r\n  loadCourseData() {\r\n    for (const courseId of Object.keys(courses)) {\r\n      const course = courses[courseId];\r\n      if (!(course.race_track_id in this.courseCategories)) {\r\n        this.courseCategories[course.race_track_id] = {};\r\n      }\r\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\r\n        this.courseCategories[course.race_track_id][course.ground] = {};\r\n      }\r\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { localization } = this.props;\r\n    const { raceResults, course } = this.state;\r\n    return (\r\n      <div className=\"content\">\r\n        <HorseData\r\n          localization={localization}\r\n          setData={this.setData}\r\n          state={this.state}\r\n        />\r\n        <CourseData\r\n          localization={localization}\r\n          courseCategories={this.courseCategories}\r\n          setData={this.setData}\r\n          state={this.state}\r\n        />\r\n        <SimulatorCalculator\r\n          localization={localization}\r\n          state={this.state}\r\n          setData={this.setData}\r\n        />\r\n        <RaceResult localization={localization} raceResults={raceResults} course={course} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Simulator;\r\n","import React, { useState } from 'react';\n\nimport { Skill } from './common';\n\ninterface Props {\n  skill: Skill,\n}\n\nconst SkillItem: React.FC<Props> = (props) => {\n  const { skill: propSkill } = props;\n  const [skill, setSkill] = useState(propSkill);\n\n  const gradeRate = () => ((!skill.need_skill_point) ? skill.grade_value : (skill.grade_value / skill.need_skill_point).toFixed(2));\n\n  return (\n    <tr>\n      <td>{skill.id}</td>\n\n      <td>{skill.name}</td>\n      <td>{skill.description}</td>\n      <td>{skill.rarity}</td>\n      <td>{skill.need_skill_point}</td>\n      <td>{skill.grade_value}</td>\n      <td>{gradeRate()}</td>\n\n    </tr>\n  );\n};\n\nexport default SkillItem;\n","import React, { useState } from 'react';\n\nimport skill_data from '../../db/skill.json';\nimport { Skill } from './common';\nimport SkillItem from './skill-item';\n\nimport '../../app.css';\n\ninterface IProps {\n}\n\nfunction Skills(props: IProps) {\n  const [skills, setSkills] = useState(initSkills);\n  // const [effectFilter, setEffectFilter] = useState([]);\n\n  function initSkills() {\n    const data = skill_data;\n    const skillArray: Skill[] = [];\n    data.forEach((skill) => {\n      skillArray.push({\n        name: skill.name,\n        need_skill_point: skill.need_skill_point,\n        description: skill.description,\n        id: skill.id,\n        rarity: skill.rarity,\n        grade_value: skill.grade_value,\n      });\n    });\n    return skillArray;\n  }\n\n  const options = () => '';\n\n  const skillTable = () => skills.map((skill, index) => (<SkillItem skill={skill} />));\n\n  return (\n    <div className=\"content\">\n      {options()}\n      <table>\n        {skillTable()}\n      </table>\n    </div>\n  );\n}\n\nexport default Skills;\n","import _ from 'lodash';\r\n\r\nimport { LocalizationData, LocalizationSubData } from './common';\r\n\r\nclass Localization {\r\n  default: {};\r\n\r\n  localizer: {\r\n    [key: string]: () => __WebpackModuleApi.RequireContext;\r\n  };\r\n\r\n  static getLocalizationJaJp() {\r\n    return require.context('./localization/ja_jp/', true, /\\.json$/);\r\n  }\r\n\r\n  static getLocalizationEnUs() {\r\n    return require.context('./localization/en_us/', true, /\\.json$/);\r\n  }\r\n\r\n  static getLocalizationZhTw() {\r\n    return require.context('./localization/zh_tw', true, /\\.json$/);\r\n  }\r\n\r\n  constructor() {\r\n    this.default = {};\r\n    this.localizer = {\r\n      'ja-jp': Localization.getLocalizationJaJp,\r\n      'en-us': Localization.getLocalizationEnUs,\r\n      'zh-tw': Localization.getLocalizationZhTw,\r\n    };\r\n    this.default = this.getLocalization('ja-jp');\r\n  }\r\n\r\n  getLocalization(locale: string): LocalizationData {\r\n    const files = this.localizer[locale]();\r\n    const fileJson: LocalizationSubData = {};\r\n    for (const fileKey of files.keys()) {\r\n      const structure = fileKey.split('.')[1].split('/');\r\n\r\n      let target: LocalizationSubData = fileJson;\r\n      for (let i = 1; i < structure.length; i += 1) {\r\n        if (!(structure[i] in fileJson)) {\r\n          target[structure[i]] = {};\r\n        }\r\n        target = target[structure[i]] as LocalizationSubData;\r\n      }\r\n      _.merge(target, files(fileKey));\r\n    }\r\n    return _.merge({}, this.default, fileJson) as LocalizationData;\r\n  }\r\n}\r\n\r\nexport default Localization;\r\n","import { Layout, Menu, Select } from 'antd';\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Redirect, HashRouter as Router, Route, Link, Switch,\r\n} from 'react-router-dom';\r\n\r\nimport { LocalizationData } from './common';\r\nimport RelationGraph from './component/relation/graph';\r\nimport RelationQuery from './component/relation/query';\r\nimport Simulator from './component/simulator/simulator';\r\nimport Skill from './component/skill/index';\r\nimport Localization from './localization';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './app.css';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n}\r\n\r\ninterface IState {\r\n  localization: LocalizationData;\r\n}\r\n\r\nclass App extends Component<IProps, IState> {\r\n  localization: Localization;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.localization = new Localization();\r\n    this.state = {\r\n      localization: this.localization.getLocalization('ja-jp'),\r\n    };\r\n  }\r\n\r\n  changeLocalization = (locale: string) => {\r\n    this.setState({\r\n      localization: this.localization.getLocalization(locale),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { localization } = this.state;\r\n    return (\r\n      <Router>\r\n        <Layout className=\"layout\">\r\n          <Header className=\"header\">\r\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\r\n              <Menu.Item key=\"1\">\r\n                <Link to=\"/relation/graph\" className=\"link\">{localization.site['Relation Graph']}</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"2\">\r\n                <Link to=\"/relation/query\" className=\"link\">{localization.site['Relation Query']}</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"3\">\r\n                <Link to=\"/simulator\" className=\"link\">{localization.site.Simulator}</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Header>\r\n          <Content className=\"tabs\">\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Redirect to=\"/relation/graph\" />\r\n              </Route>\r\n              <Route path=\"/relation/graph\" render={() => (<RelationGraph localization={localization} />)} />\r\n              <Route path=\"/relation/query\" render={() => (<RelationQuery localization={localization} />)} />\r\n              <Route path=\"/simulator\" render={() => (<Simulator localization={localization} />)} />\r\n              <Route path=\"/skill\" render={() => (<Skill />)} />\r\n            </Switch>\r\n          </Content>\r\n          <Footer className=\"footer\">\r\n            <Select className=\"localizationSelector\" defaultValue=\"ja-jp\" onChange={this.changeLocalization}>\r\n              <Option value=\"zh-tw\">繁體中文</Option>\r\n              <Option value=\"ja-jp\">日本語</Option>\r\n              <Option value=\"en-us\">English</Option>\r\n            </Select>\r\n          </Footer>\r\n        </Layout>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}