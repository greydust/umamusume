{"version":3,"sources":["localization/ja_jp sync //.json$","localization/en_us sync //.json$","localization/zh_tw sync //.json$","library/common.ts","component/relation/graph.tsx","component/relation/query.tsx","component/course-data.tsx","component/simulator/horse-proper-rate.tsx","component/simulator/horse-stat-data.tsx","library/race/common.ts","component/simulator/horse-data.tsx","component/simulator/race-data.tsx","library/race/constant.ts","library/race/race-horse.ts","component/simulator/race-result.tsx","library/race/horse.ts","library/race/course.ts","library/race/skill.ts","component/simulator/simulator-calculator.tsx","component/simulator/skill-selector.tsx","component/simulator/simulator.tsx","component/course/course-chart.tsx","component/course/course.tsx","localization.ts","app.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","RunningStyle","DistanceType","GroundType","TurnType","InoutType","CoursePhase","GroundStatus","ProperRate","SkillAbilityType","SkillAbilityTargetType","SkillConditionOperatorsLogical","SkillConditionOperatorsFormula","characters","characterJson","relations","relationJson","relationMembers","relationMemberJson","RelationGraph","props","characterIds","i","length","j","calculateRelation","this","idToPortrait","_","targetId","localization","className","src","process","alt","character","name","createRow","id1","id2","targetRelations","intersection","reduce","sum","parseInt","Component","RelationQuery","horses","selectHorse","event","value","target","setState","horseId","state","rel","forEach","targetHorseId","push","relation","image","sortBy","horseRow","relationArray","buildRelationArray","FormControl","InputLabel","Select","labelId","onChange","MenuItem","undefined","Common","time","hour","Math","floor","hourString","minute","minuteString","toString","padStart","second","secondString","minorString","Option","CourseData","setData","racecourse","span","site","Racecourse","course","key","courseCategories","ground","Ground","distance","Distance","racecourseComponent","getRacecourseComponent","groundComponent","getGroundComponent","distanceComponent","getDistanceComponent","gutter","HorseProperRate","properRateTypes","properTypes","properName","properRateType","camelProperRateType","camelCase","properRate","G","F","E","D","C","B","A","S","HorseStatData","stats","min","max","data","speed","stamina","pow","guts","wiz","ResultFlag","Season","Weather","HorseData","RaceData","strategy","Strategy","Nige","RunningStyleNige","Senko","RunningStyleSenko","Sashi","RunningStyleSashi","Oikomi","RunningStyleOikomi","groundStatus","Good","GroundStatusGood","SlightlyHeavy","GroundStatusSlightlyHeavy","Heavy","GroundStatusHeavy","Bad","GroundStatusBad","strategyComponent","getStrategyComponent","groundStatusComponent","getGroundStatusComponent","constant","baseDistance","minSpeed","minSpeedRate","minSpeedGutsCoefSqrt","minSpeedGutsCoef","startDash","targetSpeedCoefficient","startAccelAdd","targetSpeed","baseTargetSpeedRandomMinusVal1","baseTargetSpeedRandomMinusVal2","baseTargetSpeedRandomPlusVal1","baseTargetSpeedRandomLogCoefficient","baseTargetSpeedRandomCoefficient","Start","Middle","End","LastSpurt","phaseEndBaseTargetSpeedCoef","addSpeedParamCoef","baseTargetSpeedCoef","lastSpurtBaseTargetSpeedAddCoef","lastSpurtTargetSpeedCoefSqrt","upSlopeAddSpeedVal1","downSlopeAddSpeedVal1","downSlopeAddSpeedVal2","firstBlockSlowStyles","lastSpurtTargetSpeedStep","accel","accelPhaseCoef","accelPowCoef","accelPowCoefUpSlope","accelPowCoefSqrt","accelDecreaseCoef","accelDecreaseZeroHpCoef","hp","hpInitialVal1","hpMaxCoef","hpDecBase","hpDecRateBaseNormal","hpDecRateBaseTemptation","hpDecRateBasePositionKeepPaseDown","hpDecRateMultiplyDownSlopeAccelMode","speedGapParam1","speedGapParam1Pow","groundModifierMultiHpSub","Turf","Dirt","hpGutsBase","hpGutsCoef","hpGutsCoefSqrt","distanceTargetSpeedCoefficient","blockPortion","distanceShort","distanceMile","distanceMiddle","distanceLong","Number","MAX_VALUE","startSpeed","phaseStart","phaseMiddle","phaseEnd","positionSense","frameTime","gateTimeRange","finishTimeCoef","lastSpurt","determineRateBase","determineRateWizMultiplier","targetDistanceFromGoal","slope","downSlopeAccelModeChanceBase","downSlopeEndChance","skill","activatePerMin","lotActivatePerVal1","lotActivatePerVal2","abilityTimeDivideDistance","coolDownTimeDivideDistance","BreakPoint","Mode","RaceResult","raceResults","timeAverage","meanBy","timeShown","parseFloat","finish_time_min","secondToTime","TimeMin","timeDeviationSum","fullLastSpurtCount","hpLeftSum","result","resultFlags","has","FullLastSpurt","hpLeft","TimeAverage","TimeStandardDeviation","TimeShown","FullLastSpurtRate","HpLeftAverage","toFixed","sqrt","toLocaleString","style","Horse","stat","skills","Course","courseData","_courseData","getDistanceType","turn","slope_per","race_track_id","Short","Mile","Long","Skill","condition","raceHorse","realCondition","operator","andCondition","items","childCondition","matchBase","orCondition","formulaCondition","targetValue","getTargetValue","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","EqualTo","NotEqualTo","turnType","trackId","season","weather","postNumber","sameRunningStyleCount","popularityFirstRunningStyle","runningStyle","popularity","random","distanceProperRate","distanceProperRateJson","groundProperRate","groundProperRateJson","RaceHorse","horse","sameRunningStyle","_course","_horse","_runningStyle","_season","_weather","_postNumber","_popularity","_sameRunningStyleCount","_popularityFirstRunningStyle","_statAddition","_stat","_generalSkills","_activateCountSkills","_skillCooldown","_speedWizRandomRange","_speedWizRandom","_phase","_mode","Set","_speed","_lastSpurtTargetSpeed","_hp","_distance","_time","_breakPoints","_startDashTargetSpeed","_slopePer","raceResult","finishFirstBlock","delete","FirstBlock","FinishPhaseStart","phaseStartDistance","finishBlock","refreshSpeedRandomValue","FinishBlock","blockDistance","finishPhaseStart","FinishPhaseMiddle","phaseMiddleDistance","calculateLastSpurt","add","maxLastSpurtTargetSpeed","calculateAccelAndRun","hpCost","finalSpeed","lastSpurtDistance","lastSpurtTargetSpeed","lastSpurtSpeedCandidates","phaseEndBaseTargetSpeed","baseTargetSpeed","phaseEndTargetSpeedAddition","maxDistance","hpDecreaseRate","accelToTargetSpeed","currentSpeed","phaseEndAccelTime","phaseEndAccelDistance","phaseEndAccelHpCost","phaseEndFinalSpeed","lastSpurtAccelTime","lastSpurtAccelDistance","lastSpurtAccelHpCost","runDistance","phaseEndRunTime","phaseEndRunHpCost","getRunHpDecrease","lastSpurtRunTime","lastSpurtRunHpCost","hpDiff","candidate","randomByCandidates","lastSpurtDetermineRate","finishPhaseMiddle","FinishPhaseEnd","phaseEndDistance","finishPhaseEnd","FinishPhaseLastSpurt","doLastSpurt","finishLastSpurt","triggerPositionSense","zeroHp","ZeroHp","changeSlope","slopePer","checkDownSlopeAccelMode","DownSlopeAccel","DownSlopeAccelMode","triggerSkill","reachGoal","breakPointMap","None","FinishFirstBlock","PositionSense","Slope","TriggerSkill","Goal","clone","skillsActivated","temptation","triggered","originalStat","distanceType","StartDash","startDashTargetSpeed","slopeAdd","abs","baseTargetSpeedRandom","realTargetSpeed","groundType","power","baseAccel","UpSlope","Temptation","PositionKeepPaceDown","phaseEndHpDecreaseRate","modeHpDecreaseRate","minParameters","minKey","minDistance","entries","Array","isArray","parameters","breakPoint","accelTime","accelDistance","accelHpCost","runTime","speedCoefficient","realAccelTime","nr","realAccelDistance","speedHpDecreaseRate","getSpeedHpDecrease","runHpCost","realRunTime","realRunDistance","effect","targets","target_type","Self","ability_type","AddSpeed","AddStamina","AddPow","AddGuts","AddWiz","AddSight","AddHp","ExtendTemptation","AddTargetSpeed","AddLaneAccel","AddAccel","skillId","ability","count","cooldown_time","effects","applyEffect","slopePers","allSlopePers","addBreakPoint","type","pop","distances","specific","skillActivateRate","generalTriggerDistances","specificTriggerDistances","abilities","ability_time","activateAbility","getSkillTriggerStat","maxHp","populateSkills","upperBound","log10","lowerBound","buildSlopeBreakPoints","doGateOpen","debugOutput","finishStartDash","minBreakpoint","doAccelAndRun","removeBreakPoint","initialSpeed","targetSpeedByDistanceSquare","getAccelHpDecrease","determineRate","randomNumber","log","skillData","skillJson","SimulatorCalculator","calculate","a","running","finished","groundTypeTurf","groundTypeDirt","distanceTypeShort","distanceTypeMile","distanceTypeMiddle","distanceTypeLong","runningStyleNige","runningStyleSenko","runningStyleSashi","runningStyleOikomi","rounds","targetCourse","targetHorse","counter","started","worksPerThread","ceil","concurrency","Promise","Spring","Sunny","simulate","delay","progressPercent","round","SimulatorCalculateRounds","disabled","onClick","SimulatorCalculate","percent","SKILL_SELECTOR_HIERARCHY","categoryName","sets","children","icon","TreeNode","TreeSelect","SkillSelector","_skillSets","icon_id","rarity","definitions","definition","title","buildSkillTreeNodes","chain","set","filter","skillSet","flatten","dropdownPopupAlign","overflow","adjustY","adjustX","offset","treeLine","allowClear","multiple","autoClearSearchValue","showCheckedStrategy","SHOW_PARENT","width","courses","courseJson","Simulator","updateCourse","loadCourseData","CORNER_COLOR","Default","stroke","strokeOpacity","fill","fillOpacity","1","2","3","4","CourseChart","slopeDistance","lastSlopePer","lastSlopePerDistance","referenceAreas","param","corner","index","corner_index","includes","indexOf","ReferenceArea","x1","start","x2","end","y1","y2","label","Label","position","ComposedChart","height","XAxis","dataKey","YAxis","domain","Tooltip","Legend","Line","dot","CourseSlope","ReferenceLine","x","CoursePositionKeepEnd","CourseMiddlePhase","CourseEndPhase","Localization","default","localizer","getLocalizationJaJp","getLocalizationEnUs","getLocalizationZhTw","getLocalization","locale","files","fileJson","fileKey","structure","split","merge","require","Header","Layout","Content","Footer","App","changeLocalization","theme","mode","defaultSelectedKeys","Item","to","exact","path","render","padding","href","defaultValue","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62e6b51a.chunk.js","sourcesContent":["var map = {\n\t\"./character/name.json\": 450,\n\t\"./course/ground.json\": 451,\n\t\"./course/inout.json\": 452,\n\t\"./course/racecourse.json\": 453,\n\t\"./site.json\": 454\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 449;","var map = {\n\t\"./character/name.json\": 456,\n\t\"./course/racecourse.json\": 457,\n\t\"./site.json\": 458\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 455;","var map = {\n\t\"./character/name.json\": 460,\n\t\"./course/racecourse.json\": 461,\n\t\"./site.json\": 462\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 459;","/* eslint-disable @typescript-eslint/no-shadow */\nexport interface LocalizationData {\n  character: {\n    name: LocalizationMap,\n  },\n  course: {\n    racecourse: LocalizationMap,\n    ground: LocalizationMap,\n    inout: LocalizationMap,\n  },\n  site: LocalizationMap,\n  [key: string]: string | LocalizationSubData,\n}\n\nexport interface LocalizationSubData {\n  [key: string]: string | LocalizationSubData,\n}\n\ninterface LocalizationMap {\n  [key: string]: string,\n}\n\nexport enum RunningStyle {\n  Nige = 'RunningStyleNige',\n  Senko = 'RunningStyleSenko',\n  Sashi = 'RunningStyleSashi',\n  Oikomi = 'RunningStyleOikomi',\n}\n\nexport enum DistanceType {\n  Short = 'DistanceTypeShort',\n  Mile = 'DistanceTypeMile',\n  Middle = 'DistanceTypeMiddle',\n  Long = 'DistanceTypeLong',\n}\n\nexport enum GroundType {\n  Turf = '1',\n  Dirt = '2',\n}\n\nexport enum TurnType {\n  Right = '1',\n  Left = '2',\n  Straight = '4',\n}\n\nexport enum InoutType {\n  Normal = '1',\n  Inner = '2',\n  Outer = '3',\n  OuterInner = '4',\n}\n\nexport enum CoursePhase {\n  Start = 0,\n  Middle = 1,\n  End = 2,\n  LastSpurt = 3,\n}\n\nexport enum GroundStatus {\n  Good = 'GroundStatusGood',\n  SlightlyHeavy = 'GroundStatusSlightlyHeavy',\n  Heavy = 'GroundStatusHeavy',\n  Bad = 'GroundStatusBad',\n}\n\nexport enum ProperRate {\n  G = '1',\n  F = '2',\n  E = '3',\n  D = '4',\n  C = '5',\n  B = '6',\n  A = '7',\n  S = '8',\n}\n\nexport interface CourseCategory {\n  [key: string]: {\n    [key: string]: {\n      [key: string]: CourseDataType,\n    },\n  },\n}\n\nexport interface CourseDataType {\n  id: string,\n  race_track_id: string,\n  distance: number,\n  ground: GroundType,\n  turn: TurnType,\n  inout: InoutType,\n  course_set_status_id: string,\n  finish_time_min: string,\n  finish_time_min_random_range: string,\n  finish_time_max: string,\n  finish_time_max_random_range: string,\n  param: {\n    corner: { start?: number, end?: number }[],\n    straight: { start: number, end: number }[],\n    corner_index: number[],\n  },\n  slope_per: { distance: number, slope_per: number }[],\n}\n\nexport interface SkillData {\n  id: string,\n  name: string,\n  rarity: number,\n  description: string,\n  icon_id: string,\n  need_skill_point: number | null,\n  abilities: SkillAbilityData[],\n}\n\nexport interface SkillAbilityData {\n  condition_raw: string,\n  condition: SkillConditionObject,\n  ability_time: number,\n  cooldown_time: number,\n  effects: SkillEffectData[],\n}\n\nexport interface SkillEffectData {\n  ability_type: SkillAbilityType,\n  ability_value: number,\n  target_type: SkillAbilityTargetType,\n  target_value: number,\n}\n\nexport enum SkillAbilityType {\n  AddSpeed = '1',\n  AddStamina = '2',\n  AddPow = '3',\n  AddGuts = '4',\n  AddWiz = '5',\n  AddSight = '8',\n  AddHp = '9',\n  ExtendTemptation = '13',\n  AddTargetSpeed = '27',\n  AddLaneAccel = '28',\n  AddAccel = '31',\n}\n\nexport enum SkillAbilityTargetType {\n  Self = '1',\n  FrontInSight = '4',\n  FrontAll = '9',\n  BehindAll = '10',\n  RunningStyle = '18',\n  DistanceFront = '19',\n  DistanceBehind = '20',\n  RunningStyleInTemptation = '21',\n}\n\nenum SkillConditionOperatorsLogical {\n  And = 'and',\n  Or = 'or',\n}\n\nexport enum SkillConditionOperatorsFormula {\n  GreaterThan = '>',\n  GreaterThanOrEqualTo = '>=',\n  LessThan = '<',\n  LessThanOrEqualTo = '<=',\n  EqualTo = '==',\n  NotEqualTo = '!=',\n}\n\nexport interface SkillConditionObjectLogical {\n  operator: SkillConditionOperatorsLogical,\n  items: SkillConditionObject[],\n}\n\nexport interface SkillConditionObjectFormula {\n  operator: SkillConditionOperatorsFormula,\n  key: string,\n  value: string,\n}\n\nexport type SkillConditionObject = SkillConditionObjectLogical | SkillConditionObjectFormula | {};\n\nclass Common {\n  static secondToTime(time: number): string {\n    const hour = Math.floor(time / 3600);\n    const hourString = hour > 0 ? `${hour}:` : '';\n    const minute = Math.floor((time - hour * 3600) / 60);\n    const minuteString = minute > 0\n      ? `${hour > 0 ? `${minute.toString().padStart(2, '0')}` : minute}:`\n      : '';\n    const second = Math.floor(time - hour * 3600 - minute * 60);\n    const secondString = second > 0\n      ? `${(hour > 0 || minute > 0) ? `${second.toString().padStart(2, '0')}` : second}`\n      : '0';\n    const minorString = `.${Math.floor((time - hour * 3600 - minute * 60 - second) * 1000).toString().padStart(3, '0')}`;\n    return `${hourString}${minuteString}${secondString}${minorString}`;\n  }\n}\n\nexport default Common;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport 'react-tabs/style/react-tabs.css';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../library/common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n}\n\nclass RelationGraph extends Component<IProps, IState> {\n  static calculateRelation(id1: string, id2: string) {\n    if (id1 === id2) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  characterIds: string[];\n\n  relations: { [key: string]: { [key: string]: number } };\n\n  constructor(props: IProps) {\n    super(props);\n    this.characterIds = Object.keys(characters);\n    this.relations = {};\n    for (let i = 0; i < this.characterIds.length; i += 1) {\n      this.relations[this.characterIds[i]] = {};\n      for (let j = 0; j < this.characterIds.length; j += 1) {\n        this.relations[this.characterIds[i]][this.characterIds[j]] = RelationGraph.calculateRelation(this.characterIds[i], this.characterIds[j]);\n      }\n    }\n  }\n\n  createRow(id: string) {\n    return (\n      <tr key={`relation_row_${id}`}>\n        <th key={`portrait_row_${id}`}>{this.idToPortrait(id)}</th>\n        { _.map(this.characterIds, (targetId) => <th key={`relation_${id}_${targetId}`}>{ RelationGraph.calculateRelation(id, targetId) }</th>) }\n      </tr>\n    );\n  }\n\n  idToPortrait(id: string) {\n    const { localization } = this.props;\n    return (\n      <img\n        className=\"portrait\"\n        src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${id}.png`}\n        alt={localization.character.name[id]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <table>\n          <tbody>\n            <tr>\n              <th />\n              { _.map(this.characterIds, (id) => <th key={`portrait_column_${id}`}>{this.idToPortrait(id)}</th>) }\n            </tr>\n            { _.map(this.characterIds, (id) => this.createRow(id)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationGraph;\n","import _ from 'lodash';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport React, { Component } from 'react';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../library/common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface HorseRow {\n  name: string;\n  relation: number;\n  image: string;\n}\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\ninterface IState {\n  horseId: string\n}\n\nclass RelationQuery extends Component<IProps, IState> {\n  static calculateRelation(id1: string | undefined, id2: string): number {\n    if (id1 === id2 || id1 === undefined) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  horses: string[];\n\n  constructor(props: IProps) {\n    super(props);\n    this.horses = Object.keys(characters);\n    this.state = {\n      horseId: '',\n    };\n  }\n\n  selectHorse = (event: any) => {\n    const { value } = event.target;\n    this.setState({ horseId: value });\n  };\n\n  buildRelationArray() {\n    const { horseId } = this.state;\n    const { localization } = this.props;\n    let rel: HorseRow[] = [];\n    this.horses.forEach((targetHorseId) => {\n      if (targetHorseId !== horseId) {\n        rel.push({\n          name: localization.character.name[targetHorseId],\n          relation: RelationQuery.calculateRelation(horseId, targetHorseId),\n          image: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\n        });\n      }\n    });\n    rel = _.sortBy(rel, [(horseRow) => -horseRow.relation]);\n\n    return rel.map((horseRow) => (\n      <tr>\n        <td>{horseRow.name}</td>\n        <td><img className=\"portrait\" src={horseRow.image} alt={horseRow.name} /></td>\n        <td>{horseRow.relation}</td>\n      </tr>\n    ));\n  }\n\n  render() {\n    const { localization } = this.props;\n    const relationArray = this.buildRelationArray();\n    return (\n      <div className=\"content\">\n        <div className=\"dropdown\">\n          <FormControl>\n            <InputLabel id=\"demo-simple-select-label\">ウマ</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              onChange={this.selectHorse}\n            >\n              { this.horses.map((targetHorseId) => (\n                <MenuItem key={`${targetHorseId}_option`} value={targetHorseId}>\n                  <img\n                    className=\"portrait\"\n                    src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`}\n                    alt={localization.character.name[targetHorseId]}\n                  />\n                  {localization.character.name[targetHorseId]}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <table>\n          {relationArray}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationQuery;\n","import _ from 'lodash';\nimport {\n  Row, Col, Select,\n} from 'antd';\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, LocalizationData,\n} from '../library/common';\n\nimport 'antd/dist/antd.css';\nimport './component.css';\n\nconst { Option } = Select;\n\ninterface IProps {\n  localization: LocalizationData,\n  courseCategories: CourseCategory,\n  setData: (key: string, value: any) => void,\n  state: {\n    racecourse?: string,\n    ground?: string,\n    distance?: number,\n    course?: CourseDataType,\n  },\n}\n\ninterface IState {\n}\n\nclass CourseData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  getRacecourseComponent() {\n    const { localization, setData, state } = this.props;\n    const { racecourse } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Racecourse}:`}</span>\n          <Select className=\"select\" value={racecourse} onChange={(value) => setData('racecourse', value)}>\n            { _.map(localization.course.racecourse, (value: string, key: string) => (\n              <Option value={key}>{value}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getGroundComponent() {\n    const {\n      localization, courseCategories, setData, state,\n    } = this.props;\n    const { racecourse, ground } = state;\n\n    if (racecourse === undefined) {\n      return null;\n    }\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Ground}:`}</span>\n          <Select className=\"select\" value={ground} onChange={(value) => setData('ground', value)}>\n            { _.map(courseCategories[racecourse], (value: string, key: string) => (\n              <Option value={key}>{localization.course.ground[key]}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getDistanceComponent() {\n    const {\n      localization, courseCategories, setData, state,\n    } = this.props;\n    const { racecourse, ground, distance } = state;\n\n    if (racecourse === undefined || ground === undefined) {\n      return null;\n    }\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Distance}:`}</span>\n          <Select className=\"select\" value={distance} onChange={(value) => setData('distance', value)}>\n            { _.map(courseCategories[racecourse][ground], (value: string, key: number) => (\n              <Option value={key}>{key}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  render() {\n    const racecourseComponent = this.getRacecourseComponent();\n    const groundComponent = this.getGroundComponent();\n    const distanceComponent = this.getDistanceComponent();\n\n    return (\n      <Row gutter={[8, 8]}>\n        {racecourseComponent}\n        {groundComponent}\n        {distanceComponent}\n      </Row>\n    );\n  }\n}\n\nexport default CourseData;\n","import _ from 'lodash';\nimport { Row, Col, Select } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: string },\n\n}\n\ninterface IState {\n}\n\nclass HorseProperRate extends Component<IProps, IState> {\n  static readonly properRateTypes = {\n    GroundType: ['GroundTypeTurf', 'GroundTypeDirt'],\n    DistanceType: ['DistanceTypeShort', 'DistanceTypeMile', 'DistanceTypeMiddle', 'DistanceTypeLong'],\n    RunningStyle: ['RunningStyleNige', 'RunningStyleSenko', 'RunningStyleSashi', 'RunningStyleOikomi'],\n  };\n\n  static readonly properRate = {\n    G: '1',\n    F: '2',\n    E: '3',\n    D: '4',\n    C: '5',\n    B: '6',\n    A: '7',\n    S: '8',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        { _.map(HorseProperRate.properRateTypes, (properTypes, properName) => (\n          <>\n            <Row gutter={[8, 8]}><Col span={24}>{localization.site[properName]}</Col></Row>\n            <Row gutter={[8, 8]}>\n              { _.map(properTypes, (properRateType) => {\n                const camelProperRateType = _.camelCase(properRateType);\n                return (\n                  <Col span={4}>\n                    <div className=\"flex\">\n                      <span className=\"select-label\">{`${localization.site[properRateType]}:`}</span>\n                      <Select className=\"select\" value={state[camelProperRateType]} onChange={(value) => setData(camelProperRateType, value)}>\n                        { _.map(HorseProperRate.properRate, (value, key) => (\n                          <Select.Option value={value}>{localization.site[key]}</Select.Option>\n                        ))}\n                      </Select>\n                    </div>\n                  </Col>\n                );\n              })}\n            </Row>\n          </>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default HorseProperRate;\n","import _ from 'lodash';\nimport { InputNumber, Row, Col } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: number },\n}\n\ninterface IState {\n}\n\nclass HorseStatData extends Component<IProps, IState> {\n  static readonly stats = {\n    speed: 'Speed',\n    stamina: 'Stamina',\n    pow: 'Power',\n    guts: 'Guts',\n    wiz: 'Wiz',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <Row gutter={[8, 8]}>\n        { _.map(HorseStatData.stats, (value, key) => (\n          <Col span={4}>\n            <div className=\"flex\">\n              <span className=\"select-label\">{`${localization.site[value]}:`}</span>\n              <InputNumber className=\"select\" value={state[key]} min={1} max={1200} onChange={(data) => setData(key, data)} />\n            </div>\n          </Col>\n        ))}\n      </Row>\n    );\n  }\n}\n\nexport default HorseStatData;\n","import { RunningStyle } from '../common';\nimport Course from './course';\n\nexport enum ResultFlag {\n  FullLastSpurt,\n}\n\nexport enum Season {\n  Spring = '1',\n  Summer = '2',\n  Fall = '3',\n  Winter = '4',\n}\n\nexport enum Weather {\n  Sunny = '1',\n  Cloudy = '2',\n  Rainy = '3',\n  Snowy = '4',\n}\n\nexport interface RaceResultData {\n  time: number,\n  hpLeft: number,\n  resultFlags: Set<ResultFlag>,\n  skillsActivated: {\n    [key: string]: {\n      count: number,\n    },\n  },\n  temptation: {\n    triggered: boolean,\n    time: number,\n  },\n}\n\nexport interface IRaceHorse {\n  get course(): Course;\n  get season(): Season;\n  get weather(): Weather;\n  get postNumber(): number;\n  get popularity(): number;\n  get sameRunningStyleCount(): number;\n  get popularityFirstRunningStyle(): RunningStyle;\n  get runningStyle(): RunningStyle;\n}\n\nclass Common {\n}\n\nexport default Common;\n","import React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\nimport HorseProperRate from './horse-proper-rate';\nimport HorseStatData from './horse-stat-data';\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: any,\n}\n\ninterface IState {\n}\n\nclass HorseData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        <HorseStatData localization={localization} setData={setData} state={state} />\n        <HorseProperRate localization={localization} setData={setData} state={state} />\n      </>\n    );\n  }\n}\n\nexport default HorseData;\n","import {\n  Row, Col, Select,\n} from 'antd';\nimport React, { Component } from 'react';\n\nimport {\n  GroundStatus, LocalizationData, RunningStyle,\n} from '../../library/common';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\n\nconst { Option } = Select;\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: {\n    strategy?: string,\n    groundStatus?: string,\n  },\n}\n\ninterface IState {\n}\n\nclass RaceData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  getStrategyComponent() {\n    const { localization, setData, state } = this.props;\n    const { strategy } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Strategy}:`}</span>\n          <Select className=\"select\" value={strategy} onChange={(value) => setData('strategy', value)}>\n            <Option value={RunningStyle.Nige}>{localization.site.RunningStyleNige}</Option>\n            <Option value={RunningStyle.Senko}>{localization.site.RunningStyleSenko}</Option>\n            <Option value={RunningStyle.Sashi}>{localization.site.RunningStyleSashi}</Option>\n            <Option value={RunningStyle.Oikomi}>{localization.site.RunningStyleOikomi}</Option>\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getGroundStatusComponent() {\n    const { localization, setData, state } = this.props;\n    const { groundStatus } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.GroundStatus}:`}</span>\n          <Select className=\"select\" value={groundStatus} onChange={(value) => setData('groundStatus', value)}>\n            <Option value={GroundStatus.Good}>{localization.site.GroundStatusGood}</Option>\n            <Option value={GroundStatus.SlightlyHeavy}>{localization.site.GroundStatusSlightlyHeavy}</Option>\n            <Option value={GroundStatus.Heavy}>{localization.site.GroundStatusHeavy}</Option>\n            <Option value={GroundStatus.Bad}>{localization.site.GroundStatusBad}</Option>\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  render() {\n    const strategyComponent = this.getStrategyComponent();\n    const groundStatusComponent = this.getGroundStatusComponent();\n\n    return (\n      <Row gutter={[8, 8]}>\n        {strategyComponent}\n        {groundStatusComponent}\n      </Row>\n    );\n  }\n}\n\nexport default RaceData;\n","import {\n  RunningStyle, CoursePhase, GroundType, GroundStatus,\n} from '../common';\n\nconst constant = {\n  baseDistance: 2000,\n  minSpeed: {\n    minSpeedRate: 0.85,\n    minSpeedGutsCoefSqrt: 200,\n    minSpeedGutsCoef: 0.001,\n  },\n  startDash: {\n    targetSpeedCoefficient: 0.85,\n    startAccelAdd: 24,\n  },\n  targetSpeed: {\n    baseTargetSpeedRandomMinusVal1: -0.0065,\n    baseTargetSpeedRandomMinusVal2: 5500,\n    baseTargetSpeedRandomPlusVal1: 5500,\n    baseTargetSpeedRandomLogCoefficient: 0.1,\n    baseTargetSpeedRandomCoefficient: 0.01,\n    targetSpeedCoefficient: {\n      [RunningStyle.Nige]: {\n        [CoursePhase.Start]: 1,\n        [CoursePhase.Middle]: 0.98,\n        [CoursePhase.End]: 0.98,\n        [CoursePhase.LastSpurt]: 0.98,\n      },\n      [RunningStyle.Senko]: {\n        [CoursePhase.Start]: 0.978,\n        [CoursePhase.Middle]: 0.991,\n        [CoursePhase.End]: 0.975,\n        [CoursePhase.LastSpurt]: 0.975,\n      },\n      [RunningStyle.Sashi]: {\n        [CoursePhase.Start]: 0.938,\n        [CoursePhase.Middle]: 0.998,\n        [CoursePhase.End]: 0.994,\n        [CoursePhase.LastSpurt]: 0.994,\n      },\n      [RunningStyle.Oikomi]: {\n        [CoursePhase.Start]: 0.931,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 1,\n        [CoursePhase.LastSpurt]: 1,\n      },\n    },\n    phaseEndBaseTargetSpeedCoef: 500,\n    addSpeedParamCoef: 0.002,\n    baseTargetSpeedCoef: 1.05,\n    lastSpurtBaseTargetSpeedAddCoef: 0.01,\n    lastSpurtTargetSpeedCoefSqrt: 500,\n    upSlopeAddSpeedVal1: 200,\n    downSlopeAddSpeedVal1: 0.3,\n    downSlopeAddSpeedVal2: 10,\n    firstBlockSlowStyles: [RunningStyle.Sashi, RunningStyle.Oikomi],\n    lastSpurtTargetSpeedStep: 0.1,\n  },\n  accel: {\n    accelPhaseCoef: {\n      [RunningStyle.Nige]: {\n        [CoursePhase.Start]: 1,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.996,\n        [CoursePhase.LastSpurt]: 0.996,\n      },\n      [RunningStyle.Senko]: {\n        [CoursePhase.Start]: 0.985,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.996,\n        [CoursePhase.LastSpurt]: 0.996,\n      },\n      [RunningStyle.Sashi]: {\n        [CoursePhase.Start]: 0.975,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 1,\n        [CoursePhase.LastSpurt]: 1,\n      },\n      [RunningStyle.Oikomi]: {\n        [CoursePhase.Start]: 0.945,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.997,\n        [CoursePhase.LastSpurt]: 0.997,\n      },\n    },\n    accelPowCoef: 0.0006,\n    accelPowCoefUpSlope: 0.0004,\n    accelPowCoefSqrt: 500,\n    startAccelAdd: 24,\n    accelDecreaseCoef: {\n      [CoursePhase.Start]: -1.2,\n      [CoursePhase.Middle]: -0.8,\n      [CoursePhase.End]: 1.2,\n      [CoursePhase.LastSpurt]: 1.2,\n    },\n    accelDecreaseZeroHpCoef: -1.2,\n  },\n  hp: {\n    hpInitialVal1: 0.8,\n    hpMaxCoef: {\n      [RunningStyle.Nige]: 0.95,\n      [RunningStyle.Senko]: 0.89,\n      [RunningStyle.Sashi]: 1.0,\n      [RunningStyle.Oikomi]: 0.995,\n    },\n    hpDecBase: 20,\n    hpDecRateBaseNormal: 1,\n    hpDecRateBaseTemptation: 1.6,\n    hpDecRateBasePositionKeepPaseDown: 0.6,\n    hpDecRateMultiplyDownSlopeAccelMode: 0.4,\n    speedGapParam1: 12,\n    speedGapParam1Pow: 144,\n    groundModifierMultiHpSub: {\n      [GroundType.Turf]: {\n        [GroundStatus.Good]: 1,\n        [GroundStatus.SlightlyHeavy]: 1,\n        [GroundStatus.Heavy]: 1.02,\n        [GroundStatus.Bad]: 1.02,\n      },\n      [GroundType.Dirt]: {\n        [GroundStatus.Good]: 1,\n        [GroundStatus.SlightlyHeavy]: 1,\n        [GroundStatus.Heavy]: 1.01,\n        [GroundStatus.Bad]: 1.02,\n      },\n    },\n    hpGutsBase: 1,\n    hpGutsCoef: 200,\n    hpGutsCoefSqrt: 600,\n  },\n  course: {\n    distanceTargetSpeedCoefficient: 0.001,\n    blockPortion: 1 / 24,\n    distanceShort: { min: 0, max: 1400 },\n    distanceMile: { min: 1401, max: 1800 },\n    distanceMiddle: { min: 1801, max: 2400 },\n    distanceLong: { min: 2401, max: Number.MAX_VALUE },\n    startSpeed: 3,\n    phaseStart: 1 / 6,\n    phaseMiddle: 4 / 6,\n    phaseEnd: 5 / 6,\n    positionSense: 10 / 24,\n    frameTime: 1 / 15,\n    gateTimeRange: { min: 0, max: 0.1 },\n    finishTimeCoef: 1.18,\n  },\n  lastSpurt: {\n    determineRateBase: 0.15,\n    determineRateWizMultiplier: 0.0005,\n    targetDistanceFromGoal: 60,\n  },\n  slope: {\n    downSlopeAccelModeChanceBase: 0.0004,\n    downSlopeEndChance: 0.2,\n  },\n  skill: {\n    activatePerMin: 0.2,\n    lotActivatePerVal1: 1,\n    lotActivatePerVal2: 90,\n    abilityTimeDivideDistance: 1000,\n    coolDownTimeDivideDistance: 1000,\n  },\n};\n\nexport default constant;\n","import _ from 'lodash';\nimport nr from 'newton-raphson-method';\nimport util from 'util';\n\nimport constant from './constant';\nimport Course from './course';\nimport Horse, { HorseStat } from './horse';\nimport Skill from './skill';\nimport {\n  RaceResultData, ResultFlag, Season, Weather, IRaceHorse,\n} from './common';\nimport {\n  RunningStyle, CoursePhase, SkillEffectData, SkillData, SkillAbilityData, SkillAbilityTargetType, SkillAbilityType,\n} from '../common';\n\nimport distanceProperRateJson from '../../db/proper_rate/distance.json';\nimport groundProperRateJson from '../../db/proper_rate/ground.json';\nimport runningStyleProperRateJson from '../../db/proper_rate/running_style.json';\n\nconst distanceProperRate = distanceProperRateJson as { [key: string]: { speed: number, power: number } };\nconst groundProperRate = groundProperRateJson as { [key: string]: number };\nconst runningStyleProperRate = runningStyleProperRateJson as { [key: string]: number };\n\nenum BreakPoint {\n  Goal = '0000',\n\n  FinishFirstBlock = '1000',\n  FinishPhaseStart = '1010',\n  FinishPhaseMiddle = '1020',\n  FinishPhaseEnd = '1030',\n  FinishPhaseLastSpurt = '1040',\n\n  LastSpurt = '2000',\n  PositionSense = '2010',\n  TriggerSkill = '2020',\n  DownSlopeAccelMode = '2030',\n  ZeroHp = '2040',\n\n  FinishBlock = '3000',\n  Slope = '3010',\n\n  None = '9999',\n}\n\ninterface BreakPointData {\n  distance?: number,\n  time?: number,\n  parameters?: any\n}\n\ninterface BreakPointSet {\n  [BreakPoint.FinishFirstBlock]?: BreakPointData,\n  [BreakPoint.FinishPhaseStart]?: BreakPointData,\n  [BreakPoint.FinishPhaseMiddle]?: BreakPointData,\n  [BreakPoint.FinishPhaseEnd]?: BreakPointData,\n  [BreakPoint.FinishPhaseLastSpurt]?: BreakPointData,\n\n  [BreakPoint.LastSpurt]?: BreakPointData,\n  [BreakPoint.PositionSense]?: BreakPointData,\n  [BreakPoint.TriggerSkill]?: BreakPointData[],\n  [BreakPoint.DownSlopeAccelMode]?: BreakPointData,\n  [BreakPoint.ZeroHp]?: BreakPointData,\n\n  [BreakPoint.FinishBlock]?: BreakPointData,\n  [BreakPoint.Slope]?: BreakPointData[],\n\n  [BreakPoint.Goal]?: BreakPointData,\n\n  [BreakPoint.None]?: BreakPointData,\n}\n\nenum Mode {\n  StartDash,\n  FirstBlock,\n  LastSpurt,\n  UpSlope,\n  DownSlopeAccel,\n  Temptation,\n  PositionKeepPaceDown,\n  ZeroHp,\n}\n\ninterface LastSpurtCandidate {\n  time: number,\n  targetSpeed: number,\n  lastSpurtDistance: number,\n}\n\nclass RaceHorse implements IRaceHorse {\n  private _course: Course;\n\n  private _horse: Horse;\n\n  private _runningStyle: RunningStyle;\n\n  private _season: Season;\n\n  private _weather: Weather;\n\n  private _postNumber: number;\n\n  private _popularity: number;\n\n  private _sameRunningStyleCount: number;\n\n  private _popularityFirstRunningStyle: RunningStyle;\n\n  private _statAddition: HorseStat;\n\n  private _stat: HorseStat;\n\n  private _generalSkills: SkillData[] = [];\n\n  private _activateCountSkills: SkillData[] = [];\n\n  private _skillCooldown: { [key: string]: number } = {};\n\n  private _speedWizRandomRange: [number, number] = [0, 0];\n\n  private _speedWizRandom: number = 0;\n\n  private _phase: CoursePhase = CoursePhase.Start;\n\n  private _mode: Set<Mode> = new Set<Mode>();\n\n  private _speed: number = 0;\n\n  private _lastSpurtTargetSpeed: number = 0;\n\n  private _hp: number = 0;\n\n  private _distance: number = 0;\n\n  private _time: number = 0;\n\n  private _breakPoints: BreakPointSet = {};\n\n  private _startDashTargetSpeed: number | undefined = undefined;\n\n  private _slopePer: number = 0;\n\n  raceResult: RaceResultData;\n\n  constructor({\n    horse, course, runningStyle, season, weather, postNumber, popularity, sameRunningStyle, popularityFirstRunningStyle,\n  }: {\n    horse: Horse,\n    course: Course,\n    runningStyle: RunningStyle,\n    season: Season,\n    weather: Weather,\n    postNumber: number;\n    popularity: number;\n    sameRunningStyle: number;\n    popularityFirstRunningStyle: RunningStyle,\n  }) {\n    this._horse = horse;\n    this._course = course;\n    this._runningStyle = runningStyle;\n    this._season = season;\n    this._weather = weather;\n    this._postNumber = postNumber;\n    this._popularity = popularity;\n    this._sameRunningStyleCount = sameRunningStyle;\n    this._popularityFirstRunningStyle = popularityFirstRunningStyle;\n    this._statAddition = {\n      speed: 0,\n      stamina: 0,\n      pow: 0,\n      guts: 0,\n      wiz: 0,\n    };\n    this._stat = _.clone(this._horse.stat);\n    this.raceResult = {\n      time: 0,\n      hpLeft: 0,\n      resultFlags: new Set<ResultFlag>(),\n      skillsActivated: {},\n      temptation: {\n        triggered: false,\n        time: 0,\n      },\n    };\n  }\n\n  get course(): Course {\n    return this._course;\n  }\n\n  get season(): Season {\n    return this._season;\n  }\n\n  get weather(): Weather {\n    return this._weather;\n  }\n\n  get postNumber(): number {\n    return this._postNumber;\n  }\n\n  get popularity(): number {\n    return this._popularity;\n  }\n\n  get sameRunningStyleCount(): number {\n    return this._sameRunningStyleCount;\n  }\n\n  get popularityFirstRunningStyle(): RunningStyle {\n    return this._popularityFirstRunningStyle;\n  }\n\n  get runningStyle(): RunningStyle {\n    return this._runningStyle;\n  }\n\n  get maxHp(): number {\n    return this._course.distance + this.stat.stamina * constant.hp.hpMaxCoef[this._runningStyle] * constant.hp.hpInitialVal1;\n  }\n\n  private get hp(): number {\n    return this._hp;\n  }\n\n  private get time(): number {\n    return this._time;\n  }\n\n  private get lastSpurtDetermineRate(): number {\n    return constant.lastSpurt.determineRateBase + constant.lastSpurt.determineRateWizMultiplier * this.stat.wiz;\n  }\n\n  private get originalStat(): HorseStat {\n    return this._horse.stat;\n  }\n\n  private get stat(): HorseStat {\n    return this._stat;\n  }\n\n  private get skillActivateRate(): number {\n    return Math.max(constant.skill.activatePerMin, constant.skill.lotActivatePerVal1 - constant.skill.lotActivatePerVal2 / this.originalStat.wiz);\n  }\n\n  private get minSpeed(): number {\n    return this._course.baseTargetSpeed * constant.minSpeed.minSpeedRate\n      + Math.sqrt(this.stat.guts * constant.minSpeed.minSpeedGutsCoefSqrt) * constant.minSpeed.minSpeedGutsCoef;\n  }\n\n  private get startDashTargetSpeed(): number {\n    if (this._startDashTargetSpeed === undefined) {\n      this._startDashTargetSpeed = Math.max(this._course.baseTargetSpeed * constant.startDash.targetSpeedCoefficient, this.minSpeed);\n    }\n    return this._startDashTargetSpeed;\n  }\n\n  private get baseTargetSpeed(): number {\n    return this._course.baseTargetSpeed * constant.targetSpeed.targetSpeedCoefficient[this._runningStyle][this._phase];\n  }\n\n  private get baseTargetSpeedRandom(): number {\n    return this.baseTargetSpeed * this._speedWizRandom;\n  }\n\n  private get phaseEndTargetSpeedAddition(): number {\n    return Math.sqrt(constant.targetSpeed.phaseEndBaseTargetSpeedCoef * this.stat.speed)\n      * constant.targetSpeed.addSpeedParamCoef * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].speed;\n  }\n\n  private get maxLastSpurtTargetSpeed(): number {\n    return Math.max(\n      (this.baseTargetSpeed + this.phaseEndTargetSpeedAddition + constant.targetSpeed.lastSpurtBaseTargetSpeedAddCoef * this._course.baseTargetSpeed)\n          * constant.targetSpeed.baseTargetSpeedCoef\n        + this.phaseEndTargetSpeedAddition,\n      this.minSpeed,\n    );\n  }\n\n  private get lastSpurtTargetSpeed(): number {\n    return this._lastSpurtTargetSpeed;\n  }\n\n  private get realTargetSpeed(): number {\n    if (this._mode.has(Mode.StartDash) || this._mode.has(Mode.FirstBlock)) {\n      return this.startDashTargetSpeed;\n    }\n    if (this._mode.has(Mode.LastSpurt)) {\n      return this.lastSpurtTargetSpeed;\n    }\n\n    const slopePer = this._slopePer;\n    let slopeAdd = 0;\n    if (slopePer >= 1) {\n      slopeAdd = -slopePer * constant.targetSpeed.upSlopeAddSpeedVal1 / this.stat.pow;\n    } else if (slopePer <= -1 && this._mode.has(Mode.DownSlopeAccel)) {\n      slopeAdd = constant.targetSpeed.downSlopeAddSpeedVal1 + Math.abs(slopePer) / constant.targetSpeed.downSlopeAddSpeedVal2;\n    }\n    return this.baseTargetSpeed + this.baseTargetSpeedRandom + slopeAdd\n      + (this._phase >= 2 ? this.phaseEndTargetSpeedAddition : 0);\n  }\n\n  get targetSpeed(): number {\n    if (this._mode.has(Mode.ZeroHp)) {\n      return this.minSpeed;\n    }\n    return Math.max(this.minSpeed, this.realTargetSpeed);\n  }\n\n  refreshSpeedRandomValue(): void {\n    this._speedWizRandom = _.random(...this._speedWizRandomRange, true);\n  }\n\n  private get baseAccel(): number {\n    return constant.accel.accelPhaseCoef[this._runningStyle][this._phase]\n      * Math.sqrt(this.stat.pow * constant.accel.accelPowCoefSqrt)\n      * groundProperRate[this._horse.properRate.groundType[this._course.groundType]]\n      * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].power;\n  }\n\n  get accel(): number {\n    if (this._mode.has(Mode.ZeroHp)) {\n      return constant.accel.accelDecreaseZeroHpCoef;\n    }\n\n    if (this._speed <= this.targetSpeed) {\n      return (this._mode.has(Mode.StartDash) ? constant.accel.startAccelAdd : 0)\n        + this.baseAccel * (this._mode.has(Mode.UpSlope) ? constant.accel.accelPowCoefUpSlope : constant.accel.accelPowCoef);\n    }\n    return constant.accel.accelDecreaseCoef[this._phase];\n  }\n\n  private get phaseEndHpDecreaseRate() {\n    return constant.hp.hpGutsBase + constant.hp.hpGutsCoef / Math.sqrt(constant.hp.hpGutsCoefSqrt * this.stat.guts);\n  }\n\n  private get modeHpDecreaseRate() {\n    if (this._mode.has(Mode.Temptation)) {\n      return constant.hp.hpDecRateBaseTemptation;\n    }\n    if (this._mode.has(Mode.PositionKeepPaceDown)) {\n      return constant.hp.hpDecRateBasePositionKeepPaseDown;\n    }\n    return constant.hp.hpDecRateBaseNormal;\n  }\n\n  get hpDecreaseRate(): number {\n    return constant.hp.hpDecBase * constant.hp.groundModifierMultiHpSub[this._course.groundType][this._course.groundStatus]\n      * (this._phase >= CoursePhase.End ? this.phaseEndHpDecreaseRate : 1)\n      * this.modeHpDecreaseRate\n      * (this._mode.has(Mode.DownSlopeAccel) ? constant.hp.hpDecRateMultiplyDownSlopeAccelMode : 1);\n  }\n\n  get minBreakpoint(): { breakPoint: BreakPoint, distance: number, parameters: any } {\n    let minKey: BreakPoint = BreakPoint.None;\n    let minDistance: number = Number.MAX_VALUE;\n    let minParameters: any;\n    for (const [key, value] of Object.entries(this._breakPoints)) {\n      let targetValue: BreakPointData;\n      if (Array.isArray(value)) {\n        targetValue = value[value.length - 1];\n      } else {\n        targetValue = value;\n      }\n\n      if (targetValue.distance !== undefined) {\n        if (targetValue.distance < minDistance) {\n          minDistance = targetValue.distance;\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        } else if (targetValue.distance === minDistance && key < minKey) {\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        }\n      } else if (targetValue.time !== undefined) {\n        const distance = this._distance + (targetValue.time - this._time) * this._speed;\n        if (distance < minDistance) {\n          minDistance = distance;\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        } else if (targetValue.distance === minDistance && key < minKey) {\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        }\n      }\n    }\n    return { breakPoint: minKey, distance: minDistance, parameters: minParameters };\n  }\n\n  private static getAccelHpDecrease({\n    initialSpeed, accel, time, hpDecreaseRate, baseTargetSpeed,\n  }: {\n    initialSpeed: number, accel: number, time: number, hpDecreaseRate: number, baseTargetSpeed: number,\n  }): number {\n    const speedCoefficient = (initialSpeed - baseTargetSpeed + constant.hp.speedGapParam1);\n    return hpDecreaseRate\n      * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\n      / constant.hp.speedGapParam1Pow;\n  }\n\n  private static getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }: { speed: number, hpDecreaseRate: number, baseTargetSpeed: number }) {\n    return hpDecreaseRate * (speed - baseTargetSpeed + constant.hp.speedGapParam1) ** 2 / constant.hp.speedGapParam1Pow;\n  }\n\n  private static getRunHpDecrease({\n    speed, hpDecreaseRate, baseTargetSpeed, time,\n  }: {\n    speed: number, hpDecreaseRate: number, baseTargetSpeed: number, time: number,\n  }): number {\n    return RaceHorse.getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }) * time;\n  }\n\n  private static accelToTargetSpeed({\n    accel, currentSpeed, targetSpeed, maxDistance, hpDecreaseRate, baseTargetSpeed,\n  }: {\n    accel: number,\n    currentSpeed: number,\n    targetSpeed: number,\n    maxDistance: number,\n    hpDecreaseRate: number,\n    baseTargetSpeed: number\n  }) {\n    const targetSpeedByDistanceSquare = currentSpeed ** 2 + 2 * accel * maxDistance;\n    const finalSpeed = accel > 0\n      ? Math.min(targetSpeed, Math.sqrt(targetSpeedByDistanceSquare))\n      : Math.max(targetSpeed, Math.sqrt(Math.max(targetSpeedByDistanceSquare, 0)));\n    const time = (finalSpeed - currentSpeed) / accel;\n    const distance = (currentSpeed + currentSpeed + accel * time) * time / 2;\n    const hpCost = RaceHorse.getAccelHpDecrease({\n      initialSpeed: currentSpeed,\n      accel,\n      time,\n      hpDecreaseRate,\n      baseTargetSpeed,\n    });\n    return {\n      time, distance, hpCost, finalSpeed,\n    };\n  }\n\n  private doGateOpen(): void {\n    this._time += Math.floor(_.random(constant.course.gateTimeRange.min, constant.course.gateTimeRange.max, true) / constant.course.frameTime)\n      * constant.course.frameTime;\n    this._mode.add(Mode.StartDash);\n    this._breakPoints[BreakPoint.FinishBlock] = { distance: this._course.blockDistance };\n    this._breakPoints[BreakPoint.Goal] = { distance: this._course.distance };\n  }\n\n  private finishStartDash(): void {\n    const { accel, targetSpeed } = this;\n    const {\n      time, distance, hpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: this._course.distance,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n    this._time += time;\n    this._distance += distance;\n    this._hp -= hpCost;\n    this._speed = finalSpeed;\n\n    this._mode.delete(Mode.StartDash);\n    if (this._runningStyle === RunningStyle.Sashi || this._runningStyle === RunningStyle.Oikomi) {\n      this._breakPoints[BreakPoint.FinishFirstBlock] = { distance: this._course.blockDistance };\n      this._mode.add(Mode.FirstBlock);\n    } else {\n      this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\n    }\n  }\n\n  private calculateAccelAndRun(distance: number) {\n    const { accel, targetSpeed } = this;\n    const {\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: distance - this._distance,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    const runDistance = (distance - this._distance - accelDistance);\n    const runTime = runDistance / finalSpeed;\n    const runHpCost = RaceHorse.getRunHpDecrease({\n      speed: finalSpeed,\n      time: runTime,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    return {\n      time: accelTime + runTime,\n      distance: accelDistance + runDistance,\n      hpCost: accelHpCost + runHpCost,\n      finalSpeed,\n    };\n  }\n\n  private doAccelAndRun(distance: number) {\n    const { accel, targetSpeed, hpDecreaseRate } = this;\n    const {\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: distance - this._distance,\n      hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    if (accelHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\n      /**\n       * Accel HP cost formula:\n       * hpDecrease = hpDecreaseRate * (accel^2 * time^3 / 3 + accel * time^2 * speedCoefficient + speedCoefficient^2 * time)/ 144\n       * speedCoefficient = initialSpeed - baseTargetSpeed + 12\n       * Given accel and initialSpeed, hpDecrease = this.hp is a cubic equation of time.\n       * It's hard to get a formula solution, but we can get a approximate value by applying Newton's Method.\n       */\n      const speedCoefficient = this._speed - this._course.baseTargetSpeed + constant.hp.speedGapParam1;\n      const realAccelTime = nr(\n        (time: number) => (\n          hpDecreaseRate * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\n        ),\n        (time: number) => (\n          hpDecreaseRate * (accel ** 2 * time ** 2 + accel * time * 2 * speedCoefficient + speedCoefficient ** 2)\n        ),\n        10,\n      );\n      const realAccelDistance = (this._speed + this._speed + accel * accelTime) * accelTime / 2;\n      this._time += realAccelTime;\n      this._distance += realAccelDistance;\n      this._hp = 0;\n      this._mode.add(Mode.ZeroHp);\n      delete this._breakPoints[BreakPoint.ZeroHp];\n      return false;\n    }\n\n    this._hp -= accelHpCost;\n    this._time += accelTime;\n    this._distance += accelDistance;\n    this._speed = finalSpeed;\n\n    const speedHpDecreaseRate = RaceHorse.getSpeedHpDecrease({\n      speed: this._speed,\n      hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n    const runDistance = distance - this._distance;\n    const runTime = runDistance / this._speed;\n    const runHpCost = speedHpDecreaseRate * runTime;\n\n    if (runHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\n      const realRunTime = this._hp / speedHpDecreaseRate;\n      const realRunDistance = realRunTime * this._speed;\n      this._time += realRunTime;\n      this._distance += realRunDistance;\n      this._hp = 0;\n      this._mode.add(Mode.ZeroHp);\n      delete this._breakPoints[BreakPoint.ZeroHp];\n      return false;\n    }\n\n    this._hp -= runHpCost;\n    this._time += runTime;\n    this._distance += runDistance;\n    if (!this._mode.has(Mode.ZeroHp)) {\n      this._breakPoints[BreakPoint.ZeroHp] = { distance: this._distance + this.hp / speedHpDecreaseRate * this._speed };\n    }\n    return true;\n  }\n\n  private finishFirstBlock = () => {\n    this._mode.delete(Mode.FirstBlock);\n    this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\n  };\n\n  private finishBlock = () => {\n    if (!this._mode.has(Mode.LastSpurt) && this._course.distance > this._distance) {\n      this.refreshSpeedRandomValue();\n      this._breakPoints[BreakPoint.FinishBlock] = { distance: this._distance + this._course.blockDistance };\n    }\n  };\n\n  private finishPhaseStart = () => {\n    this._phase = CoursePhase.Middle;\n    this._breakPoints[BreakPoint.FinishPhaseMiddle] = { distance: this._course.phaseMiddleDistance };\n  };\n\n  private static randomByCandidates(lastSpurtSpeedCandidates: LastSpurtCandidate[], determineRate: number): LastSpurtCandidate {\n    const randomNumber = Math.random();\n    const targetItem = Math.min(\n      lastSpurtSpeedCandidates.length - 1,\n      Math.floor(Math.log(randomNumber) / Math.log(1 - determineRate)),\n    );\n    return lastSpurtSpeedCandidates[targetItem];\n  }\n\n  private calculateLastSpurt = (): { lastSpurtDistance: number, lastSpurtTargetSpeed: number } => {\n    this._mode.add(Mode.LastSpurt);\n    this._lastSpurtTargetSpeed = this.maxLastSpurtTargetSpeed;\n    const { hpCost, finalSpeed } = this.calculateAccelAndRun(this._course.distance - constant.lastSpurt.targetDistanceFromGoal);\n    this._mode.delete(Mode.LastSpurt);\n    if (hpCost <= this._hp && finalSpeed === this._lastSpurtTargetSpeed) {\n      this.raceResult.resultFlags.add(ResultFlag.FullLastSpurt);\n      return {\n        lastSpurtDistance: this._distance,\n        lastSpurtTargetSpeed: finalSpeed,\n      };\n    }\n\n    let lastSpurtSpeedCandidates: LastSpurtCandidate[] = [];\n    const phaseEndBaseTargetSpeed = this.baseTargetSpeed + this.phaseEndTargetSpeedAddition;\n    const maxDistance = this._course.distance - this._distance - constant.lastSpurt.targetDistanceFromGoal;\n    const { accel, hpDecreaseRate } = this;\n    const { baseTargetSpeed } = this._course;\n    for (; this.lastSpurtTargetSpeed >= phaseEndBaseTargetSpeed; this._lastSpurtTargetSpeed -= constant.targetSpeed.lastSpurtTargetSpeedStep) {\n      const {\n        time: phaseEndAccelTime,\n        distance: phaseEndAccelDistance,\n        hpCost: phaseEndAccelHpCost,\n        finalSpeed: phaseEndFinalSpeed,\n      } = RaceHorse.accelToTargetSpeed({\n        accel,\n        currentSpeed: this._speed,\n        targetSpeed: phaseEndBaseTargetSpeed,\n        maxDistance,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const {\n        time: lastSpurtAccelTime,\n        distance: lastSpurtAccelDistance,\n        hpCost: lastSpurtAccelHpCost,\n      } = RaceHorse.accelToTargetSpeed({\n        accel,\n        currentSpeed: phaseEndFinalSpeed,\n        targetSpeed: this.lastSpurtTargetSpeed,\n        maxDistance: maxDistance - phaseEndAccelDistance,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const runDistance = maxDistance - phaseEndAccelDistance - lastSpurtAccelDistance;\n      const phaseEndRunTime = runDistance / phaseEndBaseTargetSpeed;\n      const phaseEndRunHpCost = RaceHorse.getRunHpDecrease({\n        speed: phaseEndBaseTargetSpeed,\n        time: phaseEndRunTime,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const lastSpurtRunTime = runDistance / this.lastSpurtTargetSpeed;\n      const lastSpurtRunHpCost = RaceHorse.getRunHpDecrease({\n        speed: this.lastSpurtTargetSpeed,\n        time: lastSpurtRunTime,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n\n      if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + lastSpurtRunHpCost) {\n        lastSpurtSpeedCandidates.push({\n          lastSpurtDistance: this._distance,\n          targetSpeed: this.lastSpurtTargetSpeed,\n          time: phaseEndAccelTime + lastSpurtAccelTime + lastSpurtRunTime,\n        });\n      } else if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost) {\n        const hpLeft = this.hp - (phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost);\n        const hpDiff = lastSpurtRunHpCost - phaseEndRunHpCost;\n        lastSpurtSpeedCandidates.push({\n          lastSpurtDistance: this._distance + phaseEndAccelDistance + runDistance * (1 - hpLeft / hpDiff),\n          targetSpeed: this.lastSpurtTargetSpeed,\n          time: phaseEndAccelTime + lastSpurtAccelTime + (hpLeft / hpDiff) * lastSpurtRunTime + (1 - hpLeft / hpDiff) * phaseEndRunTime,\n        });\n      }\n    }\n    lastSpurtSpeedCandidates.push({\n      lastSpurtDistance: Number.MAX_VALUE,\n      targetSpeed: phaseEndBaseTargetSpeed,\n      time: Number.MAX_VALUE,\n    });\n    lastSpurtSpeedCandidates = _.sortBy(lastSpurtSpeedCandidates, ['time']);\n    const candidate = RaceHorse.randomByCandidates(lastSpurtSpeedCandidates, this.lastSpurtDetermineRate);\n    return {\n      lastSpurtDistance: candidate.lastSpurtDistance,\n      lastSpurtTargetSpeed: candidate.targetSpeed,\n    };\n  };\n\n  private finishPhaseMiddle = () => {\n    this._phase = CoursePhase.End;\n    const { lastSpurtDistance, lastSpurtTargetSpeed } = this.calculateLastSpurt();\n    this._breakPoints[BreakPoint.FinishPhaseEnd] = { distance: this._course.phaseEndDistance };\n    this._breakPoints[BreakPoint.LastSpurt] = { distance: lastSpurtDistance };\n    this._lastSpurtTargetSpeed = lastSpurtTargetSpeed;\n  };\n\n  private finishPhaseEnd = () => {\n    this._phase = CoursePhase.LastSpurt;\n    this._breakPoints[BreakPoint.FinishPhaseLastSpurt] = { distance: this._course.distance };\n  };\n\n  private doLastSpurt = () => {\n    this._mode.add(Mode.LastSpurt);\n    delete this._breakPoints[BreakPoint.FinishBlock];\n  };\n\n  private finishLastSpurt = () => {};\n\n  private triggerPositionSense = () => {};\n\n  private zeroHp = () => {\n    if (this.hp <= 0) {\n      this._mode.add(Mode.ZeroHp);\n    }\n  };\n\n  private changeSlope = ({ slopePer }: { slopePer: number }) => {\n    if (this._slopePer > -1 && slopePer <= -1) {\n      this.checkDownSlopeAccelMode();\n    } else if (this._slopePer <= -1 && slopePer > -1) {\n      this._mode.delete(Mode.DownSlopeAccel);\n      delete this._breakPoints[BreakPoint.DownSlopeAccelMode];\n    }\n    this._slopePer = slopePer;\n  };\n\n  private checkDownSlopeAccelMode = () => {\n    if (this._mode.has(Mode.DownSlopeAccel)) {\n      if (Math.random() <= constant.slope.downSlopeEndChance) {\n        this._mode.delete(Mode.DownSlopeAccel);\n      } else {\n        this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\n      }\n    } else if (Math.random() <= this.stat.wiz * constant.slope.downSlopeAccelModeChanceBase) {\n      this._mode.add(Mode.DownSlopeAccel);\n      this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\n    }\n  };\n\n  private applyEffect(effect: SkillEffectData) {\n    const targets: RaceHorse[] = [];\n    switch (effect.target_type) {\n      case SkillAbilityTargetType.Self:\n        targets.push(this);\n        break;\n      default:\n        break;\n    }\n\n    _.map(targets, (target) => {\n      switch (effect.ability_type) {\n        case SkillAbilityType.AddSpeed:\n          break;\n        case SkillAbilityType.AddStamina:\n          break;\n        case SkillAbilityType.AddPow:\n          break;\n        case SkillAbilityType.AddGuts:\n          break;\n        case SkillAbilityType.AddWiz:\n          break;\n        case SkillAbilityType.AddSight:\n          break;\n        case SkillAbilityType.AddHp:\n          break;\n        case SkillAbilityType.ExtendTemptation:\n          break;\n        case SkillAbilityType.AddTargetSpeed:\n          break;\n        case SkillAbilityType.AddLaneAccel:\n          break;\n        case SkillAbilityType.AddAccel:\n          break;\n      }\n    });\n  }\n\n  private activateAbility({ skillId, ability }: { skillId: string, ability: SkillAbilityData }) {\n    if (!(skillId in this.raceResult.skillsActivated)) {\n      this.raceResult.skillsActivated[skillId] = { count: 1 };\n    } else {\n      this.raceResult.skillsActivated[skillId].count += 1;\n    }\n\n    this._skillCooldown[skillId] = this._time + ability.cooldown_time;\n\n    for (const effect of ability.effects) {\n      this.applyEffect(effect);\n    }\n  }\n\n  private triggerSkill = () => {};\n\n  private reachGoal = () => {\n    this._breakPoints = {};\n  };\n\n  private readonly breakPointMap: { [key in BreakPoint]: (parameters: any) => void } = {\n    [BreakPoint.None]: () => {},\n    [BreakPoint.FinishFirstBlock]: this.finishFirstBlock,\n    [BreakPoint.FinishBlock]: this.finishBlock,\n    [BreakPoint.FinishPhaseStart]: this.finishPhaseStart,\n    [BreakPoint.FinishPhaseMiddle]: this.finishPhaseMiddle,\n    [BreakPoint.FinishPhaseEnd]: this.finishPhaseEnd,\n    [BreakPoint.LastSpurt]: this.doLastSpurt,\n    [BreakPoint.FinishPhaseLastSpurt]: this.finishLastSpurt,\n    [BreakPoint.PositionSense]: this.triggerPositionSense,\n    [BreakPoint.ZeroHp]: this.zeroHp,\n    [BreakPoint.Slope]: this.changeSlope,\n    [BreakPoint.DownSlopeAccelMode]: this.checkDownSlopeAccelMode,\n    [BreakPoint.TriggerSkill]: this.triggerSkill,\n    [BreakPoint.Goal]: this.reachGoal,\n  };\n\n  buildSlopeBreakPoints() {\n    const slopePers = this._course.allSlopePers;\n    for (let i = slopePers.length - 1; i > 0; i -= 1) {\n      this.addBreakPoint(BreakPoint.Slope, {\n        distance: slopePers[i].distance,\n        parameters: {\n          slopePer: slopePers[i].slope_per,\n        },\n      });\n    }\n  }\n\n  addBreakPoint(type: BreakPoint, data: BreakPointData) {\n    switch (type) {\n      case BreakPoint.TriggerSkill:\n      case BreakPoint.Slope:\n        if (!(type in this._breakPoints)) {\n          this._breakPoints[type] = [data];\n        } else {\n          this._breakPoints[type]?.push(data);\n        }\n        break;\n      default:\n        this._breakPoints[type] = data;\n        break;\n    }\n  }\n\n  removeBreakPoint(type: BreakPoint) {\n    switch (type) {\n      case BreakPoint.TriggerSkill:\n      case BreakPoint.Slope:\n        this._breakPoints[type]?.pop();\n        if (this._breakPoints[type]?.length === 0) {\n          delete this._breakPoints[type];\n        }\n        break;\n      default:\n        delete this._breakPoints[type];\n        break;\n    }\n  }\n\n  getSkillTriggerStat(skill: SkillData): { distances: number[], specific: boolean } {\n    const course = this._course;\n    return { distances: [], specific: false };\n  }\n\n  populateSkills() {\n    const { skillActivateRate } = this;\n    const generalTriggerDistances = new Set<number>();\n    const specificTriggerDistances = [];\n    for (const skill of this._horse.skills) {\n      if (Skill.matchBase(skill, this) && Math.random() <= skillActivateRate) {\n        if (skill.abilities[0].ability_time === -0.0001) {\n          this.activateAbility({ skillId: skill.id, ability: skill.abilities[0] });\n        } else {\n          const { distances, specific } = this.getSkillTriggerStat(skill);\n          if (specific) {\n            specificTriggerDistances.push({ distances, skill });\n          } else {\n            for (const distance of distances) {\n              generalTriggerDistances.add(distance);\n            }\n            this._generalSkills.push(skill);\n          }\n        }\n      }\n    }\n  }\n\n  simulate() {\n    this._speed = constant.course.startSpeed;\n    this._time = 0;\n    this._distance = 0;\n    this._hp = this.maxHp;\n    this._mode = new Set();\n    this._phase = CoursePhase.Start;\n    this._breakPoints = {};\n    this._statAddition = {\n      speed: 0,\n      stamina: 0,\n      pow: 0,\n      guts: 0,\n      wiz: 0,\n    };\n    this._stat = _.clone(this._horse.stat);\n    this._generalSkills = [];\n    this._activateCountSkills = [];\n    this._skillCooldown = {};\n\n    this.populateSkills();\n\n    const upperBound = (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\n    * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\n    const lowerBound = constant.targetSpeed.baseTargetSpeedRandomMinusVal1\n      + (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\n    this._speedWizRandomRange = [lowerBound, upperBound];\n    this.refreshSpeedRandomValue();\n\n    this.buildSlopeBreakPoints();\n    this.doGateOpen();\n    this.debugOutput();\n    this.finishStartDash();\n    this.debugOutput();\n\n    while (Object.keys(this._breakPoints).length > 0) {\n      const { breakPoint, distance, parameters } = this.minBreakpoint;\n      if (this.doAccelAndRun(distance)) {\n        this.removeBreakPoint(breakPoint);\n        this.breakPointMap[breakPoint](parameters);\n      }\n      this.debugOutput();\n    }\n\n    this.raceResult.time = this._time;\n    this.raceResult.hpLeft = this._hp;\n  }\n\n  debugOutput() {\n    return;\n    const debugData = {\n      hp: this.hp,\n      speed: this._speed,\n      time: this._time,\n      distance: this._distance,\n      phase: this._phase,\n      mode: Array.from(this._mode),\n      breakPoints: util.inspect(this._breakPoints, { depth: null }),\n      slopePer: this._slopePer,\n    };\n    console.log(debugData);\n  }\n}\n\nexport default RaceHorse;\n","import React, { Component } from 'react';\n\nimport _ from 'lodash';\nimport Common, { CourseDataType, LocalizationData } from '../../library/common';\nimport constant from '../../library/race/constant';\nimport { RaceResultData, ResultFlag } from '../../library/race/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  raceResults: RaceResultData[];\n  course?: CourseDataType,\n}\n\ninterface IState {\n}\n\nclass RaceResult extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    const { localization, raceResults, course } = this.props;\n    if (course === undefined || raceResults.length === 0) {\n      return (\n        <>\n        </>\n      );\n    }\n\n    const timeAverage = _.meanBy(raceResults, 'time');\n    const timeShown: string = (timeAverage * constant.course.finishTimeCoef > parseFloat(course.finish_time_min) / 10000)\n      ? Common.secondToTime(timeAverage * constant.course.finishTimeCoef)\n      : localization.site.TimeMin;\n\n    let timeDeviationSum = 0;\n    let fullLastSpurtCount = 0;\n    let hpLeftSum = 0;\n    for (const result of raceResults) {\n      timeDeviationSum += (result.time - timeAverage) ** 2;\n      if (result.resultFlags.has(ResultFlag.FullLastSpurt)) {\n        fullLastSpurtCount += 1;\n      }\n      hpLeftSum += result.hpLeft;\n    }\n    return (\n      <table>\n        <tr>\n          <th>{localization.site.TimeAverage}</th>\n          <th>{localization.site.TimeStandardDeviation}</th>\n          <th>{localization.site.TimeShown}</th>\n          <th>{localization.site.FullLastSpurtRate}</th>\n          <th>{localization.site.HpLeftAverage}</th>\n        </tr>\n        <tr>\n          <td>{timeAverage.toFixed(3)}</td>\n          <td>{Math.sqrt(timeDeviationSum / raceResults.length).toFixed(3)}</td>\n          <td>{timeShown}</td>\n          <td>{(fullLastSpurtCount / raceResults.length).toLocaleString('en', { style: 'percent' })}</td>\n          <td>{(hpLeftSum / raceResults.length).toFixed(3)}</td>\n        </tr>\n      </table>\n    );\n  }\n}\n\nexport default RaceResult;\n","import {\n  DistanceType, ProperRate, GroundType, RunningStyle, SkillData,\n} from '../common';\n\nexport interface HorseStat {\n  speed: number;\n  stamina: number;\n  pow: number;\n  guts: number;\n  wiz: number;\n}\n\nexport interface HorseProperRate {\n  distanceType: { [key in DistanceType]: ProperRate },\n  groundType: { [key in GroundType]: ProperRate },\n  runningStyle: { [key in RunningStyle]: ProperRate },\n}\n\nclass Horse {\n  stat: HorseStat;\n\n  properRate: HorseProperRate;\n\n  skills: SkillData[];\n\n  constructor(\n    { stat, properRate, skills }: {\n      stat: HorseStat,\n      properRate: HorseProperRate,\n      skills: SkillData[],\n    },\n  ) {\n    this.stat = stat;\n    this.properRate = properRate;\n    this.skills = skills;\n  }\n}\n\nexport default Horse;\n","import constant from './constant';\nimport {\n  DistanceType, GroundType, GroundStatus, CourseDataType, TurnType,\n} from '../common';\n\nclass Course {\n  private _courseData: CourseDataType;\n\n  groundStatus: GroundStatus;\n\n  static getDistanceType(distance: number): DistanceType {\n    if (distance >= constant.course.distanceShort.min && distance <= constant.course.distanceShort.max) {\n      return DistanceType.Short;\n    }\n    if (distance >= constant.course.distanceMile.min && distance <= constant.course.distanceMile.max) {\n      return DistanceType.Mile;\n    }\n    if (distance >= constant.course.distanceMiddle.min && distance <= constant.course.distanceMiddle.max) {\n      return DistanceType.Middle;\n    }\n    if (distance >= constant.course.distanceLong.min && distance <= constant.course.distanceLong.max) {\n      return DistanceType.Long;\n    }\n    return DistanceType.Long;\n  }\n\n  constructor({ courseData, groundStatus } : { courseData: CourseDataType, groundStatus: GroundStatus }) {\n    this._courseData = courseData;\n    this.groundStatus = groundStatus;\n  }\n\n  get distance(): number {\n    return this._courseData.distance;\n  }\n\n  get distanceType(): DistanceType {\n    return Course.getDistanceType(this.distance);\n  }\n\n  get groundType(): GroundType {\n    return this._courseData.ground;\n  }\n\n  get turnType(): TurnType {\n    return this._courseData.turn;\n  }\n\n  get blockDistance(): number {\n    return this.distance * constant.course.blockPortion;\n  }\n\n  get phaseStartDistance(): number {\n    return this.distance * constant.course.phaseStart;\n  }\n\n  get phaseMiddleDistance(): number {\n    return this.distance * constant.course.phaseMiddle;\n  }\n\n  get phaseEndDistance(): number {\n    return this.distance * constant.course.phaseEnd;\n  }\n\n  get positionSenseDistance(): number {\n    return this.distance * constant.course.positionSense;\n  }\n\n  get baseTargetSpeed(): number {\n    return 20 - (this.distance - constant.baseDistance) * constant.course.distanceTargetSpeedCoefficient;\n  }\n\n  get allSlopePers(): { distance: number, slope_per: number }[] {\n    return this._courseData.slope_per;\n  }\n\n  get trackId(): string {\n    return this._courseData.race_track_id;\n  }\n}\n\nexport default Course;\n","import {\n  SkillConditionObject, SkillConditionObjectFormula, SkillConditionObjectLogical, SkillConditionOperatorsFormula,\n} from '../common';\nimport { IRaceHorse } from './common';\n\nclass Skill {\n  static matchBase(condition: SkillConditionObject, raceHorse: IRaceHorse): boolean {\n    if (condition === {}) {\n      return true;\n    }\n\n    const realCondition = condition as SkillConditionObjectLogical | SkillConditionObjectFormula;\n    if (realCondition.operator === 'and') {\n      const andCondition = realCondition as SkillConditionObjectLogical;\n      for (const childCondition of andCondition.items) {\n        if (!Skill.matchBase(childCondition, raceHorse)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (realCondition.operator === 'or') {\n      const orCondition = realCondition as SkillConditionObjectLogical;\n      for (const childCondition of orCondition.items) {\n        if (Skill.matchBase(childCondition, raceHorse)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    const formulaCondition = realCondition as SkillConditionObjectFormula;\n    const targetValue = Skill.getTargetValue(formulaCondition, raceHorse);\n    if (typeof targetValue === 'boolean') {\n      return targetValue;\n    }\n\n    switch (formulaCondition.operator) {\n      case SkillConditionOperatorsFormula.GreaterThan:\n        return targetValue > parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.GreaterThanOrEqualTo:\n        return targetValue >= parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.LessThan:\n        return targetValue < parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.LessThanOrEqualTo:\n        return targetValue <= parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.EqualTo:\n        return targetValue === formulaCondition.value;\n      case SkillConditionOperatorsFormula.NotEqualTo:\n        return targetValue !== formulaCondition.value;\n      default:\n        return false;\n    }\n  }\n\n  static getTargetValue(condition: SkillConditionObjectFormula, raceHorse: IRaceHorse): string | number | boolean {\n    switch (condition.key) {\n      case 'rotation':\n        return raceHorse.course.turnType;\n      case 'track_id':\n        return raceHorse.course.trackId;\n      case 'is_basis_distance':\n        return raceHorse.course.distance % 400 === 0 ? '1' : '0';\n      case 'season':\n        return raceHorse.season;\n      case 'weather':\n        return raceHorse.weather;\n      case 'post_number':\n        return raceHorse.postNumber;\n      case 'running_style_count_same':\n        return raceHorse.sameRunningStyleCount;\n      case 'running_style_equal_popularity_one':\n        return raceHorse.popularityFirstRunningStyle === raceHorse.runningStyle ? '1' : '0';\n      case 'popularity':\n        return raceHorse.popularity;\n      case 'grade':\n        // TODO\n        return true;\n      case 'running_style':\n        return raceHorse.runningStyle;\n      case 'random_lot':\n        // Verification needed.\n        return Math.random() * 100 <= parseFloat(condition.value);\n      case 'same_skill_horse_count':\n        // TODO\n        return true;\n      default:\n        return true;\n    }\n  }\n}\n\nexport default Skill;\n","import _ from 'lodash';\nimport {\n  Button, Col, InputNumber, Row, Progress,\n} from 'antd';\nimport React, { Component } from 'react';\nimport Promise from 'bluebird';\n\nimport {\n  CourseDataType, DistanceType, GroundStatus, GroundType, LocalizationData, RunningStyle, SkillData,\n} from '../../library/common';\nimport { RaceResultData, Season, Weather } from '../../library/race/common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate,\n} from './common';\nimport Horse from '../../library/race/horse';\nimport Course from '../../library/race/course';\nimport RaceHorse from '../../library/race/race-horse';\n\nimport skillJson from '../../db/skill.json';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\n\nconst skillData = skillJson as { [key: string]: SkillData };\n\ninterface SimulatorState extends IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n  strategy?: string,\n  groundStatus?: string,\n\n  racecourse?: string,\n  ground?: string,\n  distance?: number,\n  course?: CourseDataType,\n\n  skills?: string[],\n}\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: SimulatorState,\n}\n\ninterface IState {\n  running: boolean,\n  finished: number,\n  rounds: number,\n}\n\nclass SimulatorCalculator extends Component<IProps, IState> {\n  static readonly concurrency = 50;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      running: false,\n      rounds: 1000,\n      finished: 0,\n    };\n  }\n\n  calculate = async () => {\n    this.setState({\n      running: true,\n      finished: 0,\n    });\n    const { state, setData } = this.props;\n    const {\n      speed, stamina, pow, guts, wiz,\n      strategy, groundStatus, course,\n      skills,\n      groundTypeTurf, groundTypeDirt,\n      distanceTypeShort, distanceTypeMile, distanceTypeMiddle, distanceTypeLong,\n      runningStyleNige, runningStyleSenko, runningStyleSashi, runningStyleOikomi,\n    } = state;\n    const { rounds } = this.state;\n\n    const targetCourse = new Course({\n      courseData: course as CourseDataType,\n      groundStatus: groundStatus as GroundStatus,\n    });\n    const targetHorse = new Horse({\n      stat: {\n        speed, stamina, pow, guts, wiz,\n      },\n      properRate: {\n        groundType: {\n          [GroundType.Turf]: groundTypeTurf,\n          [GroundType.Dirt]: groundTypeDirt,\n        },\n        distanceType: {\n          [DistanceType.Short]: distanceTypeShort,\n          [DistanceType.Mile]: distanceTypeMile,\n          [DistanceType.Middle]: distanceTypeMiddle,\n          [DistanceType.Long]: distanceTypeLong,\n        },\n        runningStyle: {\n          [RunningStyle.Nige]: runningStyleNige,\n          [RunningStyle.Senko]: runningStyleSenko,\n          [RunningStyle.Sashi]: runningStyleSashi,\n          [RunningStyle.Oikomi]: runningStyleOikomi,\n        },\n      },\n      skills: _.map(skills, (skillId) => (skillData[skillId])),\n    });\n\n    let counter = 0;\n    let started = 0;\n    const worksPerThread = Math.ceil(rounds / SimulatorCalculator.concurrency);\n    const raceResults: RaceResultData[] = [];\n    await Promise.map(\n      new Array(SimulatorCalculator.concurrency),\n      async () => {\n        const raceHorse = new RaceHorse({\n          horse: targetHorse,\n          course: targetCourse,\n          runningStyle: strategy as RunningStyle,\n          season: Season.Spring,\n          weather: Weather.Sunny,\n          postNumber: 1,\n          popularity: 1,\n          sameRunningStyle: 0,\n          popularityFirstRunningStyle: strategy as RunningStyle,\n        });\n        for (let i = 0; i < worksPerThread && started < rounds; i += 1) {\n          started += 1;\n          raceHorse.simulate();\n          raceResults.push(raceHorse.raceResult);\n          counter += 1;\n          this.setState({ finished: counter });\n          await Promise.delay(0);\n        }\n      },\n      { concurrency: SimulatorCalculator.concurrency },\n    );\n    this.setState({ running: false });\n    setData('raceResults', raceResults);\n  };\n\n  render() {\n    const { localization, state } = this.props;\n    const { course } = state;\n    const { finished, rounds, running } = this.state;\n    const progressPercent = _.round(finished / rounds * 100, 1);\n    return (\n      <Row gutter={[8, 8]}>\n        <Col span={4}>\n          <div className=\"flex\">\n            <span className=\"select-label\">{`${localization.site.SimulatorCalculateRounds}:`}</span>\n            <InputNumber\n              className=\"select\"\n              value={rounds}\n              min={1}\n              max={1000}\n              onChange={(value) => this.setState({ rounds: value })}\n            />\n            <Button\n              className=\"select-label\"\n              type=\"primary\"\n              disabled={course === undefined || running}\n              onClick={this.calculate}\n            >\n              {localization.site.SimulatorCalculate}\n            </Button>\n            { running ? <Progress className=\"select-label\" percent={progressPercent} /> : null }\n          </div>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default SimulatorCalculator;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Row, Col, TreeSelect } from 'antd';\n\nimport { LocalizationData, SkillData } from '../../library/common';\n\nimport skillJson from '../../db/skill.json';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\n\ninterface SkillSelectorDefinition {\n  categoryName: string,\n  icon?: string,\n  sets: string[],\n  children?: SkillSelectorDefinition[],\n}\n\nconst SKILL_SELECTOR_HIERARCHY: SkillSelectorDefinition[] = [\n  {\n    categoryName: 'SkillPassive',\n    sets: ['10061'],\n    children: [\n      {\n        categoryName: 'Speed',\n        icon: '10011',\n        sets: ['10011'],\n      },\n      {\n        categoryName: 'Stamina',\n        icon: '10021',\n        sets: ['10021'],\n      },\n      {\n        categoryName: 'Power',\n        icon: '10031',\n        sets: ['10031'],\n      },\n      {\n        categoryName: 'Guts',\n        icon: '10041',\n        sets: ['10041'],\n      },\n      {\n        categoryName: 'Wiz',\n        icon: '10051',\n        sets: ['10051'],\n      },\n    ],\n  },\n  {\n    categoryName: 'SkillActive',\n    sets: [],\n    children: [\n      {\n        categoryName: 'SkillSpeed',\n        icon: '20011',\n        sets: ['20011', '20012'],\n      },\n      {\n        categoryName: 'SkillAccel',\n        icon: '20041',\n        sets: ['20041', '20042'],\n      },\n      {\n        categoryName: 'SkillHeal',\n        icon: '20021',\n        sets: ['20021', '20022'],\n      },\n      {\n        categoryName: 'SkillLane',\n        icon: '20051',\n        sets: ['20051', '20052'],\n      },\n      {\n        categoryName: 'SkillSight',\n        icon: '20091',\n        sets: ['20091', '20092'],\n      },\n      {\n        categoryName: 'SkillGate',\n        icon: '20061',\n        sets: ['20061', '20062'],\n      },\n    ],\n  },\n  {\n    categoryName: 'SkillDebuff',\n    sets: [],\n    children: [\n      {\n        categoryName: 'SkillSpeed',\n        icon: '30011',\n        sets: ['30011', '30012'],\n      },\n      {\n        categoryName: 'SkillTemptation',\n        icon: '30041',\n        sets: ['30041', '30042'],\n      },\n      {\n        categoryName: 'SkillHeal',\n        icon: '30051',\n        sets: ['30051', '30052'],\n      },\n      {\n        categoryName: 'SkillSight',\n        icon: '30071',\n        sets: ['30071', '30072'],\n      },\n    ],\n  },\n];\n\nconst { TreeNode } = TreeSelect;\nconst skillData = skillJson as { [key: string]: SkillData };\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: {\n  },\n}\n\ninterface IState {\n}\n\nclass SkillSelector extends Component<IProps, IState> {\n  private _skillSets: { [key: string]: SkillData[] } = {};\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n\n    for (const [, skill] of Object.entries(skillData)) {\n      if (!(skill.icon_id in this._skillSets)) {\n        this._skillSets[skill.icon_id] = [];\n      }\n\n      if (skill.rarity === 1 || skill.rarity === 2) {\n        this._skillSets[skill.icon_id].push(skill);\n      }\n    }\n  }\n\n  buildSkillTreeNodes(definitions: SkillSelectorDefinition[] | undefined, localization: LocalizationData): JSX.Element[] {\n    if (!definitions) {\n      return [];\n    }\n\n    return _.map(definitions, (definition) => {\n      let title: any = localization.site[definition.categoryName];\n      if ('icon' in definition) {\n        title = (\n          <span>\n            <img\n              className=\"skillIcon\"\n              src={`${process.env.PUBLIC_URL}/static/image/skill/${definition.icon}.png`}\n              alt={title}\n            />\n            {title}\n          </span>\n        );\n      }\n\n      let children: JSX.Element[] = [];\n      if ('children' in definition) {\n        children = this.buildSkillTreeNodes(definition.children, localization);\n      }\n\n      let skills: JSX.Element[] = [];\n      if ('sets' in definition) {\n        skills = _\n          .chain(definition.sets)\n          .map((set) => this._skillSets[set])\n          .filter((skillSet) => Array.isArray(skillSet))\n          .flatten()\n          .sortBy(['group_id', 'id'])\n          .map((skill) => (\n            <TreeNode\n              key={skill.id}\n              title={(\n                <span className={`skill_${skill.rarity}`}>\n                  <img\n                    className=\"skillIcon\"\n                    src={`${process.env.PUBLIC_URL}/static/image/skill/${skill.icon_id}.png`}\n                    alt={skill.name}\n                  />\n                  {skill.name}\n                </span>\n              )}\n              value={skill.id}\n            />\n          ))\n          .value();\n      }\n\n      return (\n        <TreeNode\n          key={definition.categoryName}\n          title={title}\n          value={0}\n          disabled\n        >\n          {children}\n          {skills}\n        </TreeNode>\n      );\n    });\n  }\n\n  render() {\n    const { localization, setData } = this.props;\n    return (\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <div className=\"flex\">\n            <span className=\"select-label\">{`${localization.site.SkillSelector}:`}</span>\n            <TreeSelect\n              dropdownPopupAlign={{\n                overflow: { adjustY: 0, adjustX: 0 },\n                offset: [0, 2],\n              }}\n              treeLine\n              allowClear\n              multiple\n              autoClearSearchValue\n              showCheckedStrategy={TreeSelect.SHOW_PARENT}\n              style={{\n                width: '100%',\n              }}\n              onChange={(value) => setData('skills', value)}\n            >\n              { this.buildSkillTreeNodes(SKILL_SELECTOR_HIERARCHY, localization) }\n            </TreeSelect>\n          </div>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default SkillSelector;\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundStatus, GroundType, LocalizationData, ProperRate, RunningStyle,\n} from '../../library/common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate,\n} from './common';\nimport CourseData from '../course-data';\nimport HorseData from './horse-data';\nimport RaceData from './race-data';\nimport RaceResult from './race-result';\nimport SimulatorCalculator from './simulator-calculator';\nimport SkillSelector from './skill-selector';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\nimport '../../app.css';\n\nimport courseJson from '../../db/course.json';\nimport { RaceResultData } from '../../library/race/common';\n\nconst courses = courseJson as CourseDataType[];\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\ninterface IProperRate extends IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n}\n\ninterface IState extends IHorseState, IProperRate {\n  skills?: string[],\n\n  racecourse?: string,\n  ground?: GroundType,\n  distance?: number,\n  course?: CourseDataType,\n\n  strategy?: RunningStyle,\n  groundStatus?: GroundStatus,\n\n  raceResults: RaceResultData[],\n}\n\nclass Simulator extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.loadCourseData();\n    this.state = {\n      speed: 1200,\n      stamina: 300,\n      pow: 1200,\n      guts: 300,\n      wiz: 300,\n\n      groundTypeTurf: ProperRate.A,\n      groundTypeDirt: ProperRate.A,\n\n      distanceTypeShort: ProperRate.A,\n      distanceTypeMile: ProperRate.A,\n      distanceTypeMiddle: ProperRate.A,\n      distanceTypeLong: ProperRate.A,\n\n      runningStyleNige: ProperRate.A,\n      runningStyleSenko: ProperRate.A,\n      runningStyleSashi: ProperRate.A,\n      runningStyleOikomi: ProperRate.A,\n\n      racecourse: '10006',\n      ground: GroundType.Turf,\n      distance: 1600,\n      course: this.courseCategories['10006'][GroundType.Turf][1600],\n\n      strategy: RunningStyle.Nige,\n      groundStatus: GroundStatus.Good,\n\n      raceResults: [],\n    };\n  }\n\n  updateCourse = () => {\n    const {\n      strategy, racecourse, ground, distance, groundStatus,\n    } = this.state;\n    if (racecourse === undefined || ground === undefined || distance === undefined || strategy === undefined || groundStatus === undefined) {\n      this.setState({ course: undefined });\n    } else {\n      this.setState({ course: this.courseCategories[racecourse][ground][distance] });\n    }\n  };\n\n  setData = (key: string, value: any): void => {\n    switch (key) {\n      case 'racecourse':\n        this.setState({\n          racecourse: value,\n          ground: undefined,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'ground':\n        this.setState({\n          ground: value as GroundType,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'distance':\n      case 'strategy':\n      case 'groundStatus':\n        this.setState<'distance' | 'strategy' | 'groundStatus'>({ [key]: value }, this.updateCourse);\n        break;\n      case 'speed':\n      case 'stamina':\n      case 'pow':\n      case 'guts':\n      case 'wiz':\n        this.setState({ [key]: value as number } as Pick<IHorseState, keyof IHorseState>);\n        break;\n      case 'raceResults':\n        this.setState({ raceResults: value });\n        break;\n      case 'skills':\n        this.setState({ skills: value as string[] });\n        break;\n      default:\n        this.setState({ [key]: value } as Pick<IProperRate, keyof IProperRate>);\n        break;\n    }\n  };\n\n  loadCourseData() {\n    for (const course of courses) {\n      if (!(course.race_track_id in this.courseCategories)) {\n        this.courseCategories[course.race_track_id] = {};\n      }\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\n        this.courseCategories[course.race_track_id][course.ground] = {};\n      }\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\n    }\n  }\n\n  render() {\n    const { localization } = this.props;\n    const { raceResults, course } = this.state;\n    return (\n      <div className=\"content\">\n        <HorseData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SkillSelector\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <CourseData\n          localization={localization}\n          courseCategories={this.courseCategories}\n          setData={this.setData}\n          state={this.state}\n        />\n        <RaceData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SimulatorCalculator\n          localization={localization}\n          state={this.state}\n          setData={this.setData}\n        />\n        <RaceResult localization={localization} raceResults={raceResults} course={course} />\n      </div>\n    );\n  }\n}\n\nexport default Simulator;\n","import React, { Component } from 'react';\nimport {\n  ComposedChart, Line, XAxis, YAxis, Tooltip, ReferenceLine, Legend, ReferenceArea, Label,\n} from 'recharts';\n\nimport {\n  CourseCategory, CourseDataType, LocalizationData,\n} from '../../library/common';\n\nimport 'react-tabs/style/react-tabs.css';\n\nconst CORNER_COLOR: { [key: string]: any } = {\n  Default: {\n    stroke: '#00ff00',\n    strokeOpacity: 0.3,\n    fill: '#00ff00',\n    fillOpacity: 0.3,\n  },\n  1: {\n    stroke: '#00bb00',\n    strokeOpacity: 0.3,\n    fill: '#00bb00',\n    fillOpacity: 0.3,\n  },\n  2: {\n    stroke: '#009900',\n    strokeOpacity: 0.3,\n    fill: '#009900',\n    fillOpacity: 0.3,\n  },\n  3: {\n    stroke: '#00f660',\n    strokeOpacity: 0.3,\n    fill: '#006600',\n    fillOpacity: 0.3,\n  },\n  4: {\n    stroke: '#003300',\n    strokeOpacity: 0.3,\n    fill: '#003300',\n    fillOpacity: 0.3,\n  },\n};\n\ninterface IProps {\n  localization: LocalizationData\n  state: {\n    course?: CourseDataType,\n  }\n}\n\ninterface IState {\n}\n\nclass CourseChart extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  render() {\n    const { localization, state } = this.props;\n    const { course } = state;\n\n    if (course === undefined) {\n      return (<></>);\n    }\n\n    const blockDistance = course.distance / 24;\n    const slopeDistance = course.distance / 1000;\n    let lastSlopePer = 0;\n    let lastSlopePerDistance = 0;\n    const data = [];\n    for (const slope of course.slope_per) {\n      if (lastSlopePer === 0 && slope.slope_per !== 0 && lastSlopePerDistance < slope.distance - slopeDistance) {\n        data.push({\n          slopePer: 0,\n          distance: slope.distance - slopeDistance,\n        });\n      }\n\n      data.push({\n        slopePer: slope.slope_per,\n        distance: slope.distance,\n      });\n      lastSlopePer = slope.slope_per;\n      lastSlopePerDistance = slope.distance;\n    }\n    if (lastSlopePer !== course.distance) {\n      data.push({\n        slopePer: 0,\n        distance: course.distance,\n      });\n    }\n\n    const referenceAreas = [];\n    for (let i = 0; i < course.param.corner.length; i += 1) {\n      let index = 'Default';\n      if (course.param.corner_index.includes(i)) {\n        index = (course.param.corner_index.indexOf(i) + 1).toString();\n      }\n      referenceAreas.push(<ReferenceArea\n        x1={course.param.corner[i].start}\n        x2={course.param.corner[i].end}\n        y1={-2.5}\n        y2={-3}\n        stroke={CORNER_COLOR[index].stroke}\n        strokeOpacity={CORNER_COLOR[index].strokeOpacity}\n        fill={CORNER_COLOR[index].fill}\n        fillOpacity={CORNER_COLOR[index].fillOpacity}\n        label={<Label position=\"insideTop\">{localization.site[`CourseCorner${index}`]}</Label>}\n      />);\n    }\n    return (\n      <ComposedChart\n        width={1000}\n        height={500}\n        data={data}\n      >\n        <XAxis type=\"number\" dataKey=\"distance\" />\n        <YAxis domain={[-3, 3]} />\n        <Tooltip />\n        <Legend />\n        <Line dot={false} name={localization.site.CourseSlope} type=\"monotone\" dataKey=\"slopePer\" stroke=\"#8884d8\" />\n        <ReferenceLine\n          x={blockDistance * 10}\n          stroke=\"red\"\n          label={<Label position=\"insideTop\">{localization.site.CoursePositionKeepEnd}</Label>}\n        />\n        <ReferenceLine\n          x={blockDistance * 4}\n          stroke=\"red\"\n          label={<Label position=\"insideTop\">{localization.site.CourseMiddlePhase}</Label>}\n        />\n        <ReferenceLine\n          x={blockDistance * 16}\n          stroke=\"red\"\n          label={<Label position=\"insideTop\">{localization.site.CourseEndPhase}</Label>}\n        />\n        { referenceAreas }\n      </ComposedChart>\n    );\n  }\n}\n\nexport default CourseChart;\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundType, LocalizationData,\n} from '../../library/common';\nimport CourseData from '../course-data';\nimport CourseChart from './course-chart';\n\nimport 'react-tabs/style/react-tabs.css';\n\nimport courseJson from '../../db/course.json';\n\nconst courses = courseJson as CourseDataType[];\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n  racecourse?: string,\n  ground?: GroundType,\n  distance?: number,\n  course?: CourseDataType,\n}\n\nclass Course extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.loadCourseData();\n    this.state = {\n      racecourse: '10006',\n      ground: GroundType.Turf,\n      distance: 1600,\n      course: this.courseCategories['10006'][GroundType.Turf][1600],\n    };\n  }\n\n  setData = (key: string, value: any): void => {\n    this.setState({ [key]: value } as Pick<IState, keyof IState>, this.updateCourse);\n  };\n\n  updateCourse = () => {\n    const { racecourse, ground, distance } = this.state;\n    if (racecourse === undefined || ground === undefined || distance === undefined) {\n      this.setState({ course: undefined });\n    } else {\n      this.setState({ course: this.courseCategories[racecourse][ground][distance] });\n    }\n  };\n\n  loadCourseData() {\n    for (const course of courses) {\n      if (!(course.race_track_id in this.courseCategories)) {\n        this.courseCategories[course.race_track_id] = {};\n      }\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\n        this.courseCategories[course.race_track_id][course.ground] = {};\n      }\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\n    }\n  }\n\n  render() {\n    const { localization } = this.props;\n    return (\n      <div className=\"content\">\n        <CourseData\n          localization={localization}\n          courseCategories={this.courseCategories}\n          setData={this.setData}\n          state={this.state}\n        />\n        <CourseChart\n          localization={localization}\n          state={this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Course;\n","import _ from 'lodash';\n\nimport { LocalizationData, LocalizationSubData } from './library/common';\n\nclass Localization {\n  default: {};\n\n  localizer: {\n    [key: string]: () => __WebpackModuleApi.RequireContext;\n  };\n\n  static getLocalizationJaJp() {\n    return require.context('./localization/ja_jp/', true, /\\.json$/);\n  }\n\n  static getLocalizationEnUs() {\n    return require.context('./localization/en_us/', true, /\\.json$/);\n  }\n\n  static getLocalizationZhTw() {\n    return require.context('./localization/zh_tw', true, /\\.json$/);\n  }\n\n  constructor() {\n    this.default = {};\n    this.localizer = {\n      'ja-jp': Localization.getLocalizationJaJp,\n      'en-us': Localization.getLocalizationEnUs,\n      'zh-tw': Localization.getLocalizationZhTw,\n    };\n    this.default = this.getLocalization('ja-jp');\n  }\n\n  getLocalization(locale: string): LocalizationData {\n    const files = this.localizer[locale]();\n    const fileJson: LocalizationSubData = {};\n    for (const fileKey of files.keys()) {\n      const structure = fileKey.split('.')[1].split('/');\n\n      let target: LocalizationSubData = fileJson;\n      for (let i = 1; i < structure.length; i += 1) {\n        if (!(structure[i] in fileJson)) {\n          target[structure[i]] = {};\n        }\n        target = target[structure[i]] as LocalizationSubData;\n      }\n      _.merge(target, files(fileKey));\n    }\n    return _.merge({}, this.default, fileJson) as LocalizationData;\n  }\n}\n\nexport default Localization;\n","import {\n  Layout, Menu, Select, Row, Col,\n} from 'antd';\nimport React, { Component } from 'react';\nimport {\n  Redirect, HashRouter as Router, Route, Link, Switch,\n} from 'react-router-dom';\n\nimport { LocalizationData } from './library/common';\nimport RelationGraph from './component/relation/graph';\nimport RelationQuery from './component/relation/query';\nimport Simulator from './component/simulator/simulator';\nimport Course from './component/course/course';\nimport Localization from './localization';\n\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst { Header, Content, Footer } = Layout;\nconst { Option } = Select;\n\ninterface IProps {\n}\n\ninterface IState {\n  localization: LocalizationData,\n}\n\nclass App extends Component<IProps, IState> {\n  localization: Localization;\n\n  constructor(props: {}) {\n    super(props);\n    this.localization = new Localization();\n    this.state = {\n      localization: this.localization.getLocalization('ja-jp'),\n    };\n  }\n\n  changeLocalization = (locale: string) => {\n    this.setState({\n      localization: this.localization.getLocalization(locale),\n    });\n  };\n\n  render() {\n    const { localization } = this.state;\n\n    return (\n      <Router>\n        <Layout className=\"layout\">\n          <Header className=\"header\">\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n              <Menu.Item key=\"1\">\n                <Link to=\"/relation/graph\" className=\"link\">{localization.site['Relation Graph']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <Link to=\"/relation/query\" className=\"link\">{localization.site['Relation Query']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <Link to=\"/course\" className=\"link\">{localization.site.Course}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"4\">\n                <Link to=\"/simulator\" className=\"link\">{localization.site.Simulator}</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content className=\"tabs\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/relation/graph\" />\n              </Route>\n              <Route path=\"/relation/graph\" render={() => (<RelationGraph localization={localization} />)} />\n              <Route path=\"/relation/query\" render={() => (<RelationQuery localization={localization} />)} />\n              <Route path=\"/simulator\" render={() => (<Simulator localization={localization} />)} />\n              <Route path=\"/course\" render={() => (<Course localization={localization} />)} />\n            </Switch>\n          </Content>\n          <Footer className=\"footer\" style={{ padding: '5px' }}>\n            <Row gutter={[8, 8]}>\n              <Col span={20} />\n              <Col span={2}>\n                <a className=\"github\" href=\"https://github.com/greydust/umamusume\" target=\"_blank\" rel=\"noreferrer\">\n                  <img src={`${process.env.PUBLIC_URL}/static/image/github.png`} height=\"30\" alt=\"GitHub\" />\n                  GitHub\n                </a>\n              </Col>\n              <Col span={2}>\n                <Select className=\"localizationSelector\" defaultValue=\"ja-jp\" onChange={this.changeLocalization}>\n                  <Option value=\"zh-tw\">繁體中文</Option>\n                  <Option value=\"ja-jp\">日本語</Option>\n                  <Option value=\"en-us\">English</Option>\n                </Select>\n              </Col>\n            </Row>\n          </Footer>\n        </Layout>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}