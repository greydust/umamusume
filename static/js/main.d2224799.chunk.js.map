{"version":3,"sources":["localization/ja_jp sync //.json$","localization/en_us sync //.json$","localization/zh_tw sync //.json$","common.ts","component/relation/graph.tsx","component/relation/query.tsx","component/simulator/course-data.tsx","component/simulator/horse-proper-rate.tsx","component/simulator/horse-stat-data.tsx","library/race/common.tsx","component/simulator/horse-data.tsx","library/race/constant.ts","library/race/race-horse.ts","component/simulator/race-result.tsx","library/race/horse.ts","library/race/course.ts","component/simulator/simulator-calculator.tsx","component/simulator/simulator.tsx","component/skill/skill-item.tsx","component/skill/index.tsx","localization.ts","app.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","RunningStyle","DistanceType","GroundType","TurnType","InoutType","CoursePhase","GroundStatus","ProperRate","characters","characterJson","relations","relationJson","relationMembers","relationMemberJson","RelationGraph","props","characterIds","i","length","j","calculateRelation","this","idToPortrait","_","targetId","localization","className","src","process","alt","character","name","createRow","id1","id2","targetRelations","intersection","reduce","sum","parseInt","Component","RelationQuery","horses","selectHorse","event","value","target","setState","horseId","state","rel","forEach","targetHorseId","push","relation","image","sortBy","horseRow","relationArray","buildRelationArray","FormControl","InputLabel","Select","labelId","onChange","MenuItem","undefined","Common","time","hour","Math","floor","hourString","minute","minuteString","toString","padStart","second","secondString","minorString","toFixed","Option","CourseData","setData","strategy","span","site","Strategy","Nige","RunningStyleNige","Senko","RunningStyleSenko","Sashi","RunningStyleSashi","Oikomi","RunningStyleOikomi","groundStatus","Good","GroundStatusGood","SlightlyHeavy","GroundStatusSlightlyHeavy","Heavy","GroundStatusHeavy","Bad","GroundStatusBad","racecourse","Racecourse","course","key","courseCategories","ground","Ground","distance","Distance","strategyComponent","getStrategyComponent","groundStatusComponent","getGroundStatusComponent","racecourseComponent","getRacecourseComponent","groundComponent","getGroundComponent","distanceComponent","getDistanceComponent","gutter","HorseProperRate","properRateTypes","properTypes","properName","properRateType","camelProperRateType","camelCase","properRate","G","F","E","D","C","B","A","S","HorseStatData","stats","min","max","data","speed","stamina","pow","guts","wiz","ResultFlag","HorseData","constant","baseDistance","minSpeed","minSpeedRate","minSpeedGutsCoefSqrt","minSpeedGutsCoef","startDash","targetSpeedCoefficient","startAccelAdd","targetSpeed","baseTargetSpeedRandomMinusVal1","baseTargetSpeedRandomMinusVal2","baseTargetSpeedRandomPlusVal1","baseTargetSpeedRandomLogCoefficient","baseTargetSpeedRandomCoefficient","Start","Middle","End","LastSpurt","phaseEndBaseTargetSpeedCoef","addSpeedParamCoef","baseTargetSpeedCoef","lastSpurtBaseTargetSpeedAddCoef","lastSpurtTargetSpeedCoefSqrt","upSlopeAddSpeedVal1","downSlopeAddSpeedVal1","downSlopeAddSpeedVal2","firstBlockSlowStyles","lastSpurtTargetSpeedStep","accel","accelPhaseCoef","accelPowCoef","accelPowCoefUpSlope","accelPowCoefSqrt","accelDecreaseCoef","accelDecreaseZeroHpCoef","hp","hpInitialVal1","hpMaxCoef","hpDecBase","hpDecRateBaseNormal","hpDecRateBaseTemptation","hpDecRateBasePositionKeepPaseDown","hpDecRateMultiplyDownSlopeAccelMode","speedGapParam1","speedGapParam1Pow","groundModifierMultiHpSub","Turf","Dirt","hpGutsBase","hpGutsCoef","hpGutsCoefSqrt","distanceTargetSpeedCoefficient","blockPortion","distanceShort","distanceMile","distanceMiddle","distanceLong","Number","MAX_VALUE","startSpeed","phaseStart","phaseMiddle","phaseEnd","positionSense","frameTime","gateTimeRange","finishTimeCoef","lastSpurt","determineRateBase","determineRateWizMultiplier","targetDistanceFromGoal","slope","downSlopeAccelModeChanceBase","downSlopeEndChance","BreakPoint","Mode","RaceResult","raceResults","timeAverage","meanBy","timeShown","parseFloat","finish_time_min","secondToTime","TimeMin","timeDeviationSum","fullLastSpurtCount","hpLeftSum","result","resultFlags","has","FullLastSpurt","hpLeft","TimeAverage","TimeStandardDeviation","TimeShown","FullLastSpurtRate","HpLeftAverage","sqrt","toLocaleString","style","Horse","stat","Course","courseData","_courseData","getDistanceType","turn","slope_per","Short","Mile","Long","distanceProperRate","distanceProperRateJson","groundProperRate","groundProperRateJson","RaceHorse","horse","runningStyle","_course","_horse","_runningStyle","_speedWizRandomRange","_speedWizRandom","_phase","_mode","Set","_speed","_lastSpurtTargetSpeed","_hp","_distance","_time","_breakPoints","_startDashTargetSpeed","_slopePer","resultFlag","finishFirstBlock","delete","FirstBlock","FinishPhaseStart","phaseStartDistance","finishBlock","refreshSpeedRandomValue","FinishBlock","blockDistance","finishPhaseStart","FinishPhaseMiddle","phaseMiddleDistance","calculateLastSpurt","add","maxLastSpurtTargetSpeed","calculateAccelAndRun","hpCost","finalSpeed","lastSpurtDistance","lastSpurtTargetSpeed","lastSpurtSpeedCandidates","phaseEndBaseTargetSpeed","baseTargetSpeed","phaseEndTargetSpeedAddition","maxDistance","hpDecreaseRate","accelToTargetSpeed","currentSpeed","phaseEndAccelTime","phaseEndAccelDistance","phaseEndAccelHpCost","phaseEndFinalSpeed","lastSpurtAccelTime","lastSpurtAccelDistance","lastSpurtAccelHpCost","runDistance","phaseEndRunTime","phaseEndRunHpCost","getRunHpDecrease","lastSpurtRunTime","lastSpurtRunHpCost","hpDiff","candidate","randomByCandidates","lastSpurtDetermineRate","finishPhaseMiddle","FinishPhaseEnd","phaseEndDistance","finishPhaseEnd","FinishPhaseLastSpurt","doLastSpurt","finishLastSpurt","triggerPositionSense","zeroHp","ZeroHp","changeSlope","slopePer","random","DownSlopeAccel","DownSlopeAccelMode","checkDownSlopeAccelMode","triggerSkill","reachGoal","breakPointMap","None","FinishFirstBlock","PositionSense","Slope","Skill","Goal","upperBound","log10","lowerBound","distanceType","StartDash","startDashTargetSpeed","slopeAdd","abs","baseTargetSpeedRandom","realTargetSpeed","groundType","power","baseAccel","UpSlope","Temptation","PositionKeepPaceDown","phaseEndHpDecreaseRate","modeHpDecreaseRate","minParameters","minKey","minDistance","entries","targetValue","Array","isArray","parameters","breakPoint","accelTime","accelDistance","accelHpCost","runTime","speedCoefficient","realAccelTime","nr","realAccelDistance","speedHpDecreaseRate","getSpeedHpDecrease","runHpCost","realRunTime","realRunDistance","slopePers","allSlopePers","addBreakPoint","type","pop","maxHp","buildSlopeBreakPoints","doGateOpen","debugOutput","finishStartDash","minBreakpoint","doAccelAndRun","removeBreakPoint","initialSpeed","targetSpeedByDistanceSquare","getAccelHpDecrease","determineRate","randomNumber","log","SimulatorCalculator","calculate","a","running","finished","groundTypeTurf","groundTypeDirt","distanceTypeShort","distanceTypeMile","distanceTypeMiddle","distanceTypeLong","runningStyleNige","runningStyleSenko","runningStyleSashi","runningStyleOikomi","rounds","targetCourse","targetHorse","counter","started","worksPerThread","ceil","concurrency","Promise","raceHorse","simulate","skills","normal","rare","unique","temptation","triggered","delay","progressPercent","round","SimulatorCalculateRounds","disabled","onClick","SimulatorCalculate","percent","courses","Simulator","updateCourse","loadCourseData","courseId","race_track_id","SkillItem","useState","skill","description","rarity","need_skill_point","grade_value","Skills","skillArray","skill_data","index","Localization","default","localizer","getLocalizationJaJp","getLocalizationEnUs","getLocalizationZhTw","getLocalization","locale","files","fileJson","fileKey","structure","split","merge","require","Header","Layout","Content","Footer","App","changeLocalization","theme","mode","defaultSelectedKeys","Item","to","exact","path","render","defaultValue","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2224799.chunk.js","sourcesContent":["var map = {\n\t\"./character/name.json\": 163,\n\t\"./course/ground.json\": 164,\n\t\"./course/inout.json\": 165,\n\t\"./course/racecourse.json\": 166,\n\t\"./site.json\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 162;","var map = {\n\t\"./character/name.json\": 169,\n\t\"./course/racecourse.json\": 170,\n\t\"./site.json\": 171\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 168;","var map = {\n\t\"./character/name.json\": 173,\n\t\"./course/racecourse.json\": 174,\n\t\"./site.json\": 175\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 172;","export interface LocalizationData {\n  character: {\n    name: LocalizationMap,\n  },\n  course: {\n    racecourse: LocalizationMap,\n    ground: LocalizationMap,\n    inout: LocalizationMap,\n  },\n  site: LocalizationMap,\n  [key: string]: string | LocalizationSubData,\n}\n\nexport interface LocalizationSubData {\n  [key: string]: string | LocalizationSubData,\n}\n\ninterface LocalizationMap {\n  [key: string]: string,\n}\n\nexport enum RunningStyle {\n  Nige = 'RunningStyleNige',\n  Senko = 'RunningStyleSenko',\n  Sashi = 'RunningStyleSashi',\n  Oikomi = 'RunningStyleOikomi',\n}\n\nexport enum DistanceType {\n  Short = 'DistanceTypeShort',\n  Mile = 'DistanceTypeMile',\n  Middle = 'DistanceTypeMiddle',\n  Long = 'DistanceTypeLong',\n}\n\nexport enum GroundType {\n  Turf = '1',\n  Dirt = '2',\n}\n\nexport enum TurnType {\n  Right = '1',\n  Left = '2',\n  Straight = '4',\n}\n\nexport enum InoutType {\n  Normal = '1',\n  Inner = '2',\n  Outer = '3',\n  OuterInner = '4',\n}\n\nexport enum CoursePhase {\n  Start = 0,\n  Middle = 1,\n  End = 2,\n  LastSpurt = 3,\n}\n\nexport enum GroundStatus {\n  Good = 'GroundStatusGood',\n  SlightlyHeavy = 'GroundStatusSlightlyHeavy',\n  Heavy = 'GroundStatusHeavy',\n  Bad = 'GroundStatusBad',\n}\n\nexport enum ProperRate {\n  G = '1',\n  F = '2',\n  E = '3',\n  D = '4',\n  C = '5',\n  B = '6',\n  A = '7',\n  S = '8',\n}\n\nexport interface CourseCategory {\n  [key: string]: {\n    [key: string]: {\n      [key: string]: CourseDataType,\n    },\n  },\n}\n\nexport interface CourseDataType {\n  id: string,\n  race_track_id: string,\n  distance: number,\n  ground: GroundType,\n  turn: TurnType,\n  inout: InoutType,\n  course_set_status_id: string,\n  finish_time_min: string,\n  finish_time_min_random_range: string,\n  finish_time_max: string,\n  finish_time_max_random_range: string,\n  param: {\n    corner: { start?: number, end?: number }[],\n    straight: { start: number, end: number }[],\n  }\n  slope_per: { distance: number, slope_per: number }[],\n}\n\nclass Common {\n  static secondToTime(time: number): string {\n    const hour = Math.floor(time / 3600);\n    const hourString = hour > 0 ? `${hour}:` : '';\n    const minute = Math.floor((time - hour * 3600) / 60);\n    const minuteString = minute > 0\n      ? `${hour > 0 ? `${minute.toString().padStart(2)}` : minute}:`\n      : '';\n    const second = Math.floor(time - hour * 3600 - minute * 60);\n    const secondString = second > 0\n      ? `${(hour > 0 || minute > 0) ? `${second.toString().padStart(2)}` : second}`\n      : '0';\n    const minorString = `.${Math.floor((time - hour * 3600 - minute * 60 - second) * 100).toFixed(3)}`;\n    return `${hourString}${minuteString}${secondString}${minorString}`;\n  }\n}\n\nexport default Common;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport 'react-tabs/style/react-tabs.css';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n}\n\nclass RelationGraph extends Component<IProps, IState> {\n  static calculateRelation(id1: string, id2: string) {\n    if (id1 === id2) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  characterIds: string[];\n\n  relations: { [key: string]: { [key: string]: number } };\n\n  constructor(props: IProps) {\n    super(props);\n    this.characterIds = Object.keys(characters);\n    this.relations = {};\n    for (let i = 0; i < this.characterIds.length; i += 1) {\n      this.relations[this.characterIds[i]] = {};\n      for (let j = 0; j < this.characterIds.length; j += 1) {\n        this.relations[this.characterIds[i]][this.characterIds[j]] = RelationGraph.calculateRelation(this.characterIds[i], this.characterIds[j]);\n      }\n    }\n  }\n\n  createRow(id: string) {\n    return (\n      <tr key={`relation_row_${id}`}>\n        <th key={`portrait_row_${id}`}>{this.idToPortrait(id)}</th>\n        { _.map(this.characterIds, (targetId) => <th key={`relation_${id}_${targetId}`}>{ RelationGraph.calculateRelation(id, targetId) }</th>) }\n      </tr>\n    );\n  }\n\n  idToPortrait(id: string) {\n    const { localization } = this.props;\n    return (\n      <img\n        className=\"portrait\"\n        src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${id}.png`}\n        alt={localization.character.name[id]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <table>\n          <tbody>\n            <tr>\n              <th />\n              { _.map(this.characterIds, (id) => <th key={`portrait_column_${id}`}>{this.idToPortrait(id)}</th>) }\n            </tr>\n            { _.map(this.characterIds, (id) => this.createRow(id)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationGraph;\n","import _ from 'lodash';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport React, { Component } from 'react';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface HorseRow {\n  name: string;\n  relation: number;\n  image: string;\n}\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\ninterface IState {\n  horseId: string\n}\n\nclass RelationQuery extends Component<IProps, IState> {\n  static calculateRelation(id1: string | undefined, id2: string): number {\n    if (id1 === id2 || id1 === undefined) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  horses: string[];\n\n  constructor(props: IProps) {\n    super(props);\n    this.horses = Object.keys(characters);\n    this.state = {\n      horseId: '',\n    };\n  }\n\n  selectHorse = (event: any) => {\n    const { value } = event.target;\n    this.setState({ horseId: value });\n  };\n\n  buildRelationArray() {\n    const { horseId } = this.state;\n    const { localization } = this.props;\n    let rel: HorseRow[] = [];\n    this.horses.forEach((targetHorseId) => {\n      if (targetHorseId !== horseId) {\n        rel.push({\n          name: localization.character.name[targetHorseId],\n          relation: RelationQuery.calculateRelation(horseId, targetHorseId),\n          image: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\n        });\n      }\n    });\n    rel = _.sortBy(rel, [(horseRow) => -horseRow.relation]);\n\n    return rel.map((horseRow) => (\n      <tr>\n        <td>{horseRow.name}</td>\n        <td><img className=\"portrait\" src={horseRow.image} alt={horseRow.name} /></td>\n        <td>{horseRow.relation}</td>\n      </tr>\n    ));\n  }\n\n  render() {\n    const { localization } = this.props;\n    const relationArray = this.buildRelationArray();\n    return (\n      <div className=\"content\">\n        <div className=\"dropdown\">\n          <FormControl>\n            <InputLabel id=\"demo-simple-select-label\">ウマ</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              onChange={this.selectHorse}\n            >\n              { this.horses.map((targetHorseId) => (\n                <MenuItem key={`${targetHorseId}_option`} value={targetHorseId}>\n                  <img\n                    className=\"portrait\"\n                    src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`}\n                    alt={localization.character.name[targetHorseId]}\n                  />\n                  {localization.character.name[targetHorseId]}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <table>\n          {relationArray}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationQuery;\n","import _ from 'lodash';\nimport {\n  Row, Col, Select,\n} from 'antd';\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundStatus, LocalizationData, RunningStyle,\n} from '../../common';\n\nimport 'antd/dist/antd.css';\nimport './simulator.css';\n\nconst { Option } = Select;\n\ninterface IProps {\n  localization: LocalizationData,\n  courseCategories: CourseCategory,\n  setData: (key: string, value: any) => void,\n  state: {\n    strategy?: string,\n    groundStatus?: string,\n    racecourse?: string,\n    ground?: string,\n    distance?: number,\n    course?: CourseDataType,\n  },\n}\n\ninterface IState {\n}\n\nclass CourseData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  getStrategyComponent() {\n    const { localization, setData, state } = this.props;\n    const { strategy } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Strategy}:`}</span>\n          <Select className=\"select\" value={strategy} onChange={(value) => setData('strategy', value)}>\n            <Option value={RunningStyle.Nige}>{localization.site.RunningStyleNige}</Option>\n            <Option value={RunningStyle.Senko}>{localization.site.RunningStyleSenko}</Option>\n            <Option value={RunningStyle.Sashi}>{localization.site.RunningStyleSashi}</Option>\n            <Option value={RunningStyle.Oikomi}>{localization.site.RunningStyleOikomi}</Option>\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getGroundStatusComponent() {\n    const { localization, setData, state } = this.props;\n    const { groundStatus } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.GroundStatus}:`}</span>\n          <Select className=\"select\" value={groundStatus} onChange={(value) => setData('groundStatus', value)}>\n            <Option value={GroundStatus.Good}>{localization.site.GroundStatusGood}</Option>\n            <Option value={GroundStatus.SlightlyHeavy}>{localization.site.GroundStatusSlightlyHeavy}</Option>\n            <Option value={GroundStatus.Heavy}>{localization.site.GroundStatusHeavy}</Option>\n            <Option value={GroundStatus.Bad}>{localization.site.GroundStatusBad}</Option>\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getRacecourseComponent() {\n    const { localization, setData, state } = this.props;\n    const { racecourse } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Racecourse}:`}</span>\n          <Select className=\"select\" value={racecourse} onChange={(value) => setData('racecourse', value)}>\n            { _.map(localization.course.racecourse, (value: string, key: string) => (\n              <Option value={key}>{value}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getGroundComponent() {\n    const {\n      localization, courseCategories, setData, state,\n    } = this.props;\n    const { racecourse, ground } = state;\n\n    if (racecourse === undefined) {\n      return null;\n    }\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Ground}:`}</span>\n          <Select className=\"select\" value={ground} onChange={(value) => setData('ground', value)}>\n            { _.map(courseCategories[racecourse], (value: string, key: string) => (\n              <Option value={key}>{localization.course.ground[key]}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getDistanceComponent() {\n    const {\n      localization, courseCategories, setData, state,\n    } = this.props;\n    const { racecourse, ground, distance } = state;\n\n    if (racecourse === undefined || ground === undefined) {\n      return null;\n    }\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Distance}:`}</span>\n          <Select className=\"select\" value={distance} onChange={(value) => setData('distance', value)}>\n            { _.map(courseCategories[racecourse][ground], (value: string, key: number) => (\n              <Option value={key}>{key}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  render() {\n    const strategyComponent = this.getStrategyComponent();\n    const groundStatusComponent = this.getGroundStatusComponent();\n    const racecourseComponent = this.getRacecourseComponent();\n    const groundComponent = this.getGroundComponent();\n    const distanceComponent = this.getDistanceComponent();\n\n    return (\n      <Row gutter={[8, 8]}>\n        {strategyComponent}\n        {groundStatusComponent}\n        {racecourseComponent}\n        {groundComponent}\n        {distanceComponent}\n      </Row>\n    );\n  }\n}\n\nexport default CourseData;\n","import _ from 'lodash';\nimport { Row, Col, Select } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../common';\n\nimport './simulator.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: string },\n\n}\n\ninterface IState {\n}\n\nclass HorseProperRate extends Component<IProps, IState> {\n  static readonly properRateTypes = {\n    GroundType: ['GroundTypeTurf', 'GroundTypeDirt'],\n    DistanceType: ['DistanceTypeShort', 'DistanceTypeMile', 'DistanceTypeMiddle', 'DistanceTypeLong'],\n    RunningStyle: ['RunningStyleNige', 'RunningStyleSenko', 'RunningStyleSashi', 'RunningStyleOikomi'],\n  };\n\n  static readonly properRate = {\n    G: '1',\n    F: '2',\n    E: '3',\n    D: '4',\n    C: '5',\n    B: '6',\n    A: '7',\n    S: '8',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        { _.map(HorseProperRate.properRateTypes, (properTypes, properName) => (\n          <>\n            <Row gutter={[8, 8]}><Col span={24}>{localization.site[properName]}</Col></Row>\n            <Row gutter={[8, 8]}>\n              { _.map(properTypes, (properRateType) => {\n                const camelProperRateType = _.camelCase(properRateType);\n                return (\n                  <Col span={4}>\n                    <div className=\"flex\">\n                      <span className=\"select-label\">{`${localization.site[properRateType]}:`}</span>\n                      <Select className=\"select\" value={state[camelProperRateType]} onChange={(value) => setData(camelProperRateType, value)}>\n                        { _.map(HorseProperRate.properRate, (value, key) => (\n                          <Select.Option value={value}>{localization.site[key]}</Select.Option>\n                        ))}\n                      </Select>\n                    </div>\n                  </Col>\n                );\n              })}\n            </Row>\n          </>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default HorseProperRate;\n","import _ from 'lodash';\nimport { InputNumber, Row, Col } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../common';\n\nimport './simulator.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: number },\n}\n\ninterface IState {\n}\n\nclass HorseStatData extends Component<IProps, IState> {\n  static readonly stats = {\n    speed: 'Speed',\n    stamina: 'Stamina',\n    pow: 'Power',\n    guts: 'Guts',\n    wiz: 'Wiz',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <Row gutter={[8, 8]}>\n        { _.map(HorseStatData.stats, (value, key) => (\n          <Col span={4}>\n            <div className=\"flex\">\n              <span className=\"select-label\">{`${localization.site[value]}:`}</span>\n              <InputNumber className=\"select\" value={state[key]} min={1} max={1200} onChange={(data) => setData(key, data)} />\n            </div>\n          </Col>\n        ))}\n      </Row>\n    );\n  }\n}\n\nexport default HorseStatData;\n","export enum ResultFlag {\n  FullLastSpurt,\n}\n\nclass Common {\n}\n\nexport default Common;\n","import React, { Component } from 'react';\n\nimport { LocalizationData } from '../../common';\nimport HorseProperRate from './horse-proper-rate';\nimport HorseStatData from './horse-stat-data';\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: any,\n}\n\ninterface IState {\n}\n\nclass HorseData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        <HorseStatData localization={localization} setData={setData} state={state} />\n        <HorseProperRate localization={localization} setData={setData} state={state} />\n      </>\n    );\n  }\n}\n\nexport default HorseData;\n","import {\n  RunningStyle, CoursePhase, GroundType, GroundStatus,\n} from '../../common';\n\nconst constant = {\n  baseDistance: 2000,\n  minSpeed: {\n    minSpeedRate: 0.85,\n    minSpeedGutsCoefSqrt: 200,\n    minSpeedGutsCoef: 0.001,\n  },\n  startDash: {\n    targetSpeedCoefficient: 0.85,\n    startAccelAdd: 24,\n  },\n  targetSpeed: {\n    baseTargetSpeedRandomMinusVal1: -0.0065,\n    baseTargetSpeedRandomMinusVal2: 5500,\n    baseTargetSpeedRandomPlusVal1: 5500,\n    baseTargetSpeedRandomLogCoefficient: 0.1,\n    baseTargetSpeedRandomCoefficient: 0.01,\n    targetSpeedCoefficient: {\n      [RunningStyle.Nige]: {\n        [CoursePhase.Start]: 1,\n        [CoursePhase.Middle]: 0.98,\n        [CoursePhase.End]: 0.98,\n        [CoursePhase.LastSpurt]: 0.98,\n      },\n      [RunningStyle.Senko]: {\n        [CoursePhase.Start]: 0.978,\n        [CoursePhase.Middle]: 0.991,\n        [CoursePhase.End]: 0.975,\n        [CoursePhase.LastSpurt]: 0.975,\n      },\n      [RunningStyle.Sashi]: {\n        [CoursePhase.Start]: 0.938,\n        [CoursePhase.Middle]: 0.998,\n        [CoursePhase.End]: 0.994,\n        [CoursePhase.LastSpurt]: 0.994,\n      },\n      [RunningStyle.Oikomi]: {\n        [CoursePhase.Start]: 0.931,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 1,\n        [CoursePhase.LastSpurt]: 1,\n      },\n    },\n    phaseEndBaseTargetSpeedCoef: 500,\n    addSpeedParamCoef: 0.002,\n    baseTargetSpeedCoef: 1.05,\n    lastSpurtBaseTargetSpeedAddCoef: 0.01,\n    lastSpurtTargetSpeedCoefSqrt: 500,\n    upSlopeAddSpeedVal1: 200,\n    downSlopeAddSpeedVal1: 0.3,\n    downSlopeAddSpeedVal2: 10,\n    firstBlockSlowStyles: [RunningStyle.Sashi, RunningStyle.Oikomi],\n    lastSpurtTargetSpeedStep: 0.1,\n  },\n  accel: {\n    accelPhaseCoef: {\n      [RunningStyle.Nige]: {\n        [CoursePhase.Start]: 1,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.996,\n        [CoursePhase.LastSpurt]: 0.996,\n      },\n      [RunningStyle.Senko]: {\n        [CoursePhase.Start]: 0.985,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.996,\n        [CoursePhase.LastSpurt]: 0.996,\n      },\n      [RunningStyle.Sashi]: {\n        [CoursePhase.Start]: 0.975,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 1,\n        [CoursePhase.LastSpurt]: 1,\n      },\n      [RunningStyle.Oikomi]: {\n        [CoursePhase.Start]: 0.945,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.997,\n        [CoursePhase.LastSpurt]: 0.997,\n      },\n    },\n    accelPowCoef: 0.0006,\n    accelPowCoefUpSlope: 0.0004,\n    accelPowCoefSqrt: 500,\n    startAccelAdd: 24,\n    accelDecreaseCoef: {\n      [CoursePhase.Start]: -1.2,\n      [CoursePhase.Middle]: -0.8,\n      [CoursePhase.End]: 1.2,\n      [CoursePhase.LastSpurt]: 1.2,\n    },\n    accelDecreaseZeroHpCoef: -1.2,\n  },\n  hp: {\n    hpInitialVal1: 0.8,\n    hpMaxCoef: {\n      [RunningStyle.Nige]: 0.95,\n      [RunningStyle.Senko]: 0.89,\n      [RunningStyle.Sashi]: 1.0,\n      [RunningStyle.Oikomi]: 0.995,\n    },\n    hpDecBase: 20,\n    hpDecRateBaseNormal: 1,\n    hpDecRateBaseTemptation: 1.6,\n    hpDecRateBasePositionKeepPaseDown: 0.6,\n    hpDecRateMultiplyDownSlopeAccelMode: 0.4,\n    speedGapParam1: 12,\n    speedGapParam1Pow: 144,\n    groundModifierMultiHpSub: {\n      [GroundType.Turf]: {\n        [GroundStatus.Good]: 1,\n        [GroundStatus.SlightlyHeavy]: 1,\n        [GroundStatus.Heavy]: 1.02,\n        [GroundStatus.Bad]: 1.02,\n      },\n      [GroundType.Dirt]: {\n        [GroundStatus.Good]: 1,\n        [GroundStatus.SlightlyHeavy]: 1,\n        [GroundStatus.Heavy]: 1.01,\n        [GroundStatus.Bad]: 1.02,\n      },\n    },\n    hpGutsBase: 1,\n    hpGutsCoef: 200,\n    hpGutsCoefSqrt: 600,\n  },\n  course: {\n    distanceTargetSpeedCoefficient: 0.001,\n    blockPortion: 1 / 24,\n    distanceShort: { min: 0, max: 1400 },\n    distanceMile: { min: 1401, max: 1800 },\n    distanceMiddle: { min: 1801, max: 2400 },\n    distanceLong: { min: 2401, max: Number.MAX_VALUE },\n    startSpeed: 3,\n    phaseStart: 1 / 6,\n    phaseMiddle: 4 / 6,\n    phaseEnd: 5 / 6,\n    positionSense: 10 / 24,\n    frameTime: 1 / 15,\n    gateTimeRange: { min: 0, max: 0.1 },\n    finishTimeCoef: 1.18,\n  },\n  lastSpurt: {\n    determineRateBase: 0.15,\n    determineRateWizMultiplier: 0.0005,\n    targetDistanceFromGoal: 60,\n  },\n  slope: {\n    downSlopeAccelModeChanceBase: 0.0004,\n    downSlopeEndChance: 0.2,\n  },\n};\n\nexport default constant;\n","import _ from 'lodash';\nimport nr from 'newton-raphson-method';\nimport util from 'util';\n\nimport constant from './constant';\nimport Course from './course';\nimport Horse, { HorseStat } from './horse';\n\nimport distanceProperRateJson from '../../db/proper_rate/distance.json';\nimport groundProperRateJson from '../../db/proper_rate/ground.json';\nimport runningStyleProperRateJson from '../../db/proper_rate/running_style.json';\nimport { ResultFlag } from './common';\nimport { RunningStyle, CoursePhase } from '../../common';\n\nconst distanceProperRate = distanceProperRateJson as { [key: string]: { speed: number, power: number } };\nconst groundProperRate = groundProperRateJson as { [key: string]: number };\nconst runningStyleProperRate = runningStyleProperRateJson as { [key: string]: number };\n\nenum BreakPoint {\n  Goal = '0000',\n\n  FinishFirstBlock = '1000',\n  FinishPhaseStart = '1010',\n  FinishPhaseMiddle = '1020',\n  FinishPhaseEnd = '1030',\n  FinishPhaseLastSpurt = '1040',\n\n  LastSpurt = '2000',\n  PositionSense = '2010',\n  Skill = '2020',\n  DownSlopeAccelMode = '2030',\n  ZeroHp = '2040',\n\n  FinishBlock = '3000',\n  Slope = '3010',\n\n  None = '9999',\n}\n\ninterface BreakPointData {\n  distance?: number,\n  time?: number,\n  parameters?: any\n}\n\ninterface BreakPointSet {\n  [BreakPoint.FinishFirstBlock]?: BreakPointData,\n  [BreakPoint.FinishPhaseStart]?: BreakPointData,\n  [BreakPoint.FinishPhaseMiddle]?: BreakPointData,\n  [BreakPoint.FinishPhaseEnd]?: BreakPointData,\n  [BreakPoint.FinishPhaseLastSpurt]?: BreakPointData,\n\n  [BreakPoint.LastSpurt]?: BreakPointData,\n  [BreakPoint.PositionSense]?: BreakPointData,\n  [BreakPoint.Skill]?: BreakPointData[],\n  [BreakPoint.DownSlopeAccelMode]?: BreakPointData,\n  [BreakPoint.ZeroHp]?: BreakPointData,\n\n  [BreakPoint.FinishBlock]?: BreakPointData,\n  [BreakPoint.Slope]?: BreakPointData[],\n\n  [BreakPoint.Goal]?: BreakPointData,\n\n  [BreakPoint.None]?: BreakPointData,\n}\n\nenum Mode {\n  StartDash,\n  FirstBlock,\n  LastSpurt,\n  UpSlope,\n  DownSlopeAccel,\n  Temptation,\n  PositionKeepPaceDown,\n  ZeroHp,\n}\n\ninterface LastSpurtCandidate {\n  time: number,\n  targetSpeed: number,\n  lastSpurtDistance: number,\n}\n\nclass RaceHorse {\n  private _course: Course;\n\n  private _horse: Horse;\n\n  private _runningStyle: RunningStyle;\n\n  private _speedWizRandomRange: [number, number] = [0, 0];\n\n  private _speedWizRandom: number = 0;\n\n  private _phase: CoursePhase = CoursePhase.Start;\n\n  private _mode: Set<Mode> = new Set<Mode>();\n\n  private _speed: number = 0;\n\n  private _lastSpurtTargetSpeed: number = 0;\n\n  private _hp: number = 0;\n\n  private _distance: number = 0;\n\n  private _time: number = 0;\n\n  private _breakPoints: BreakPointSet = {};\n\n  private _startDashTargetSpeed: number | undefined = undefined;\n\n  private _slopePer: number = 0;\n\n  resultFlag: Set<ResultFlag> = new Set<ResultFlag>();\n\n  constructor({ horse, runningStyle, course }: {\n    horse: Horse,\n    runningStyle: RunningStyle,\n    course: Course,\n  }) {\n    this._horse = horse;\n    this._course = course;\n    this._runningStyle = runningStyle;\n\n    const upperBound = (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\n    const lowerBound = constant.targetSpeed.baseTargetSpeedRandomMinusVal1\n      + (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\n    this._speedWizRandomRange = [lowerBound, upperBound];\n    this.refreshSpeedRandomValue();\n  }\n\n  get maxHp(): number {\n    return this._course.distance + this.stat.stamina * constant.hp.hpMaxCoef[this._runningStyle] * constant.hp.hpInitialVal1;\n  }\n\n  get hp(): number {\n    return this._hp;\n  }\n\n  get time(): number {\n    return this._time;\n  }\n\n  private get lastSpurtDetermineRate(): number {\n    return constant.lastSpurt.determineRateBase + constant.lastSpurt.determineRateWizMultiplier * this.stat.wiz;\n  }\n\n  private get stat(): HorseStat {\n    return {\n      speed: this._horse.stat.speed,\n      stamina: this._horse.stat.stamina,\n      pow: this._horse.stat.pow,\n      guts: this._horse.stat.guts,\n      wiz: this._horse.stat.wiz,\n    };\n  }\n\n  private get minSpeed(): number {\n    return this._course.baseTargetSpeed * constant.minSpeed.minSpeedRate\n      + Math.sqrt(this.stat.guts * constant.minSpeed.minSpeedGutsCoefSqrt) * constant.minSpeed.minSpeedGutsCoef;\n  }\n\n  private get startDashTargetSpeed(): number {\n    if (this._startDashTargetSpeed === undefined) {\n      this._startDashTargetSpeed = Math.max(this._course.baseTargetSpeed * constant.startDash.targetSpeedCoefficient, this.minSpeed);\n    }\n    return this._startDashTargetSpeed;\n  }\n\n  private get baseTargetSpeed(): number {\n    return this._course.baseTargetSpeed * constant.targetSpeed.targetSpeedCoefficient[this._runningStyle][this._phase];\n  }\n\n  private get baseTargetSpeedRandom(): number {\n    return this.baseTargetSpeed * this._speedWizRandom;\n  }\n\n  private get phaseEndTargetSpeedAddition(): number {\n    return Math.sqrt(constant.targetSpeed.phaseEndBaseTargetSpeedCoef * this.stat.speed)\n      * constant.targetSpeed.addSpeedParamCoef * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].speed;\n  }\n\n  private get maxLastSpurtTargetSpeed(): number {\n    return Math.max(\n      (this.baseTargetSpeed + this.phaseEndTargetSpeedAddition + constant.targetSpeed.lastSpurtBaseTargetSpeedAddCoef * this._course.baseTargetSpeed)\n          * constant.targetSpeed.baseTargetSpeedCoef\n        + this.phaseEndTargetSpeedAddition,\n      this.minSpeed,\n    );\n  }\n\n  private get lastSpurtTargetSpeed(): number {\n    return this._lastSpurtTargetSpeed;\n  }\n\n  private get realTargetSpeed(): number {\n    if (this._mode.has(Mode.StartDash) || this._mode.has(Mode.FirstBlock)) {\n      return this.startDashTargetSpeed;\n    }\n    if (this._mode.has(Mode.LastSpurt)) {\n      return this.lastSpurtTargetSpeed;\n    }\n\n    const slopePer = this._slopePer;\n    let slopeAdd = 0;\n    if (slopePer >= 1) {\n      slopeAdd = -slopePer * constant.targetSpeed.upSlopeAddSpeedVal1 / this.stat.pow;\n    } else if (slopePer <= -1 && this._mode.has(Mode.DownSlopeAccel)) {\n      slopeAdd = constant.targetSpeed.downSlopeAddSpeedVal1 + Math.abs(slopePer) / constant.targetSpeed.downSlopeAddSpeedVal2;\n    }\n    return this.baseTargetSpeed + this.baseTargetSpeedRandom + slopeAdd\n      + (this._phase >= 2 ? this.phaseEndTargetSpeedAddition : 0);\n  }\n\n  get targetSpeed(): number {\n    if (this._mode.has(Mode.ZeroHp)) {\n      return this.minSpeed;\n    }\n    return Math.max(this.minSpeed, this.realTargetSpeed);\n  }\n\n  refreshSpeedRandomValue(): void {\n    this._speedWizRandom = _.random(...this._speedWizRandomRange, true);\n  }\n\n  private get baseAccel(): number {\n    return constant.accel.accelPhaseCoef[this._runningStyle][this._phase]\n      * Math.sqrt(this.stat.pow * constant.accel.accelPowCoefSqrt)\n      * groundProperRate[this._horse.properRate.groundType[this._course.groundType]]\n      * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].power;\n  }\n\n  get accel(): number {\n    if (this._mode.has(Mode.ZeroHp)) {\n      return constant.accel.accelDecreaseZeroHpCoef;\n    }\n\n    if (this._speed <= this.targetSpeed) {\n      return (this._mode.has(Mode.StartDash) ? constant.accel.startAccelAdd : 0)\n        + this.baseAccel * (this._mode.has(Mode.UpSlope) ? constant.accel.accelPowCoefUpSlope : constant.accel.accelPowCoef);\n    }\n    return constant.accel.accelDecreaseCoef[this._phase];\n  }\n\n  private get phaseEndHpDecreaseRate() {\n    return constant.hp.hpGutsBase + constant.hp.hpGutsCoef / Math.sqrt(constant.hp.hpGutsCoefSqrt * this.stat.guts);\n  }\n\n  private get modeHpDecreaseRate() {\n    if (this._mode.has(Mode.Temptation)) {\n      return constant.hp.hpDecRateBaseTemptation;\n    }\n    if (this._mode.has(Mode.PositionKeepPaceDown)) {\n      return constant.hp.hpDecRateBasePositionKeepPaseDown;\n    }\n    return constant.hp.hpDecRateBaseNormal;\n  }\n\n  get hpDecreaseRate(): number {\n    return constant.hp.hpDecBase * constant.hp.groundModifierMultiHpSub[this._course.groundType][this._course.groundStatus]\n      * (this._phase >= CoursePhase.End ? this.phaseEndHpDecreaseRate : 1)\n      * this.modeHpDecreaseRate\n      * (this._mode.has(Mode.DownSlopeAccel) ? constant.hp.hpDecRateMultiplyDownSlopeAccelMode : 1);\n  }\n\n  get minBreakpoint(): { breakPoint: BreakPoint, distance: number, parameters: any } {\n    let minKey: BreakPoint = BreakPoint.None;\n    let minDistance: number = Number.MAX_VALUE;\n    let minParameters: any;\n    for (const [key, value] of Object.entries(this._breakPoints)) {\n      let targetValue: BreakPointData;\n      if (Array.isArray(value)) {\n        targetValue = value[value.length - 1];\n      } else {\n        targetValue = value;\n      }\n\n      if (targetValue.distance !== undefined) {\n        if (targetValue.distance < minDistance) {\n          minDistance = targetValue.distance;\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        } else if (targetValue.distance === minDistance && key < minKey) {\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        }\n      } else if (targetValue.time !== undefined) {\n        const distance = this._distance + (targetValue.time - this._time) * this._speed;\n        if (distance < minDistance) {\n          minDistance = distance;\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        } else if (targetValue.distance === minDistance && key < minKey) {\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        }\n      }\n    }\n    return { breakPoint: minKey, distance: minDistance, parameters: minParameters };\n  }\n\n  private static getAccelHpDecrease({\n    initialSpeed, accel, time, hpDecreaseRate, baseTargetSpeed,\n  }: {\n    initialSpeed: number, accel: number, time: number, hpDecreaseRate: number, baseTargetSpeed: number,\n  }): number {\n    const speedCoefficient = (initialSpeed - baseTargetSpeed + constant.hp.speedGapParam1);\n    return hpDecreaseRate\n      * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\n      / constant.hp.speedGapParam1Pow;\n  }\n\n  private static getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }: { speed: number, hpDecreaseRate: number, baseTargetSpeed: number }) {\n    return hpDecreaseRate * (speed - baseTargetSpeed + constant.hp.speedGapParam1) ** 2 / constant.hp.speedGapParam1Pow;\n  }\n\n  private static getRunHpDecrease({\n    speed, hpDecreaseRate, baseTargetSpeed, time,\n  }: {\n    speed: number, hpDecreaseRate: number, baseTargetSpeed: number, time: number,\n  }): number {\n    return RaceHorse.getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }) * time;\n  }\n\n  private static accelToTargetSpeed({\n    accel, currentSpeed, targetSpeed, maxDistance, hpDecreaseRate, baseTargetSpeed,\n  }: {\n    accel: number,\n    currentSpeed: number,\n    targetSpeed: number,\n    maxDistance: number,\n    hpDecreaseRate: number,\n    baseTargetSpeed: number\n  }) {\n    const targetSpeedByDistanceSquare = currentSpeed ** 2 + 2 * accel * maxDistance;\n    const finalSpeed = accel > 0\n      ? Math.min(targetSpeed, Math.sqrt(targetSpeedByDistanceSquare))\n      : Math.max(targetSpeed, Math.sqrt(Math.max(targetSpeedByDistanceSquare, 0)));\n    const time = (finalSpeed - currentSpeed) / accel;\n    const distance = (currentSpeed + currentSpeed + accel * time) * time / 2;\n    const hpCost = RaceHorse.getAccelHpDecrease({\n      initialSpeed: currentSpeed,\n      accel,\n      time,\n      hpDecreaseRate,\n      baseTargetSpeed,\n    });\n    return {\n      time, distance, hpCost, finalSpeed,\n    };\n  }\n\n  private doGateOpen(): void {\n    this._time += Math.floor(_.random(constant.course.gateTimeRange.min, constant.course.gateTimeRange.max, true) / constant.course.frameTime)\n      * constant.course.frameTime;\n    this._mode.add(Mode.StartDash);\n    this._breakPoints[BreakPoint.FinishBlock] = { distance: this._course.blockDistance };\n    this._breakPoints[BreakPoint.Goal] = { distance: this._course.distance };\n  }\n\n  private finishStartDash(): void {\n    const { accel, targetSpeed } = this;\n    const {\n      time, distance, hpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: this._course.distance,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n    this._time += time;\n    this._distance += distance;\n    this._hp -= hpCost;\n    this._speed = finalSpeed;\n\n    this._mode.delete(Mode.StartDash);\n    if (this._runningStyle === RunningStyle.Sashi || this._runningStyle === RunningStyle.Oikomi) {\n      this._breakPoints[BreakPoint.FinishFirstBlock] = { distance: this._course.blockDistance };\n      this._mode.add(Mode.FirstBlock);\n    } else {\n      this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\n    }\n  }\n\n  private calculateAccelAndRun(distance: number) {\n    const { accel, targetSpeed } = this;\n    const {\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: distance - this._distance,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    const runDistance = (distance - this._distance - accelDistance);\n    const runTime = runDistance / finalSpeed;\n    const runHpCost = RaceHorse.getRunHpDecrease({\n      speed: finalSpeed,\n      time: runTime,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    return {\n      time: accelTime + runTime,\n      distance: accelDistance + runDistance,\n      hpCost: accelHpCost + runHpCost,\n      finalSpeed,\n    };\n  }\n\n  private doAccelAndRun(distance: number) {\n    const { accel, targetSpeed, hpDecreaseRate } = this;\n    const {\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: distance - this._distance,\n      hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    if (accelHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\n      /**\n       * Accel HP cost formula:\n       * hpDecrease = hpDecreaseRate * (accel^2 * time^3 / 3 + accel * time^2 * speedCoefficient + speedCoefficient^2 * time)/ 144\n       * speedCoefficient = initialSpeed - baseTargetSpeed + 12\n       * Given accel and initialSpeed, hpDecrease = this.hp is a cubic equation of time.\n       * It's hard to get a formula solution, but we can get a approximate value by applying Newton's Method.\n       */\n      const speedCoefficient = this._speed - this._course.baseTargetSpeed + constant.hp.speedGapParam1;\n      const realAccelTime = nr(\n        (time: number) => (\n          hpDecreaseRate * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\n        ),\n        (time: number) => (\n          hpDecreaseRate * (accel ** 2 * time ** 2 + accel * time * 2 * speedCoefficient + speedCoefficient ** 2)\n        ),\n        10,\n      );\n      const realAccelDistance = (this._speed + this._speed + accel * accelTime) * accelTime / 2;\n      this._time += realAccelTime;\n      this._distance += realAccelDistance;\n      this._hp = 0;\n      this._mode.add(Mode.ZeroHp);\n      delete this._breakPoints[BreakPoint.ZeroHp];\n      return false;\n    }\n\n    this._hp -= accelHpCost;\n    this._time += accelTime;\n    this._distance += accelDistance;\n    this._speed = finalSpeed;\n\n    const speedHpDecreaseRate = RaceHorse.getSpeedHpDecrease({\n      speed: this._speed,\n      hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n    const runDistance = distance - this._distance;\n    const runTime = runDistance / this._speed;\n    const runHpCost = speedHpDecreaseRate * runTime;\n\n    if (runHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\n      const realRunTime = this._hp / speedHpDecreaseRate;\n      const realRunDistance = realRunTime * this._speed;\n      this._time += realRunTime;\n      this._distance += realRunDistance;\n      this._hp = 0;\n      this._mode.add(Mode.ZeroHp);\n      delete this._breakPoints[BreakPoint.ZeroHp];\n      return false;\n    }\n\n    this._hp -= runHpCost;\n    this._time += runTime;\n    this._distance += runDistance;\n    if (!this._mode.has(Mode.ZeroHp)) {\n      this._breakPoints[BreakPoint.ZeroHp] = { distance: this._distance + this.hp / speedHpDecreaseRate * this._speed };\n    }\n    return true;\n  }\n\n  private finishFirstBlock = () => {\n    this._mode.delete(Mode.FirstBlock);\n    this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\n  };\n\n  private finishBlock = () => {\n    if (!this._mode.has(Mode.LastSpurt) && this._course.distance > this._distance) {\n      this.refreshSpeedRandomValue();\n      this._breakPoints[BreakPoint.FinishBlock] = { distance: this._distance + this._course.blockDistance };\n    }\n  };\n\n  private finishPhaseStart = () => {\n    this._phase = CoursePhase.Middle;\n    this._breakPoints[BreakPoint.FinishPhaseMiddle] = { distance: this._course.phaseMiddleDistance };\n  };\n\n  private static randomByCandidates(lastSpurtSpeedCandidates: LastSpurtCandidate[], determineRate: number): LastSpurtCandidate {\n    const randomNumber = Math.random();\n    const targetItem = Math.min(\n      lastSpurtSpeedCandidates.length - 1,\n      Math.floor(Math.log(randomNumber) / Math.log(1 - determineRate)),\n    );\n    return lastSpurtSpeedCandidates[targetItem];\n  }\n\n  private calculateLastSpurt = (): { lastSpurtDistance: number, lastSpurtTargetSpeed: number } => {\n    this._mode.add(Mode.LastSpurt);\n    this._lastSpurtTargetSpeed = this.maxLastSpurtTargetSpeed;\n    const { hpCost, finalSpeed } = this.calculateAccelAndRun(this._course.distance - constant.lastSpurt.targetDistanceFromGoal);\n    this._mode.delete(Mode.LastSpurt);\n    if (hpCost <= this._hp && finalSpeed === this._lastSpurtTargetSpeed) {\n      this.resultFlag.add(ResultFlag.FullLastSpurt);\n      return {\n        lastSpurtDistance: this._distance,\n        lastSpurtTargetSpeed: finalSpeed,\n      };\n    }\n\n    let lastSpurtSpeedCandidates: LastSpurtCandidate[] = [];\n    const phaseEndBaseTargetSpeed = this.baseTargetSpeed + this.phaseEndTargetSpeedAddition;\n    const maxDistance = this._course.distance - this._distance - constant.lastSpurt.targetDistanceFromGoal;\n    const { accel, hpDecreaseRate } = this;\n    const { baseTargetSpeed } = this._course;\n    for (; this.lastSpurtTargetSpeed >= phaseEndBaseTargetSpeed; this._lastSpurtTargetSpeed -= constant.targetSpeed.lastSpurtTargetSpeedStep) {\n      const {\n        time: phaseEndAccelTime,\n        distance: phaseEndAccelDistance,\n        hpCost: phaseEndAccelHpCost,\n        finalSpeed: phaseEndFinalSpeed,\n      } = RaceHorse.accelToTargetSpeed({\n        accel,\n        currentSpeed: this._speed,\n        targetSpeed: phaseEndBaseTargetSpeed,\n        maxDistance,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const {\n        time: lastSpurtAccelTime,\n        distance: lastSpurtAccelDistance,\n        hpCost: lastSpurtAccelHpCost,\n      } = RaceHorse.accelToTargetSpeed({\n        accel,\n        currentSpeed: phaseEndFinalSpeed,\n        targetSpeed: this.lastSpurtTargetSpeed,\n        maxDistance: maxDistance - phaseEndAccelDistance,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const runDistance = maxDistance - phaseEndAccelDistance - lastSpurtAccelDistance;\n      const phaseEndRunTime = runDistance / phaseEndBaseTargetSpeed;\n      const phaseEndRunHpCost = RaceHorse.getRunHpDecrease({\n        speed: phaseEndBaseTargetSpeed,\n        time: phaseEndRunTime,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const lastSpurtRunTime = runDistance / this.lastSpurtTargetSpeed;\n      const lastSpurtRunHpCost = RaceHorse.getRunHpDecrease({\n        speed: this.lastSpurtTargetSpeed,\n        time: lastSpurtRunTime,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n\n      if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + lastSpurtRunHpCost) {\n        lastSpurtSpeedCandidates.push({\n          lastSpurtDistance: this._distance,\n          targetSpeed: this.lastSpurtTargetSpeed,\n          time: phaseEndAccelTime + lastSpurtAccelTime + lastSpurtRunTime,\n        });\n      } else if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost) {\n        const hpLeft = this.hp - (phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost);\n        const hpDiff = lastSpurtRunHpCost - phaseEndRunHpCost;\n        lastSpurtSpeedCandidates.push({\n          lastSpurtDistance: this._distance + phaseEndAccelDistance + runDistance * (1 - hpLeft / hpDiff),\n          targetSpeed: this.lastSpurtTargetSpeed,\n          time: phaseEndAccelTime + lastSpurtAccelTime + (hpLeft / hpDiff) * lastSpurtRunTime + (1 - hpLeft / hpDiff) * phaseEndRunTime,\n        });\n      }\n    }\n    lastSpurtSpeedCandidates.push({\n      lastSpurtDistance: Number.MAX_VALUE,\n      targetSpeed: phaseEndBaseTargetSpeed,\n      time: Number.MAX_VALUE,\n    });\n    lastSpurtSpeedCandidates = _.sortBy(lastSpurtSpeedCandidates, ['time']);\n    const candidate = RaceHorse.randomByCandidates(lastSpurtSpeedCandidates, this.lastSpurtDetermineRate);\n    return {\n      lastSpurtDistance: candidate.lastSpurtDistance,\n      lastSpurtTargetSpeed: candidate.targetSpeed,\n    };\n  };\n\n  private finishPhaseMiddle = () => {\n    this._phase = CoursePhase.End;\n    const { lastSpurtDistance, lastSpurtTargetSpeed } = this.calculateLastSpurt();\n    this._breakPoints[BreakPoint.FinishPhaseEnd] = { distance: this._course.phaseEndDistance };\n    this._breakPoints[BreakPoint.LastSpurt] = { distance: lastSpurtDistance };\n    this._lastSpurtTargetSpeed = lastSpurtTargetSpeed;\n  };\n\n  private finishPhaseEnd = () => {\n    this._phase = CoursePhase.LastSpurt;\n    this._breakPoints[BreakPoint.FinishPhaseLastSpurt] = { distance: this._course.distance };\n  };\n\n  private doLastSpurt = () => {\n    this._mode.add(Mode.LastSpurt);\n    delete this._breakPoints[BreakPoint.FinishBlock];\n  };\n\n  private finishLastSpurt = () => {};\n\n  private triggerPositionSense = () => {};\n\n  private zeroHp = () => {\n    if (this.hp <= 0) {\n      this._mode.add(Mode.ZeroHp);\n    }\n  };\n\n  private changeSlope = ({ slopePer }: { slopePer: number }) => {\n    if (this._slopePer > -1 && slopePer <= -1) {\n      if (Math.random() <= this.stat.wiz * constant.slope.downSlopeAccelModeChanceBase) {\n        this._mode.add(Mode.DownSlopeAccel);\n        this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\n      }\n    }\n    this._slopePer = slopePer;\n    if (slopePer > -1 && this._mode.has(Mode.DownSlopeAccel)) {\n      this._mode.delete(Mode.DownSlopeAccel);\n      delete this._breakPoints[BreakPoint.DownSlopeAccelMode];\n    }\n  };\n\n  private checkDownSlopeAccelMode = () => {\n    if (Math.random() <= constant.slope.downSlopeEndChance) {\n      this._mode.delete(Mode.DownSlopeAccel);\n    } else {\n      this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\n    }\n  };\n\n  private triggerSkill = () => {};\n\n  private reachGoal = () => {\n    this._breakPoints = {};\n  };\n\n  private readonly breakPointMap: { [key in BreakPoint]: (parameters: any) => void } = {\n    [BreakPoint.None]: () => {},\n    [BreakPoint.FinishFirstBlock]: this.finishFirstBlock,\n    [BreakPoint.FinishBlock]: this.finishBlock,\n    [BreakPoint.FinishPhaseStart]: this.finishPhaseStart,\n    [BreakPoint.FinishPhaseMiddle]: this.finishPhaseMiddle,\n    [BreakPoint.FinishPhaseEnd]: this.finishPhaseEnd,\n    [BreakPoint.LastSpurt]: this.doLastSpurt,\n    [BreakPoint.FinishPhaseLastSpurt]: this.finishLastSpurt,\n    [BreakPoint.PositionSense]: this.triggerPositionSense,\n    [BreakPoint.ZeroHp]: this.zeroHp,\n    [BreakPoint.Slope]: this.changeSlope,\n    [BreakPoint.DownSlopeAccelMode]: this.checkDownSlopeAccelMode,\n    [BreakPoint.Skill]: this.triggerSkill,\n    [BreakPoint.Goal]: this.reachGoal,\n  };\n\n  buildSlopeBreakPoints() {\n    const slopePers = this._course.allSlopePers;\n    for (let i = slopePers.length - 1; i > 0; i -= 1) {\n      this.addBreakPoint(BreakPoint.Slope, {\n        distance: slopePers[i].distance,\n        parameters: {\n          slopePer: slopePers[i].slope_per,\n        },\n      });\n    }\n  }\n\n  addBreakPoint(type: BreakPoint, data: BreakPointData) {\n    switch (type) {\n      case BreakPoint.Skill:\n      case BreakPoint.Slope:\n        if (!(type in this._breakPoints)) {\n          this._breakPoints[type] = [data];\n        } else {\n          this._breakPoints[type]?.push(data);\n        }\n        break;\n      default:\n        this._breakPoints[type] = data;\n        break;\n    }\n  }\n\n  removeBreakPoint(type: BreakPoint) {\n    switch (type) {\n      case BreakPoint.Skill:\n      case BreakPoint.Slope:\n        this._breakPoints[type]?.pop();\n        if (this._breakPoints[type]?.length === 0) {\n          delete this._breakPoints[type];\n        }\n        break;\n      default:\n        delete this._breakPoints[type];\n        break;\n    }\n  }\n\n  simulate() {\n    this._speed = constant.course.startSpeed;\n    this._time = 0;\n    this._distance = 0;\n    this._hp = this.maxHp;\n    this._mode = new Set();\n    this._phase = CoursePhase.Start;\n    this._breakPoints = {};\n\n    this.buildSlopeBreakPoints();\n    this.doGateOpen();\n    this.debugOutput();\n    this.finishStartDash();\n    this.debugOutput();\n\n    while (Object.keys(this._breakPoints).length > 0) {\n      const { breakPoint, distance, parameters } = this.minBreakpoint;\n      if (this.doAccelAndRun(distance)) {\n        this.removeBreakPoint(breakPoint);\n        this.breakPointMap[breakPoint](parameters);\n      }\n      this.debugOutput();\n    }\n  }\n\n  debugOutput() {\n    return;\n    const debugData = {\n      hp: this.hp,\n      speed: this._speed,\n      time: this._time,\n      distance: this._distance,\n      phase: this._phase,\n      mode: Array.from(this._mode),\n      breakPoints: util.inspect(this._breakPoints, { depth: null }),\n      slopePer: this._slopePer,\n    };\n    console.log(debugData);\n  }\n}\n\nexport default RaceHorse;\n","import React, { Component } from 'react';\n\nimport _ from 'lodash';\nimport Common, { CourseDataType, LocalizationData } from '../../common';\nimport { RaceResultData } from './common';\nimport constant from '../../library/race/constant';\nimport { ResultFlag } from '../../library/race/common';\n\nimport './simulator.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  raceResults: RaceResultData[];\n  course?: CourseDataType,\n}\n\ninterface IState {\n}\n\nclass RaceResult extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    const { localization, raceResults, course } = this.props;\n    if (course === undefined || raceResults.length === 0) {\n      return (\n        <>\n        </>\n      );\n    }\n\n    const timeAverage = _.meanBy(raceResults, 'time');\n    const timeShown: string = (timeAverage * constant.course.finishTimeCoef > parseFloat(course.finish_time_min) / 10000)\n      ? Common.secondToTime(timeAverage * constant.course.finishTimeCoef)\n      : localization.site.TimeMin;\n\n    let timeDeviationSum = 0;\n    let fullLastSpurtCount = 0;\n    let hpLeftSum = 0;\n    for (const result of raceResults) {\n      timeDeviationSum += (result.time - timeAverage) ** 2;\n      if (result.resultFlags.has(ResultFlag.FullLastSpurt)) {\n        fullLastSpurtCount += 1;\n      }\n      hpLeftSum += result.hpLeft;\n    }\n    return (\n      <table>\n        <tr>\n          <th>{localization.site.TimeAverage}</th>\n          <th>{localization.site.TimeStandardDeviation}</th>\n          <th>{localization.site.TimeShown}</th>\n          <th>{localization.site.FullLastSpurtRate}</th>\n          <th>{localization.site.HpLeftAverage}</th>\n        </tr>\n        <tr>\n          <td>{timeAverage.toFixed(3)}</td>\n          <td>{Math.sqrt(timeDeviationSum / raceResults.length).toFixed(3)}</td>\n          <td>{timeShown}</td>\n          <td>{(fullLastSpurtCount / raceResults.length).toLocaleString('en', { style: 'percent' })}</td>\n          <td>{(hpLeftSum / raceResults.length).toFixed(3)}</td>\n        </tr>\n      </table>\n    );\n  }\n}\n\nexport default RaceResult;\n","import {\n  DistanceType, ProperRate, GroundType, RunningStyle,\n} from '../../common';\n\nexport interface HorseStat {\n  speed: number;\n  stamina: number;\n  pow: number;\n  guts: number;\n  wiz: number;\n}\n\nexport interface HorseProperRate {\n  distanceType: { [key in DistanceType]: ProperRate },\n  groundType: { [key in GroundType]: ProperRate },\n  runningStyle: { [key in RunningStyle]: ProperRate },\n}\n\nclass Horse {\n  stat: HorseStat;\n\n  properRate: HorseProperRate;\n\n  constructor(\n    { stat, properRate }: {\n      stat: HorseStat,\n      properRate: HorseProperRate,\n    },\n  ) {\n    this.stat = stat;\n    this.properRate = properRate;\n  }\n}\n\nexport default Horse;\n","import constant from './constant';\nimport {\n  DistanceType, GroundType, GroundStatus, CourseDataType, TurnType,\n} from '../../common';\n\nclass Course {\n  private _courseData: CourseDataType;\n\n  groundStatus: GroundStatus;\n\n  static getDistanceType(distance: number): DistanceType {\n    if (distance >= constant.course.distanceShort.min && distance <= constant.course.distanceShort.max) {\n      return DistanceType.Short;\n    }\n    if (distance >= constant.course.distanceMile.min && distance <= constant.course.distanceMile.max) {\n      return DistanceType.Mile;\n    }\n    if (distance >= constant.course.distanceMiddle.min && distance <= constant.course.distanceMiddle.max) {\n      return DistanceType.Middle;\n    }\n    if (distance >= constant.course.distanceLong.min && distance <= constant.course.distanceLong.max) {\n      return DistanceType.Long;\n    }\n    return DistanceType.Long;\n  }\n\n  constructor({ courseData, groundStatus } : { courseData: CourseDataType, groundStatus: GroundStatus }) {\n    this._courseData = courseData;\n    this.groundStatus = groundStatus;\n  }\n\n  get distance(): number {\n    return this._courseData.distance;\n  }\n\n  get distanceType(): DistanceType {\n    return Course.getDistanceType(this.distance);\n  }\n\n  get groundType(): GroundType {\n    return this._courseData.ground;\n  }\n\n  get turnType(): TurnType {\n    return this._courseData.turn;\n  }\n\n  get blockDistance(): number {\n    return this.distance * constant.course.blockPortion;\n  }\n\n  get phaseStartDistance(): number {\n    return this.distance * constant.course.phaseStart;\n  }\n\n  get phaseMiddleDistance(): number {\n    return this.distance * constant.course.phaseMiddle;\n  }\n\n  get phaseEndDistance(): number {\n    return this.distance * constant.course.phaseEnd;\n  }\n\n  get positionSenseDistance(): number {\n    return this.distance * constant.course.positionSense;\n  }\n\n  get baseTargetSpeed(): number {\n    return 20 - (this.distance - constant.baseDistance) * constant.course.distanceTargetSpeedCoefficient;\n  }\n\n  get allSlopePers(): { distance: number, slope_per: number }[] {\n    return this._courseData.slope_per;\n  }\n}\n\nexport default Course;\n","import _ from 'lodash';\nimport {\n  Button, Col, InputNumber, Row, Progress,\n} from 'antd';\nimport React, { Component } from 'react';\nimport Promise from 'bluebird';\n\nimport {\n  CourseDataType, DistanceType, GroundStatus, GroundType, LocalizationData, RunningStyle,\n} from '../../common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate, RaceResultData,\n} from './common';\nimport Horse from '../../library/race/horse';\nimport Course from '../../library/race/course';\nimport RaceHorse from '../../library/race/race-horse';\n\nimport 'antd/dist/antd.css';\nimport './simulator.css';\n\ninterface SimulatorState extends IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n  strategy?: string,\n  groundStatus?: string,\n  racecourse?: string,\n  ground?: string,\n  distance?: number,\n  course?: CourseDataType,\n}\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: SimulatorState,\n}\n\ninterface IState {\n  running: boolean,\n  finished: number,\n  rounds: number,\n}\n\nclass SimulatorCalculator extends Component<IProps, IState> {\n  static readonly concurrency = 50;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      running: false,\n      rounds: 1000,\n      finished: 0,\n    };\n  }\n\n  calculate = async () => {\n    this.setState({\n      running: true,\n      finished: 0,\n    });\n    const { state, setData } = this.props;\n    const {\n      speed, stamina, pow, guts, wiz,\n      strategy, groundStatus, course,\n      groundTypeTurf, groundTypeDirt,\n      distanceTypeShort, distanceTypeMile, distanceTypeMiddle, distanceTypeLong,\n      runningStyleNige, runningStyleSenko, runningStyleSashi, runningStyleOikomi,\n    } = state;\n    const { rounds } = this.state;\n\n    const targetCourse = new Course({\n      courseData: course as CourseDataType,\n      groundStatus: groundStatus as GroundStatus,\n    });\n    const targetHorse = new Horse({\n      stat: {\n        speed, stamina, pow, guts, wiz,\n      },\n      properRate: {\n        groundType: {\n          [GroundType.Turf]: groundTypeTurf,\n          [GroundType.Dirt]: groundTypeDirt,\n        },\n        distanceType: {\n          [DistanceType.Short]: distanceTypeShort,\n          [DistanceType.Mile]: distanceTypeMile,\n          [DistanceType.Middle]: distanceTypeMiddle,\n          [DistanceType.Long]: distanceTypeLong,\n        },\n        runningStyle: {\n          [RunningStyle.Nige]: runningStyleNige,\n          [RunningStyle.Senko]: runningStyleSenko,\n          [RunningStyle.Sashi]: runningStyleSashi,\n          [RunningStyle.Oikomi]: runningStyleOikomi,\n        },\n      },\n    });\n\n    let counter = 0;\n    let started = 0;\n    const worksPerThread = Math.ceil(rounds / SimulatorCalculator.concurrency);\n    const raceResults: RaceResultData[] = [];\n    await Promise.map(\n      new Array(SimulatorCalculator.concurrency),\n      async () => {\n        const raceHorse = new RaceHorse({\n          horse: targetHorse, course: targetCourse, runningStyle: strategy as RunningStyle,\n        });\n        for (let i = 0; i < worksPerThread && started < rounds; i += 1) {\n          started += 1;\n          raceHorse.simulate();\n          raceResults.push({\n            time: raceHorse.time,\n            resultFlags: raceHorse.resultFlag,\n            hpLeft: raceHorse.hp > 0 ? raceHorse.hp : 0,\n            skills: {\n              normal: 0,\n              rare: 0,\n              unique: false,\n            },\n            temptation: {\n              triggered: false,\n              time: 0,\n            },\n          });\n          counter += 1;\n          this.setState({ finished: counter });\n          await Promise.delay(0);\n        }\n      },\n      { concurrency: SimulatorCalculator.concurrency },\n    );\n    this.setState({ running: false });\n    setData('raceResults', raceResults);\n  };\n\n  render() {\n    const { localization, state } = this.props;\n    const { course } = state;\n    const { finished, rounds, running } = this.state;\n    const progressPercent = _.round(finished / rounds * 100, 1);\n    return (\n      <Row gutter={[8, 8]}>\n        <Col span={4}>\n          <div className=\"flex\">\n            <span className=\"select-label\">{`${localization.site.SimulatorCalculateRounds}:`}</span>\n            <InputNumber\n              className=\"select\"\n              value={rounds}\n              min={1}\n              max={1000}\n              onChange={(value) => this.setState({ rounds: value })}\n            />\n            <Button\n              className=\"select-label\"\n              type=\"primary\"\n              disabled={course === undefined || running}\n              onClick={this.calculate}\n            >\n              {localization.site.SimulatorCalculate}\n            </Button>\n            { running ? <Progress className=\"select-label\" percent={progressPercent} /> : null }\n          </div>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default SimulatorCalculator;\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundStatus, GroundType, LocalizationData, ProperRate, RunningStyle,\n} from '../../common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate, RaceResultData,\n} from './common';\nimport CourseData from './course-data';\nimport HorseData from './horse-data';\nimport RaceResult from './race-result';\nimport SimulatorCalculator from './simulator-calculator';\n\nimport 'antd/dist/antd.css';\nimport './simulator.css';\nimport '../../app.css';\n\nimport courseJson from '../../db/course.json';\n\nconst courses = courseJson as { [key: string]: CourseDataType };\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\ninterface IProperRate extends IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n}\n\ninterface IState extends IHorseState, IProperRate {\n  strategy?: RunningStyle,\n  racecourse?: string,\n  ground?: GroundType,\n  distance?: number,\n  groundStatus?: GroundStatus,\n\n  course?: CourseDataType,\n  raceResults: RaceResultData[],\n}\n\nclass Simulator extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.loadCourseData();\n    this.state = {\n      speed: 1200,\n      stamina: 300,\n      pow: 1200,\n      guts: 300,\n      wiz: 300,\n\n      groundTypeTurf: ProperRate.A,\n      groundTypeDirt: ProperRate.A,\n\n      distanceTypeShort: ProperRate.A,\n      distanceTypeMile: ProperRate.A,\n      distanceTypeMiddle: ProperRate.A,\n      distanceTypeLong: ProperRate.A,\n\n      runningStyleNige: ProperRate.A,\n      runningStyleSenko: ProperRate.A,\n      runningStyleSashi: ProperRate.A,\n      runningStyleOikomi: ProperRate.A,\n\n      strategy: RunningStyle.Nige,\n      racecourse: '10001',\n      ground: GroundType.Turf,\n      distance: 1200,\n      groundStatus: GroundStatus.Good,\n      course: this.courseCategories['10001'][GroundType.Turf][1200],\n      raceResults: [],\n    };\n  }\n\n  updateCourse = () => {\n    const {\n      strategy, racecourse, ground, distance, groundStatus,\n    } = this.state;\n    if (racecourse === undefined || ground === undefined || distance === undefined || strategy === undefined || groundStatus === undefined) {\n      this.setState({ course: undefined });\n    } else {\n      this.setState({ course: this.courseCategories[racecourse][ground][distance] });\n    }\n  };\n\n  setData = (key: string, value: any): void => {\n    switch (key) {\n      case 'racecourse':\n        this.setState({\n          racecourse: value,\n          ground: undefined,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'ground':\n        this.setState({\n          ground: value as GroundType,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'distance':\n      case 'strategy':\n      case 'groundStatus':\n        this.setState<'distance' | 'strategy' | 'groundStatus'>({ [key]: value }, this.updateCourse);\n        break;\n      case 'speed':\n      case 'stamina':\n      case 'pow':\n      case 'guts':\n      case 'wiz':\n        this.setState({ [key]: value as number } as Pick<IHorseState, keyof IHorseState>);\n        break;\n      case 'raceResults':\n        this.setState({ raceResults: value });\n        break;\n      default:\n        this.setState({ [key]: value } as Pick<IProperRate, keyof IProperRate>);\n        break;\n    }\n  };\n\n  loadCourseData() {\n    for (const courseId of Object.keys(courses)) {\n      const course = courses[courseId];\n      if (!(course.race_track_id in this.courseCategories)) {\n        this.courseCategories[course.race_track_id] = {};\n      }\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\n        this.courseCategories[course.race_track_id][course.ground] = {};\n      }\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\n    }\n  }\n\n  render() {\n    const { localization } = this.props;\n    const { raceResults, course } = this.state;\n    return (\n      <div className=\"content\">\n        <HorseData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <CourseData\n          localization={localization}\n          courseCategories={this.courseCategories}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SimulatorCalculator\n          localization={localization}\n          state={this.state}\n          setData={this.setData}\n        />\n        <RaceResult localization={localization} raceResults={raceResults} course={course} />\n      </div>\n    );\n  }\n}\n\nexport default Simulator;\n","import React, { useState } from 'react';\n\ninterface Skill {\n    name: string,\n    need_skill_point: number | null,\n    description: string,\n    id: number,\n    rarity: number\n    grade_value: number,\n\n}\n\n    // group_id: number,\n    // group_rate: number,\n    // filter_switch: number,\n    // skill_category: number,\n    // tag_id: string,\n    // unique_skill_id_1: number,\n    // unique_skill_id_2: number,\n    // exp_type: number,\n    // potential_per_default: number,\n    // activate_lot: number,\n    // condition_1: string,\n    // float_ability_time_1: number,\n    // float_cooldown_time_1: number,\n    // ability_type_1_1: number,\n    // ability_value_usage_1_1: number,\n    // ability_value_level_usage_1_1: number,\n    // float_ability_value_1_1: number,\n    // target_type_1_1: number,\n    // target_value_1_1: number,\n    // ability_type_1_2: number,\n    // ability_value_usage_1_2: number,\n    // ability_value_level_usage_1_2: number,\n    // float_ability_value_1_2: number,\n    // target_type_1_2: number,\n    // target_value_1_2: number,\n    // ability_type_1_3: number,\n    // ability_value_usage_1_3: number,\n    // ability_value_level_usage_1_3: number,\n    // float_ability_value_1_3: number,\n    // target_type_1_3: number,\n    // target_value_1_3: number,\n    // condition_2: string,\n    // float_ability_time_2: number,\n    // float_cooldown_time_2: number,\n    // ability_type_2_1: number,\n    // ability_value_usage_2_1: number,\n    // ability_value_level_usage_2_1: number,\n    // float_ability_value_2_1: number,\n    // target_type_2_1: number,\n    // target_value_2_1: number,\n    // ability_type_2_2: number,\n    // ability_value_usage_2_2: number,\n    // ability_value_level_usage_2_2: number,\n    // float_ability_value_2_2:number,\n    // target_type_2_2: number,\n    // target_value_2_2: number,\n    // ability_type_2_3:number,\n    // ability_value_usage_2_3: number,\n    // ability_value_level_usage_2_3: number,\n    // float_ability_value_2_3: number,\n    // target_type_2_3: number,\n    // target_value_2_3: number,\n    // popularity_add_param_1: number,\n    // popularity_add_value_1: number,\n    // popularity_add_param_2: number,\n    // popularity_add_value_2: number,\n    // disp_order: number,\n    // icon_id: number\n\n\ninterface Props {\n  skill: Skill,\n}\n\nexport const SkillItem: React.FC<Props> = (props) => {\n\n  const [skill, setSkill] = useState(props.skill)\n\n  const grade_rate = () => {\n    return  (!skill.need_skill_point) ? skill.grade_value : (skill.grade_value / skill.need_skill_point).toFixed(2)\n  }\n\n\n  return (\n    <tr>\n      <td>{skill.id}</td>\n\n      <td>{skill.name}</td>\n      <td>{skill.description}</td>\n      <td>{skill.rarity}</td>\n      <td>{skill.need_skill_point}</td>\n      <td>{skill.grade_value}</td>\n      <td>{grade_rate()}</td>\n      \n    </tr>\n  )\n}\n","import React, { useState } from 'react';\n\nimport skill_data from '../../db/skill.json';\nimport { SkillItem } from './skill-item';\n\ninterface IProps {\n}\n\ninterface Skill {\n    name: string,\n    need_skill_point: number | null,\n    description: string,\n    id: number,\n    rarity: number,\n    grade_value: number,\n\n\n}\n\n    // group_id: number,\n    // group_rate: number,\n    // filter_switch: number,\n    // skill_category: number,\n    // tag_id: string,\n    // unique_skill_id_1: number,\n    // unique_skill_id_2: number,\n    // exp_type: number,\n    // potential_per_default: number,\n    // activate_lot: number,\n    // condition_1: string,\n    // float_ability_time_1: number,\n    // float_cooldown_time_1: number,\n    // ability_type_1_1: number,\n    // ability_value_usage_1_1: number,\n    // ability_value_level_usage_1_1: number,\n    // float_ability_value_1_1: number,\n    // target_type_1_1: number,\n    // target_value_1_1: number,\n    // ability_type_1_2: number,\n    // ability_value_usage_1_2: number,\n    // ability_value_level_usage_1_2: number,\n    // float_ability_value_1_2: number,\n    // target_type_1_2: number,\n    // target_value_1_2: number,\n    // ability_type_1_3: number,\n    // ability_value_usage_1_3: number,\n    // ability_value_level_usage_1_3: number,\n    // float_ability_value_1_3: number,\n    // target_type_1_3: number,\n    // target_value_1_3: number,\n    // condition_2: string,\n    // float_ability_time_2: number,\n    // float_cooldown_time_2: number,\n    // ability_type_2_1: number,\n    // ability_value_usage_2_1: number,\n    // ability_value_level_usage_2_1: number,\n    // float_ability_value_2_1: number,\n    // target_type_2_1: number,\n    // target_value_2_1: number,\n    // ability_type_2_2: number,\n    // ability_value_usage_2_2: number,\n    // ability_value_level_usage_2_2: number,\n    // float_ability_value_2_2:number,\n    // target_type_2_2: number,\n    // target_value_2_2: number,\n    // ability_type_2_3:number,\n    // ability_value_usage_2_3: number,\n    // ability_value_level_usage_2_3: number,\n    // float_ability_value_2_3: number,\n    // target_type_2_3: number,\n    // target_value_2_3: number,\n    // popularity_add_param_1: number,\n    // popularity_add_value_1: number,\n    // popularity_add_param_2: number,\n    // popularity_add_value_2: number,\n    // disp_order: number,\n    // icon_id: number\n\n\n\nfunction Skills(props: IProps) {\n  const [skills, setSkills] = useState(initSkills);\n  const [effectFilter, setEffectFilter] = useState([]);\n\n  function initSkills() {\n    const data = skill_data;\n    const skillArray: Skill[] = [];\n    data.forEach((skill) => {\n      skillArray.push({\n        \"name\": skill.name,\n        \"need_skill_point\": skill.need_skill_point,\n        \"description\": skill.description,\n        \"id\": skill.id,\n        \"rarity\": skill.rarity,\n        \"grade_value\": skill.grade_value,\n\n      });\n    });\n    return skillArray;\n  }\n\n  const options = () => '';\n\n  const skillTable = () => skills.map((skill, index) => (<SkillItem skill={skill} /> ));\n\n  return (\n    <div>\n      {options()}\n      <table>\n        {skillTable()}\n      </table>\n    </div>\n  );\n}\n\nexport default Skills;\n","import _ from 'lodash';\n\nimport { LocalizationData, LocalizationSubData } from './common';\n\nclass Localization {\n  default: {};\n\n  localizer: {\n    [key: string]: () => __WebpackModuleApi.RequireContext;\n  };\n\n  static getLocalizationJaJp() {\n    return require.context('./localization/ja_jp/', true, /\\.json$/);\n  }\n\n  static getLocalizationEnUs() {\n    return require.context('./localization/en_us/', true, /\\.json$/);\n  }\n\n  static getLocalizationZhTw() {\n    return require.context('./localization/zh_tw', true, /\\.json$/);\n  }\n\n  constructor() {\n    this.default = {};\n    this.localizer = {\n      'ja-jp': Localization.getLocalizationJaJp,\n      'en-us': Localization.getLocalizationEnUs,\n      'zh-tw': Localization.getLocalizationZhTw,\n    };\n    this.default = this.getLocalization('ja-jp');\n  }\n\n  getLocalization(locale: string): LocalizationData {\n    const files = this.localizer[locale]();\n    const fileJson: LocalizationSubData = {};\n    for (const fileKey of files.keys()) {\n      const structure = fileKey.split('.')[1].split('/');\n\n      let target: LocalizationSubData = fileJson;\n      for (let i = 1; i < structure.length; i += 1) {\n        if (!(structure[i] in fileJson)) {\n          target[structure[i]] = {};\n        }\n        target = target[structure[i]] as LocalizationSubData;\n      }\n      _.merge(target, files(fileKey));\n    }\n    return _.merge({}, this.default, fileJson) as LocalizationData;\n  }\n}\n\nexport default Localization;\n","import { Layout, Menu, Select } from 'antd';\nimport React, { Component } from 'react';\nimport {\n  Redirect, HashRouter as Router, Route, Link, Switch,\n} from 'react-router-dom';\n\nimport { LocalizationData } from './common';\nimport RelationGraph from './component/relation/graph';\nimport RelationQuery from './component/relation/query';\nimport Simulator from './component/simulator/simulator';\nimport Skill from './component/skill/index';\nimport Localization from './localization';\n\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst { Header, Content, Footer } = Layout;\nconst { Option } = Select;\n\ninterface IProps {\n}\n\ninterface IState {\n  localization: LocalizationData;\n}\n\nclass App extends Component<IProps, IState> {\n  localization: Localization;\n\n  constructor(props: {}) {\n    super(props);\n    this.localization = new Localization();\n    this.state = {\n      localization: this.localization.getLocalization('ja-jp'),\n    };\n  }\n\n  changeLocalization = (locale: string) => {\n    this.setState({\n      localization: this.localization.getLocalization(locale),\n    });\n  };\n\n  render() {\n    const { localization } = this.state;\n    return (\n      <Router>\n        <Layout className=\"layout\">\n          <Header className=\"header\">\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n              <Menu.Item key=\"1\">\n                <Link to=\"/relation/graph\" className=\"link\">{localization.site['Relation Graph']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <Link to=\"/relation/query\" className=\"link\">{localization.site['Relation Query']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <Link to=\"/simulator\" className=\"link\">{localization.site.Simulator}</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content className=\"tabs\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/relation/graph\" />\n              </Route>\n              <Route path=\"/relation/graph\" render={() => (<RelationGraph localization={localization} />)} />\n              <Route path=\"/relation/query\" render={() => (<RelationQuery localization={localization} />)} />\n              <Route path=\"/simulator\" render={() => (<Simulator localization={localization} />)} />\n              <Route path=\"/skill\" render={() => (<Skill />)} />\n            </Switch>\n          </Content>\n          <Footer className=\"footer\">\n            <Select className=\"localizationSelector\" defaultValue=\"ja-jp\" onChange={this.changeLocalization}>\n              <Option value=\"zh-tw\">繁體中文</Option>\n              <Option value=\"ja-jp\">日本語</Option>\n              <Option value=\"en-us\">English</Option>\n            </Select>\n          </Footer>\n        </Layout>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}