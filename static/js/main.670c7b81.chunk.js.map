{"version":3,"sources":["localization/ja_jp sync /.json$","localization/en_us sync /.json$","localization/zh_tw sync /.json$","library/common.ts","component/relation/graph.tsx","component/relation/query.tsx","component/course-data.tsx","component/simulator/horse-proper-rate.tsx","component/simulator/horse-stat-data.tsx","library/race/common.ts","component/simulator/horse-data.tsx","component/simulator/race-data.tsx","library/race/constant.ts","library/race/race-horse.ts","component/simulator/race-result.tsx","library/race/horse.ts","library/race/course.ts","library/race/skill.ts","component/simulator/simulator-calculator.tsx","component/simulator/skill-selector.tsx","component/simulator/simulator.tsx","component/course/course-chart.tsx","component/course/course.tsx","localization.ts","app.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","RunningStyle","DistanceType","GroundType","TurnType","InoutType","CoursePhase","GroundStatus","ProperRate","SkillAbilityType","SkillAbilityTargetType","SkillConditionOperatorsLogical","SkillConditionOperatorsFormula","characters","characterJson","relations","relationJson","relationMembers","relationMemberJson","RelationGraph","props","characterIds","i","length","j","calculateRelation","this","idToPortrait","_","targetId","localization","className","src","process","alt","character","name","createRow","id1","id2","targetRelations","intersection","reduce","sum","parseInt","Component","RelationQuery","horses","selectHorse","event","value","target","setState","horseId","state","rel","forEach","targetHorseId","push","relation","image","sortBy","horseRow","relationArray","buildRelationArray","FormControl","InputLabel","Select","labelId","onChange","MenuItem","undefined","Common","time","hour","Math","floor","hourString","minute","minuteString","toString","padStart","second","secondString","minorString","Option","CourseData","setData","racecourse","span","site","Racecourse","course","key","courseCategories","ground","Ground","distance","Distance","racecourseComponent","getRacecourseComponent","groundComponent","getGroundComponent","distanceComponent","getDistanceComponent","gutter","HorseProperRate","properRateTypes","properTypes","properName","properRateType","camelProperRateType","camelCase","properRate","G","F","E","D","C","B","A","S","HorseStatData","stats","min","max","data","speed","stamina","pow","guts","wiz","ResultFlag","Season","Weather","HorseData","RaceData","strategy","Strategy","Nige","RunningStyleNige","Senko","RunningStyleSenko","Sashi","RunningStyleSashi","Oikomi","RunningStyleOikomi","groundStatus","Good","GroundStatusGood","SlightlyHeavy","GroundStatusSlightlyHeavy","Heavy","GroundStatusHeavy","Bad","GroundStatusBad","strategyComponent","getStrategyComponent","groundStatusComponent","getGroundStatusComponent","constant","baseDistance","minSpeed","minSpeedRate","minSpeedGutsCoefSqrt","minSpeedGutsCoef","startDash","targetSpeedCoefficient","startAccelAdd","targetSpeed","baseTargetSpeedRandomMinusVal1","baseTargetSpeedRandomMinusVal2","baseTargetSpeedRandomPlusVal1","baseTargetSpeedRandomLogCoefficient","baseTargetSpeedRandomCoefficient","Start","Middle","End","LastSpurt","phaseEndBaseTargetSpeedCoef","addSpeedParamCoef","baseTargetSpeedCoef","lastSpurtBaseTargetSpeedAddCoef","lastSpurtTargetSpeedCoefSqrt","upSlopeAddSpeedVal1","downSlopeAddSpeedVal1","downSlopeAddSpeedVal2","firstBlockSlowStyles","lastSpurtTargetSpeedStep","accel","accelPhaseCoef","accelPowCoef","accelPowCoefUpSlope","accelPowCoefSqrt","accelDecreaseCoef","accelDecreaseZeroHpCoef","hp","hpInitialVal1","hpMaxCoef","hpDecBase","hpDecRateBaseNormal","hpDecRateBaseTemptation","hpDecRateBasePositionKeepPaseDown","hpDecRateMultiplyDownSlopeAccelMode","speedGapParam1","speedGapParam1Pow","groundModifierMultiHpSub","Turf","Dirt","hpGutsBase","hpGutsCoef","hpGutsCoefSqrt","distanceTargetSpeedCoefficient","blockPortion","distanceShort","distanceMile","distanceMiddle","distanceLong","Number","MAX_VALUE","startSpeed","phaseStart","phaseMiddle","phaseEnd","positionSense","frameTime","gateTimeRange","finishTimeCoef","lastSpurt","determineRateBase","determineRateWizMultiplier","targetDistanceFromGoal","slope","downSlopeAccelModeChanceBase","downSlopeEndChance","skill","activatePerMin","lotActivatePerVal1","lotActivatePerVal2","abilityTimeDivideDistance","coolDownTimeDivideDistance","BreakPoint","Mode","RaceResult","raceResults","timeAverage","meanBy","timeShown","parseFloat","finish_time_min","secondToTime","TimeMin","timeDeviationSum","fullLastSpurtCount","hpLeftSum","result","resultFlags","has","FullLastSpurt","hpLeft","TimeAverage","TimeStandardDeviation","TimeShown","FullLastSpurtRate","HpLeftAverage","toFixed","sqrt","toLocaleString","style","Horse","stat","skills","Course","courseData","_courseData","getDistanceType","turn","slope_per","race_track_id","Short","Mile","Long","Skill","condition","raceHorse","realCondition","operator","andCondition","items","childCondition","matchBase","orCondition","formulaCondition","targetValue","getTargetValue","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","EqualTo","NotEqualTo","turnType","trackId","season","weather","postNumber","sameRunningStyleCount","popularityFirstRunningStyle","runningStyle","popularity","random","distanceProperRate","distanceProperRateJson","groundProperRate","groundProperRateJson","RaceHorse","horse","sameRunningStyle","_course","_horse","_runningStyle","_season","_weather","_postNumber","_popularity","_sameRunningStyleCount","_popularityFirstRunningStyle","_statAddition","_stat","_generalSkills","_activateCountSkills","_skillCooldown","_speedWizRandomRange","_speedWizRandom","_phase","_mode","Set","_speed","_lastSpurtTargetSpeed","_hp","_distance","_time","_breakPoints","_startDashTargetSpeed","_slopePer","raceResult","finishFirstBlock","delete","FirstBlock","FinishPhaseStart","phaseStartDistance","finishBlock","refreshSpeedRandomValue","FinishBlock","blockDistance","finishPhaseStart","FinishPhaseMiddle","phaseMiddleDistance","calculateLastSpurt","add","maxLastSpurtTargetSpeed","calculateAccelAndRun","hpCost","finalSpeed","lastSpurtDistance","lastSpurtTargetSpeed","lastSpurtSpeedCandidates","phaseEndBaseTargetSpeed","baseTargetSpeed","phaseEndTargetSpeedAddition","maxDistance","hpDecreaseRate","accelToTargetSpeed","currentSpeed","phaseEndAccelTime","phaseEndAccelDistance","phaseEndAccelHpCost","phaseEndFinalSpeed","lastSpurtAccelTime","lastSpurtAccelDistance","lastSpurtAccelHpCost","runDistance","phaseEndRunTime","phaseEndRunHpCost","getRunHpDecrease","lastSpurtRunTime","lastSpurtRunHpCost","hpDiff","candidate","randomByCandidates","lastSpurtDetermineRate","finishPhaseMiddle","FinishPhaseEnd","phaseEndDistance","finishPhaseEnd","FinishPhaseLastSpurt","doLastSpurt","finishLastSpurt","triggerPositionSense","zeroHp","ZeroHp","changeSlope","slopePer","checkDownSlopeAccelMode","DownSlopeAccel","DownSlopeAccelMode","triggerSkill","reachGoal","breakPointMap","None","FinishFirstBlock","PositionSense","Slope","TriggerSkill","Goal","clone","skillsActivated","temptation","triggered","originalStat","distanceType","StartDash","startDashTargetSpeed","slopeAdd","abs","baseTargetSpeedRandom","realTargetSpeed","groundType","power","baseAccel","UpSlope","Temptation","PositionKeepPaceDown","phaseEndHpDecreaseRate","modeHpDecreaseRate","minParameters","minKey","minDistance","entries","Array","isArray","parameters","breakPoint","accelTime","accelDistance","accelHpCost","runTime","speedCoefficient","realAccelTime","nr","realAccelDistance","speedHpDecreaseRate","getSpeedHpDecrease","runHpCost","realRunTime","realRunDistance","skillId","ability","count","effects","slopePers","allSlopePers","addBreakPoint","type","pop","distances","specific","skillActivateRate","generalTriggerDistances","specificTriggerDistances","abilities","ability_time","activateAbility","getSkillTriggerStat","maxHp","populateSkills","upperBound","log10","lowerBound","buildSlopeBreakPoints","doGateOpen","debugOutput","finishStartDash","minBreakpoint","doAccelAndRun","removeBreakPoint","initialSpeed","targetSpeedByDistanceSquare","getAccelHpDecrease","determineRate","randomNumber","log","skillData","skillJson","SimulatorCalculator","calculate","a","running","finished","groundTypeTurf","groundTypeDirt","distanceTypeShort","distanceTypeMile","distanceTypeMiddle","distanceTypeLong","runningStyleNige","runningStyleSenko","runningStyleSashi","runningStyleOikomi","rounds","targetCourse","targetHorse","counter","started","worksPerThread","ceil","concurrency","Promise","Spring","Sunny","simulate","delay","progressPercent","round","SimulatorCalculateRounds","disabled","onClick","SimulatorCalculate","percent","SKILL_SELECTOR_HIERARCHY","categoryName","sets","children","icon","TreeNode","TreeSelect","SkillSelector","_skillSets","icon_id","rarity","definitions","definition","title","buildSkillTreeNodes","chain","set","filter","skillSet","flatten","dropdownPopupAlign","overflow","adjustY","adjustX","offset","treeLine","allowClear","multiple","autoClearSearchValue","showCheckedStrategy","SHOW_PARENT","width","courses","courseJson","Simulator","updateCourse","loadCourseData","CORNER_COLOR","Default","stroke","strokeOpacity","fill","fillOpacity","1","2","3","4","CourseChart","slopeDistance","lastSlopePer","lastSlopePerDistance","referenceAreas","param","corner","index","corner_index","includes","indexOf","ReferenceArea","x1","start","x2","end","y1","y2","label","Label","position","ComposedChart","height","XAxis","dataKey","YAxis","domain","Tooltip","Legend","Line","dot","CourseSlope","ReferenceLine","x","CoursePositionKeepEnd","CourseMiddlePhase","CourseEndPhase","Localization","default","localizer","getLocalizationJaJp","getLocalizationEnUs","getLocalizationZhTw","getLocalization","locale","files","fileJson","fileKey","structure","split","merge","require","Header","Layout","Content","Footer","App","changeLocalization","theme","mode","defaultSelectedKeys","Item","to","exact","path","render","padding","href","defaultValue","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.670c7b81.chunk.js","sourcesContent":["var map = {\n\t\"./character/name.json\": 450,\n\t\"./course/ground.json\": 451,\n\t\"./course/inout.json\": 452,\n\t\"./course/racecourse.json\": 453,\n\t\"./site.json\": 454\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 449;","var map = {\n\t\"./character/name.json\": 456,\n\t\"./course/racecourse.json\": 457,\n\t\"./site.json\": 458\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 455;","var map = {\n\t\"./character/name.json\": 460,\n\t\"./course/racecourse.json\": 461,\n\t\"./site.json\": 462\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 459;","/* eslint-disable @typescript-eslint/no-shadow */\r\nexport interface LocalizationData {\r\n  character: {\r\n    name: LocalizationMap,\r\n  },\r\n  course: {\r\n    racecourse: LocalizationMap,\r\n    ground: LocalizationMap,\r\n    inout: LocalizationMap,\r\n  },\r\n  site: LocalizationMap,\r\n  [key: string]: string | LocalizationSubData,\r\n}\r\n\r\nexport interface LocalizationSubData {\r\n  [key: string]: string | LocalizationSubData,\r\n}\r\n\r\ninterface LocalizationMap {\r\n  [key: string]: string,\r\n}\r\n\r\nexport enum RunningStyle {\r\n  Nige = 'RunningStyleNige',\r\n  Senko = 'RunningStyleSenko',\r\n  Sashi = 'RunningStyleSashi',\r\n  Oikomi = 'RunningStyleOikomi',\r\n}\r\n\r\nexport enum DistanceType {\r\n  Short = 'DistanceTypeShort',\r\n  Mile = 'DistanceTypeMile',\r\n  Middle = 'DistanceTypeMiddle',\r\n  Long = 'DistanceTypeLong',\r\n}\r\n\r\nexport enum GroundType {\r\n  Turf = '1',\r\n  Dirt = '2',\r\n}\r\n\r\nexport enum TurnType {\r\n  Right = '1',\r\n  Left = '2',\r\n  Straight = '4',\r\n}\r\n\r\nexport enum InoutType {\r\n  Normal = '1',\r\n  Inner = '2',\r\n  Outer = '3',\r\n  OuterInner = '4',\r\n}\r\n\r\nexport enum CoursePhase {\r\n  Start = 0,\r\n  Middle = 1,\r\n  End = 2,\r\n  LastSpurt = 3,\r\n}\r\n\r\nexport enum GroundStatus {\r\n  Good = 'GroundStatusGood',\r\n  SlightlyHeavy = 'GroundStatusSlightlyHeavy',\r\n  Heavy = 'GroundStatusHeavy',\r\n  Bad = 'GroundStatusBad',\r\n}\r\n\r\nexport enum ProperRate {\r\n  G = '1',\r\n  F = '2',\r\n  E = '3',\r\n  D = '4',\r\n  C = '5',\r\n  B = '6',\r\n  A = '7',\r\n  S = '8',\r\n}\r\n\r\nexport interface CourseCategory {\r\n  [key: string]: {\r\n    [key: string]: {\r\n      [key: string]: CourseDataType,\r\n    },\r\n  },\r\n}\r\n\r\nexport interface CourseDataType {\r\n  id: string,\r\n  race_track_id: string,\r\n  distance: number,\r\n  ground: GroundType,\r\n  turn: TurnType,\r\n  inout: InoutType,\r\n  course_set_status_id: string,\r\n  finish_time_min: string,\r\n  finish_time_min_random_range: string,\r\n  finish_time_max: string,\r\n  finish_time_max_random_range: string,\r\n  param: {\r\n    corner: { start?: number, end?: number }[],\r\n    straight: { start: number, end: number }[],\r\n    corner_index: number[],\r\n  },\r\n  slope_per: { distance: number, slope_per: number }[],\r\n}\r\n\r\nexport interface SkillData {\r\n  id: string,\r\n  name: string,\r\n  rarity: number,\r\n  description: string,\r\n  icon_id: string,\r\n  need_skill_point: number | null,\r\n  abilities: SkillAbilityData[],\r\n}\r\n\r\nexport interface SkillAbilityData {\r\n  condition_raw: string,\r\n  condition: SkillConditionObject,\r\n  ability_time: number,\r\n  cooldown_time: number,\r\n  effects: SkillEffectData[],\r\n}\r\n\r\nexport interface SkillEffectData {\r\n  ability_type: SkillAbilityType,\r\n  ability_value: number,\r\n  target_type: SkillAbilityTargetType,\r\n  target_value: number,\r\n}\r\n\r\nexport enum SkillAbilityType {\r\n  AddSpeed = '1',\r\n  AddStamina = '2',\r\n  AddPow = '3',\r\n  AddGuts = '4',\r\n  AddWiz = '5',\r\n  AddSight = '8',\r\n  AddHp = '9',\r\n  ExtendTemptation = '13',\r\n  AddTargetSpeed = '27',\r\n  AddLaneAccel = '28',\r\n  AddAccel = '31',\r\n}\r\n\r\nexport enum SkillAbilityTargetType {\r\n  Self = '1',\r\n  FrontInSight = '4',\r\n  FrontAll = '9',\r\n  BehindAll = '10',\r\n  RunningStyle = '18',\r\n  DistanceFront = '19',\r\n  DistanceBehind = '20',\r\n  RunningStyleInTemptation = '21',\r\n}\r\n\r\nenum SkillConditionOperatorsLogical {\r\n  And = 'and',\r\n  Or = 'or',\r\n}\r\n\r\nexport enum SkillConditionOperatorsFormula {\r\n  GreaterThan = '>',\r\n  GreaterThanOrEqualTo = '>=',\r\n  LessThan = '<',\r\n  LessThanOrEqualTo = '<=',\r\n  EqualTo = '==',\r\n  NotEqualTo = '!=',\r\n}\r\n\r\nexport interface SkillConditionObjectLogical {\r\n  operator: SkillConditionOperatorsLogical,\r\n  items: SkillConditionObject[],\r\n}\r\n\r\nexport interface SkillConditionObjectFormula {\r\n  operator: SkillConditionOperatorsFormula,\r\n  key: string,\r\n  value: string,\r\n}\r\n\r\nexport type SkillConditionObject = SkillConditionObjectLogical | SkillConditionObjectFormula | {};\r\n\r\nclass Common {\r\n  static secondToTime(time: number): string {\r\n    const hour = Math.floor(time / 3600);\r\n    const hourString = hour > 0 ? `${hour}:` : '';\r\n    const minute = Math.floor((time - hour * 3600) / 60);\r\n    const minuteString = minute > 0\r\n      ? `${hour > 0 ? `${minute.toString().padStart(2, '0')}` : minute}:`\r\n      : '';\r\n    const second = Math.floor(time - hour * 3600 - minute * 60);\r\n    const secondString = second > 0\r\n      ? `${(hour > 0 || minute > 0) ? `${second.toString().padStart(2, '0')}` : second}`\r\n      : '0';\r\n    const minorString = `.${Math.floor((time - hour * 3600 - minute * 60 - second) * 1000).toString().padStart(3, '0')}`;\r\n    return `${hourString}${minuteString}${secondString}${minorString}`;\r\n  }\r\n}\r\n\r\nexport default Common;\r\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport 'react-tabs/style/react-tabs.css';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../library/common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n}\n\nclass RelationGraph extends Component<IProps, IState> {\n  static calculateRelation(id1: string, id2: string) {\n    if (id1 === id2) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  characterIds: string[];\n\n  relations: { [key: string]: { [key: string]: number } };\n\n  constructor(props: IProps) {\n    super(props);\n    this.characterIds = Object.keys(characters);\n    this.relations = {};\n    for (let i = 0; i < this.characterIds.length; i += 1) {\n      this.relations[this.characterIds[i]] = {};\n      for (let j = 0; j < this.characterIds.length; j += 1) {\n        this.relations[this.characterIds[i]][this.characterIds[j]] = RelationGraph.calculateRelation(this.characterIds[i], this.characterIds[j]);\n      }\n    }\n  }\n\n  createRow(id: string) {\n    return (\n      <tr key={`relation_row_${id}`}>\n        <th key={`portrait_row_${id}`}>{this.idToPortrait(id)}</th>\n        { _.map(this.characterIds, (targetId) => <th key={`relation_${id}_${targetId}`}>{ RelationGraph.calculateRelation(id, targetId) }</th>) }\n      </tr>\n    );\n  }\n\n  idToPortrait(id: string) {\n    const { localization } = this.props;\n    return (\n      <img\n        className=\"portrait\"\n        src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${id}.png`}\n        alt={localization.character.name[id]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <table>\n          <tbody>\n            <tr>\n              <th />\n              { _.map(this.characterIds, (id) => <th key={`portrait_column_${id}`}>{this.idToPortrait(id)}</th>) }\n            </tr>\n            { _.map(this.characterIds, (id) => this.createRow(id)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationGraph;\n","import _ from 'lodash';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport React, { Component } from 'react';\r\n\r\nimport '../../app.css';\r\nimport './relation.css';\r\n\r\nimport { LocalizationData } from '../../library/common';\r\nimport characterJson from '../../db/character.json';\r\nimport relationJson from '../../db/relation.json';\r\nimport relationMemberJson from '../../db/relation_member.json';\r\n\r\nconst characters = characterJson as { [key: string]: {} };\r\nconst relations = relationJson as { [key: string]: string };\r\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\r\n\r\ninterface HorseRow {\r\n  name: string;\r\n  relation: number;\r\n  image: string;\r\n}\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n}\r\n\r\ninterface IState {\r\n  horseId: string\r\n}\r\n\r\nclass RelationQuery extends Component<IProps, IState> {\r\n  static calculateRelation(id1: string | undefined, id2: string): number {\r\n    if (id1 === id2 || id1 === undefined) {\r\n      return 0;\r\n    }\r\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\r\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\r\n  }\r\n\r\n  horses: string[];\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.horses = Object.keys(characters);\r\n    this.state = {\r\n      horseId: '',\r\n    };\r\n  }\r\n\r\n  selectHorse = (event: any) => {\r\n    const { value } = event.target;\r\n    this.setState({ horseId: value });\r\n  };\r\n\r\n  buildRelationArray() {\r\n    const { horseId } = this.state;\r\n    const { localization } = this.props;\r\n    let rel: HorseRow[] = [];\r\n    this.horses.forEach((targetHorseId) => {\r\n      if (targetHorseId !== horseId) {\r\n        rel.push({\r\n          name: localization.character.name[targetHorseId],\r\n          relation: RelationQuery.calculateRelation(horseId, targetHorseId),\r\n          image: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\r\n        });\r\n      }\r\n    });\r\n    rel = _.sortBy(rel, [(horseRow) => -horseRow.relation]);\r\n\r\n    return rel.map((horseRow) => (\r\n      <tr>\r\n        <td>{horseRow.name}</td>\r\n        <td><img className=\"portrait\" src={horseRow.image} alt={horseRow.name} /></td>\r\n        <td>{horseRow.relation}</td>\r\n      </tr>\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    const { localization } = this.props;\r\n    const relationArray = this.buildRelationArray();\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"dropdown\">\r\n          <FormControl>\r\n            <InputLabel id=\"demo-simple-select-label\">ウマ</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              onChange={this.selectHorse}\r\n            >\r\n              { this.horses.map((targetHorseId) => (\r\n                <MenuItem key={`${targetHorseId}_option`} value={targetHorseId}>\r\n                  <img\r\n                    className=\"portrait\"\r\n                    src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`}\r\n                    alt={localization.character.name[targetHorseId]}\r\n                  />\r\n                  {localization.character.name[targetHorseId]}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <table>\r\n          {relationArray}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RelationQuery;\r\n","import _ from 'lodash';\r\nimport {\r\n  Row, Col, Select,\r\n} from 'antd';\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  CourseCategory, CourseDataType, LocalizationData,\r\n} from '../library/common';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './component.css';\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n  localization: LocalizationData,\r\n  courseCategories: CourseCategory,\r\n  setData: (key: string, value: any) => void,\r\n  state: {\r\n    racecourse?: string,\r\n    ground?: string,\r\n    distance?: number,\r\n    course?: CourseDataType,\r\n  },\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass CourseData extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  getRacecourseComponent() {\r\n    const { localization, setData, state } = this.props;\r\n    const { racecourse } = state;\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Racecourse}:`}</span>\r\n          <Select className=\"select\" value={racecourse} onChange={(value) => setData('racecourse', value)}>\r\n            { _.map(localization.course.racecourse, (value: string, key: string) => (\r\n              <Option value={key}>{value}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getGroundComponent() {\r\n    const {\r\n      localization, courseCategories, setData, state,\r\n    } = this.props;\r\n    const { racecourse, ground } = state;\r\n\r\n    if (racecourse === undefined) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Ground}:`}</span>\r\n          <Select className=\"select\" value={ground} onChange={(value) => setData('ground', value)}>\r\n            { _.map(courseCategories[racecourse], (value: string, key: string) => (\r\n              <Option value={key}>{localization.course.ground[key]}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getDistanceComponent() {\r\n    const {\r\n      localization, courseCategories, setData, state,\r\n    } = this.props;\r\n    const { racecourse, ground, distance } = state;\r\n\r\n    if (racecourse === undefined || ground === undefined) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Distance}:`}</span>\r\n          <Select className=\"select\" value={distance} onChange={(value) => setData('distance', value)}>\r\n            { _.map(courseCategories[racecourse][ground], (value: string, key: number) => (\r\n              <Option value={key}>{key}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const racecourseComponent = this.getRacecourseComponent();\r\n    const groundComponent = this.getGroundComponent();\r\n    const distanceComponent = this.getDistanceComponent();\r\n\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        {racecourseComponent}\r\n        {groundComponent}\r\n        {distanceComponent}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseData;\r\n","import _ from 'lodash';\nimport { Row, Col, Select } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: string },\n\n}\n\ninterface IState {\n}\n\nclass HorseProperRate extends Component<IProps, IState> {\n  static readonly properRateTypes = {\n    GroundType: ['GroundTypeTurf', 'GroundTypeDirt'],\n    DistanceType: ['DistanceTypeShort', 'DistanceTypeMile', 'DistanceTypeMiddle', 'DistanceTypeLong'],\n    RunningStyle: ['RunningStyleNige', 'RunningStyleSenko', 'RunningStyleSashi', 'RunningStyleOikomi'],\n  };\n\n  static readonly properRate = {\n    G: '1',\n    F: '2',\n    E: '3',\n    D: '4',\n    C: '5',\n    B: '6',\n    A: '7',\n    S: '8',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        { _.map(HorseProperRate.properRateTypes, (properTypes, properName) => (\n          <>\n            <Row gutter={[8, 8]}><Col span={24}>{localization.site[properName]}</Col></Row>\n            <Row gutter={[8, 8]}>\n              { _.map(properTypes, (properRateType) => {\n                const camelProperRateType = _.camelCase(properRateType);\n                return (\n                  <Col span={4}>\n                    <div className=\"flex\">\n                      <span className=\"select-label\">{`${localization.site[properRateType]}:`}</span>\n                      <Select className=\"select\" value={state[camelProperRateType]} onChange={(value) => setData(camelProperRateType, value)}>\n                        { _.map(HorseProperRate.properRate, (value, key) => (\n                          <Select.Option value={value}>{localization.site[key]}</Select.Option>\n                        ))}\n                      </Select>\n                    </div>\n                  </Col>\n                );\n              })}\n            </Row>\n          </>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default HorseProperRate;\n","import _ from 'lodash';\r\nimport { InputNumber, Row, Col } from 'antd';\r\nimport React, { Component } from 'react';\r\n\r\nimport { LocalizationData } from '../../library/common';\r\n\r\nimport '../component.css';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  setData: (key: string, value: any) => void,\r\n  state: { [key: string]: number },\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass HorseStatData extends Component<IProps, IState> {\r\n  static readonly stats = {\r\n    speed: 'Speed',\r\n    stamina: 'Stamina',\r\n    pow: 'Power',\r\n    guts: 'Guts',\r\n    wiz: 'Wiz',\r\n  };\r\n\r\n  render() {\r\n    const { localization, setData, state } = this.props;\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        { _.map(HorseStatData.stats, (value, key) => (\r\n          <Col span={4}>\r\n            <div className=\"flex\">\r\n              <span className=\"select-label\">{`${localization.site[value]}:`}</span>\r\n              <InputNumber className=\"select\" value={state[key]} min={1} max={1200} onChange={(data) => setData(key, data)} />\r\n            </div>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HorseStatData;\r\n","import { RunningStyle } from '../common';\r\nimport Course from './course';\r\n\r\nexport enum ResultFlag {\r\n  FullLastSpurt,\r\n}\r\n\r\nexport enum Season {\r\n  Spring = '1',\r\n  Summer = '2',\r\n  Fall = '3',\r\n  Winter = '4',\r\n}\r\n\r\nexport enum Weather {\r\n  Sunny = '1',\r\n  Cloudy = '2',\r\n  Rainy = '3',\r\n  Snowy = '4',\r\n}\r\n\r\nexport interface RaceResultData {\r\n  time: number,\r\n  hpLeft: number,\r\n  resultFlags: Set<ResultFlag>,\r\n  skillsActivated: {\r\n    [key: string]: {\r\n      count: number,\r\n    },\r\n  },\r\n  temptation: {\r\n    triggered: boolean,\r\n    time: number,\r\n  },\r\n}\r\n\r\nexport interface IRaceHorse {\r\n  get course(): Course;\r\n  get season(): Season;\r\n  get weather(): Weather;\r\n  get postNumber(): number;\r\n  get popularity(): number;\r\n  get sameRunningStyleCount(): number;\r\n  get popularityFirstRunningStyle(): RunningStyle;\r\n  get runningStyle(): RunningStyle;\r\n}\r\n\r\nclass Common {\r\n}\r\n\r\nexport default Common;\r\n","import React, { Component } from 'react';\r\n\r\nimport { LocalizationData } from '../../library/common';\r\nimport HorseProperRate from './horse-proper-rate';\r\nimport HorseStatData from './horse-stat-data';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData,\r\n  setData: (key: string, value: any) => void,\r\n  state: any,\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass HorseData extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { localization, setData, state } = this.props;\r\n    return (\r\n      <>\r\n        <HorseStatData localization={localization} setData={setData} state={state} />\r\n        <HorseProperRate localization={localization} setData={setData} state={state} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HorseData;\r\n","import {\r\n  Row, Col, Select,\r\n} from 'antd';\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  GroundStatus, LocalizationData, RunningStyle,\r\n} from '../../library/common';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport '../component.css';\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n  localization: LocalizationData,\r\n  setData: (key: string, value: any) => void,\r\n  state: {\r\n    strategy?: string,\r\n    groundStatus?: string,\r\n  },\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass RaceData extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  getStrategyComponent() {\r\n    const { localization, setData, state } = this.props;\r\n    const { strategy } = state;\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.Strategy}:`}</span>\r\n          <Select className=\"select\" value={strategy} onChange={(value) => setData('strategy', value)}>\r\n            <Option value={RunningStyle.Nige}>{localization.site.RunningStyleNige}</Option>\r\n            <Option value={RunningStyle.Senko}>{localization.site.RunningStyleSenko}</Option>\r\n            <Option value={RunningStyle.Sashi}>{localization.site.RunningStyleSashi}</Option>\r\n            <Option value={RunningStyle.Oikomi}>{localization.site.RunningStyleOikomi}</Option>\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  getGroundStatusComponent() {\r\n    const { localization, setData, state } = this.props;\r\n    const { groundStatus } = state;\r\n    return (\r\n      <Col span={4}>\r\n        <div className=\"flex\">\r\n          <span className=\"select-label\">{`${localization.site.GroundStatus}:`}</span>\r\n          <Select className=\"select\" value={groundStatus} onChange={(value) => setData('groundStatus', value)}>\r\n            <Option value={GroundStatus.Good}>{localization.site.GroundStatusGood}</Option>\r\n            <Option value={GroundStatus.SlightlyHeavy}>{localization.site.GroundStatusSlightlyHeavy}</Option>\r\n            <Option value={GroundStatus.Heavy}>{localization.site.GroundStatusHeavy}</Option>\r\n            <Option value={GroundStatus.Bad}>{localization.site.GroundStatusBad}</Option>\r\n          </Select>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const strategyComponent = this.getStrategyComponent();\r\n    const groundStatusComponent = this.getGroundStatusComponent();\r\n\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        {strategyComponent}\r\n        {groundStatusComponent}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaceData;\r\n","import {\r\n  RunningStyle, CoursePhase, GroundType, GroundStatus,\r\n} from '../common';\r\n\r\nconst constant = {\r\n  baseDistance: 2000,\r\n  minSpeed: {\r\n    minSpeedRate: 0.85,\r\n    minSpeedGutsCoefSqrt: 200,\r\n    minSpeedGutsCoef: 0.001,\r\n  },\r\n  startDash: {\r\n    targetSpeedCoefficient: 0.85,\r\n    startAccelAdd: 24,\r\n  },\r\n  targetSpeed: {\r\n    baseTargetSpeedRandomMinusVal1: -0.0065,\r\n    baseTargetSpeedRandomMinusVal2: 5500,\r\n    baseTargetSpeedRandomPlusVal1: 5500,\r\n    baseTargetSpeedRandomLogCoefficient: 0.1,\r\n    baseTargetSpeedRandomCoefficient: 0.01,\r\n    targetSpeedCoefficient: {\r\n      [RunningStyle.Nige]: {\r\n        [CoursePhase.Start]: 1,\r\n        [CoursePhase.Middle]: 0.98,\r\n        [CoursePhase.End]: 0.98,\r\n        [CoursePhase.LastSpurt]: 0.98,\r\n      },\r\n      [RunningStyle.Senko]: {\r\n        [CoursePhase.Start]: 0.978,\r\n        [CoursePhase.Middle]: 0.991,\r\n        [CoursePhase.End]: 0.975,\r\n        [CoursePhase.LastSpurt]: 0.975,\r\n      },\r\n      [RunningStyle.Sashi]: {\r\n        [CoursePhase.Start]: 0.938,\r\n        [CoursePhase.Middle]: 0.998,\r\n        [CoursePhase.End]: 0.994,\r\n        [CoursePhase.LastSpurt]: 0.994,\r\n      },\r\n      [RunningStyle.Oikomi]: {\r\n        [CoursePhase.Start]: 0.931,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 1,\r\n        [CoursePhase.LastSpurt]: 1,\r\n      },\r\n    },\r\n    phaseEndBaseTargetSpeedCoef: 500,\r\n    addSpeedParamCoef: 0.002,\r\n    baseTargetSpeedCoef: 1.05,\r\n    lastSpurtBaseTargetSpeedAddCoef: 0.01,\r\n    lastSpurtTargetSpeedCoefSqrt: 500,\r\n    upSlopeAddSpeedVal1: 200,\r\n    downSlopeAddSpeedVal1: 0.3,\r\n    downSlopeAddSpeedVal2: 10,\r\n    firstBlockSlowStyles: [RunningStyle.Sashi, RunningStyle.Oikomi],\r\n    lastSpurtTargetSpeedStep: 0.1,\r\n  },\r\n  accel: {\r\n    accelPhaseCoef: {\r\n      [RunningStyle.Nige]: {\r\n        [CoursePhase.Start]: 1,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 0.996,\r\n        [CoursePhase.LastSpurt]: 0.996,\r\n      },\r\n      [RunningStyle.Senko]: {\r\n        [CoursePhase.Start]: 0.985,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 0.996,\r\n        [CoursePhase.LastSpurt]: 0.996,\r\n      },\r\n      [RunningStyle.Sashi]: {\r\n        [CoursePhase.Start]: 0.975,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 1,\r\n        [CoursePhase.LastSpurt]: 1,\r\n      },\r\n      [RunningStyle.Oikomi]: {\r\n        [CoursePhase.Start]: 0.945,\r\n        [CoursePhase.Middle]: 1,\r\n        [CoursePhase.End]: 0.997,\r\n        [CoursePhase.LastSpurt]: 0.997,\r\n      },\r\n    },\r\n    accelPowCoef: 0.0006,\r\n    accelPowCoefUpSlope: 0.0004,\r\n    accelPowCoefSqrt: 500,\r\n    startAccelAdd: 24,\r\n    accelDecreaseCoef: {\r\n      [CoursePhase.Start]: -1.2,\r\n      [CoursePhase.Middle]: -0.8,\r\n      [CoursePhase.End]: 1.2,\r\n      [CoursePhase.LastSpurt]: 1.2,\r\n    },\r\n    accelDecreaseZeroHpCoef: -1.2,\r\n  },\r\n  hp: {\r\n    hpInitialVal1: 0.8,\r\n    hpMaxCoef: {\r\n      [RunningStyle.Nige]: 0.95,\r\n      [RunningStyle.Senko]: 0.89,\r\n      [RunningStyle.Sashi]: 1.0,\r\n      [RunningStyle.Oikomi]: 0.995,\r\n    },\r\n    hpDecBase: 20,\r\n    hpDecRateBaseNormal: 1,\r\n    hpDecRateBaseTemptation: 1.6,\r\n    hpDecRateBasePositionKeepPaseDown: 0.6,\r\n    hpDecRateMultiplyDownSlopeAccelMode: 0.4,\r\n    speedGapParam1: 12,\r\n    speedGapParam1Pow: 144,\r\n    groundModifierMultiHpSub: {\r\n      [GroundType.Turf]: {\r\n        [GroundStatus.Good]: 1,\r\n        [GroundStatus.SlightlyHeavy]: 1,\r\n        [GroundStatus.Heavy]: 1.02,\r\n        [GroundStatus.Bad]: 1.02,\r\n      },\r\n      [GroundType.Dirt]: {\r\n        [GroundStatus.Good]: 1,\r\n        [GroundStatus.SlightlyHeavy]: 1,\r\n        [GroundStatus.Heavy]: 1.01,\r\n        [GroundStatus.Bad]: 1.02,\r\n      },\r\n    },\r\n    hpGutsBase: 1,\r\n    hpGutsCoef: 200,\r\n    hpGutsCoefSqrt: 600,\r\n  },\r\n  course: {\r\n    distanceTargetSpeedCoefficient: 0.001,\r\n    blockPortion: 1 / 24,\r\n    distanceShort: { min: 0, max: 1400 },\r\n    distanceMile: { min: 1401, max: 1800 },\r\n    distanceMiddle: { min: 1801, max: 2400 },\r\n    distanceLong: { min: 2401, max: Number.MAX_VALUE },\r\n    startSpeed: 3,\r\n    phaseStart: 1 / 6,\r\n    phaseMiddle: 4 / 6,\r\n    phaseEnd: 5 / 6,\r\n    positionSense: 10 / 24,\r\n    frameTime: 1 / 15,\r\n    gateTimeRange: { min: 0, max: 0.1 },\r\n    finishTimeCoef: 1.18,\r\n  },\r\n  lastSpurt: {\r\n    determineRateBase: 0.15,\r\n    determineRateWizMultiplier: 0.0005,\r\n    targetDistanceFromGoal: 60,\r\n  },\r\n  slope: {\r\n    downSlopeAccelModeChanceBase: 0.0004,\r\n    downSlopeEndChance: 0.2,\r\n  },\r\n  skill: {\r\n    activatePerMin: 0.2,\r\n    lotActivatePerVal1: 1,\r\n    lotActivatePerVal2: 90,\r\n    abilityTimeDivideDistance: 1000,\r\n    coolDownTimeDivideDistance: 1000,\r\n  },\r\n};\r\n\r\nexport default constant;\r\n","import _ from 'lodash';\r\nimport nr from 'newton-raphson-method';\r\nimport util from 'util';\r\n\r\nimport constant from './constant';\r\nimport Course from './course';\r\nimport Horse, { HorseStat } from './horse';\r\nimport Skill from './skill';\r\nimport {\r\n  RaceResultData, ResultFlag, Season, Weather, IRaceHorse,\r\n} from './common';\r\nimport {\r\n  RunningStyle, CoursePhase, SkillEffectData, SkillData, SkillAbilityData,\r\n} from '../common';\r\n\r\nimport distanceProperRateJson from '../../db/proper_rate/distance.json';\r\nimport groundProperRateJson from '../../db/proper_rate/ground.json';\r\nimport runningStyleProperRateJson from '../../db/proper_rate/running_style.json';\r\n\r\nconst distanceProperRate = distanceProperRateJson as { [key: string]: { speed: number, power: number } };\r\nconst groundProperRate = groundProperRateJson as { [key: string]: number };\r\nconst runningStyleProperRate = runningStyleProperRateJson as { [key: string]: number };\r\n\r\nenum BreakPoint {\r\n  Goal = '0000',\r\n\r\n  FinishFirstBlock = '1000',\r\n  FinishPhaseStart = '1010',\r\n  FinishPhaseMiddle = '1020',\r\n  FinishPhaseEnd = '1030',\r\n  FinishPhaseLastSpurt = '1040',\r\n\r\n  LastSpurt = '2000',\r\n  PositionSense = '2010',\r\n  TriggerSkill = '2020',\r\n  DownSlopeAccelMode = '2030',\r\n  ZeroHp = '2040',\r\n\r\n  FinishBlock = '3000',\r\n  Slope = '3010',\r\n\r\n  None = '9999',\r\n}\r\n\r\ninterface BreakPointData {\r\n  distance?: number,\r\n  time?: number,\r\n  parameters?: any\r\n}\r\n\r\ninterface BreakPointSet {\r\n  [BreakPoint.FinishFirstBlock]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseStart]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseMiddle]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseEnd]?: BreakPointData,\r\n  [BreakPoint.FinishPhaseLastSpurt]?: BreakPointData,\r\n\r\n  [BreakPoint.LastSpurt]?: BreakPointData,\r\n  [BreakPoint.PositionSense]?: BreakPointData,\r\n  [BreakPoint.TriggerSkill]?: BreakPointData[],\r\n  [BreakPoint.DownSlopeAccelMode]?: BreakPointData,\r\n  [BreakPoint.ZeroHp]?: BreakPointData,\r\n\r\n  [BreakPoint.FinishBlock]?: BreakPointData,\r\n  [BreakPoint.Slope]?: BreakPointData[],\r\n\r\n  [BreakPoint.Goal]?: BreakPointData,\r\n\r\n  [BreakPoint.None]?: BreakPointData,\r\n}\r\n\r\nenum Mode {\r\n  StartDash,\r\n  FirstBlock,\r\n  LastSpurt,\r\n  UpSlope,\r\n  DownSlopeAccel,\r\n  Temptation,\r\n  PositionKeepPaceDown,\r\n  ZeroHp,\r\n}\r\n\r\ninterface LastSpurtCandidate {\r\n  time: number,\r\n  targetSpeed: number,\r\n  lastSpurtDistance: number,\r\n}\r\n\r\nclass RaceHorse implements IRaceHorse {\r\n  private _course: Course;\r\n\r\n  private _horse: Horse;\r\n\r\n  private _runningStyle: RunningStyle;\r\n\r\n  private _season: Season;\r\n\r\n  private _weather: Weather;\r\n\r\n  private _postNumber: number;\r\n\r\n  private _popularity: number;\r\n\r\n  private _sameRunningStyleCount: number;\r\n\r\n  private _popularityFirstRunningStyle: RunningStyle;\r\n\r\n  private _statAddition: HorseStat;\r\n\r\n  private _stat: HorseStat;\r\n\r\n  private _generalSkills: SkillData[] = [];\r\n\r\n  private _activateCountSkills: SkillData[] = [];\r\n\r\n  private _skillCooldown: { [key: string]: number } = {};\r\n\r\n  private _speedWizRandomRange: [number, number] = [0, 0];\r\n\r\n  private _speedWizRandom: number = 0;\r\n\r\n  private _phase: CoursePhase = CoursePhase.Start;\r\n\r\n  private _mode: Set<Mode> = new Set<Mode>();\r\n\r\n  private _speed: number = 0;\r\n\r\n  private _lastSpurtTargetSpeed: number = 0;\r\n\r\n  private _hp: number = 0;\r\n\r\n  private _distance: number = 0;\r\n\r\n  private _time: number = 0;\r\n\r\n  private _breakPoints: BreakPointSet = {};\r\n\r\n  private _startDashTargetSpeed: number | undefined = undefined;\r\n\r\n  private _slopePer: number = 0;\r\n\r\n  raceResult: RaceResultData;\r\n\r\n  constructor({\r\n    horse, course, runningStyle, season, weather, postNumber, popularity, sameRunningStyle, popularityFirstRunningStyle,\r\n  }: {\r\n    horse: Horse,\r\n    course: Course,\r\n    runningStyle: RunningStyle,\r\n    season: Season,\r\n    weather: Weather,\r\n    postNumber: number;\r\n    popularity: number;\r\n    sameRunningStyle: number;\r\n    popularityFirstRunningStyle: RunningStyle,\r\n  }) {\r\n    this._horse = horse;\r\n    this._course = course;\r\n    this._runningStyle = runningStyle;\r\n    this._season = season;\r\n    this._weather = weather;\r\n    this._postNumber = postNumber;\r\n    this._popularity = popularity;\r\n    this._sameRunningStyleCount = sameRunningStyle;\r\n    this._popularityFirstRunningStyle = popularityFirstRunningStyle;\r\n    this._statAddition = {\r\n      speed: 0,\r\n      stamina: 0,\r\n      pow: 0,\r\n      guts: 0,\r\n      wiz: 0,\r\n    };\r\n    this._stat = _.clone(this._horse.stat);\r\n    this.raceResult = {\r\n      time: 0,\r\n      hpLeft: 0,\r\n      resultFlags: new Set<ResultFlag>(),\r\n      skillsActivated: {},\r\n      temptation: {\r\n        triggered: false,\r\n        time: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  get course(): Course {\r\n    return this._course;\r\n  }\r\n\r\n  get season(): Season {\r\n    return this._season;\r\n  }\r\n\r\n  get weather(): Weather {\r\n    return this._weather;\r\n  }\r\n\r\n  get postNumber(): number {\r\n    return this._postNumber;\r\n  }\r\n\r\n  get popularity(): number {\r\n    return this._popularity;\r\n  }\r\n\r\n  get sameRunningStyleCount(): number {\r\n    return this._sameRunningStyleCount;\r\n  }\r\n\r\n  get popularityFirstRunningStyle(): RunningStyle {\r\n    return this._popularityFirstRunningStyle;\r\n  }\r\n\r\n  get runningStyle(): RunningStyle {\r\n    return this._runningStyle;\r\n  }\r\n\r\n  get maxHp(): number {\r\n    return this._course.distance + this.stat.stamina * constant.hp.hpMaxCoef[this._runningStyle] * constant.hp.hpInitialVal1;\r\n  }\r\n\r\n  private get hp(): number {\r\n    return this._hp;\r\n  }\r\n\r\n  private get time(): number {\r\n    return this._time;\r\n  }\r\n\r\n  private get lastSpurtDetermineRate(): number {\r\n    return constant.lastSpurt.determineRateBase + constant.lastSpurt.determineRateWizMultiplier * this.stat.wiz;\r\n  }\r\n\r\n  private get originalStat(): HorseStat {\r\n    return this._horse.stat;\r\n  }\r\n\r\n  private get stat(): HorseStat {\r\n    return this._stat;\r\n  }\r\n\r\n  private get skillActivateRate(): number {\r\n    return Math.max(constant.skill.activatePerMin, constant.skill.lotActivatePerVal1 - constant.skill.lotActivatePerVal2 / this.originalStat.wiz);\r\n  }\r\n\r\n  private get minSpeed(): number {\r\n    return this._course.baseTargetSpeed * constant.minSpeed.minSpeedRate\r\n      + Math.sqrt(this.stat.guts * constant.minSpeed.minSpeedGutsCoefSqrt) * constant.minSpeed.minSpeedGutsCoef;\r\n  }\r\n\r\n  private get startDashTargetSpeed(): number {\r\n    if (this._startDashTargetSpeed === undefined) {\r\n      this._startDashTargetSpeed = Math.max(this._course.baseTargetSpeed * constant.startDash.targetSpeedCoefficient, this.minSpeed);\r\n    }\r\n    return this._startDashTargetSpeed;\r\n  }\r\n\r\n  private get baseTargetSpeed(): number {\r\n    return this._course.baseTargetSpeed * constant.targetSpeed.targetSpeedCoefficient[this._runningStyle][this._phase];\r\n  }\r\n\r\n  private get baseTargetSpeedRandom(): number {\r\n    return this.baseTargetSpeed * this._speedWizRandom;\r\n  }\r\n\r\n  private get phaseEndTargetSpeedAddition(): number {\r\n    return Math.sqrt(constant.targetSpeed.phaseEndBaseTargetSpeedCoef * this.stat.speed)\r\n      * constant.targetSpeed.addSpeedParamCoef * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].speed;\r\n  }\r\n\r\n  private get maxLastSpurtTargetSpeed(): number {\r\n    return Math.max(\r\n      (this.baseTargetSpeed + this.phaseEndTargetSpeedAddition + constant.targetSpeed.lastSpurtBaseTargetSpeedAddCoef * this._course.baseTargetSpeed)\r\n          * constant.targetSpeed.baseTargetSpeedCoef\r\n        + this.phaseEndTargetSpeedAddition,\r\n      this.minSpeed,\r\n    );\r\n  }\r\n\r\n  private get lastSpurtTargetSpeed(): number {\r\n    return this._lastSpurtTargetSpeed;\r\n  }\r\n\r\n  private get realTargetSpeed(): number {\r\n    if (this._mode.has(Mode.StartDash) || this._mode.has(Mode.FirstBlock)) {\r\n      return this.startDashTargetSpeed;\r\n    }\r\n    if (this._mode.has(Mode.LastSpurt)) {\r\n      return this.lastSpurtTargetSpeed;\r\n    }\r\n\r\n    const slopePer = this._slopePer;\r\n    let slopeAdd = 0;\r\n    if (slopePer >= 1) {\r\n      slopeAdd = -slopePer * constant.targetSpeed.upSlopeAddSpeedVal1 / this.stat.pow;\r\n    } else if (slopePer <= -1 && this._mode.has(Mode.DownSlopeAccel)) {\r\n      slopeAdd = constant.targetSpeed.downSlopeAddSpeedVal1 + Math.abs(slopePer) / constant.targetSpeed.downSlopeAddSpeedVal2;\r\n    }\r\n    return this.baseTargetSpeed + this.baseTargetSpeedRandom + slopeAdd\r\n      + (this._phase >= 2 ? this.phaseEndTargetSpeedAddition : 0);\r\n  }\r\n\r\n  get targetSpeed(): number {\r\n    if (this._mode.has(Mode.ZeroHp)) {\r\n      return this.minSpeed;\r\n    }\r\n    return Math.max(this.minSpeed, this.realTargetSpeed);\r\n  }\r\n\r\n  refreshSpeedRandomValue(): void {\r\n    this._speedWizRandom = _.random(...this._speedWizRandomRange, true);\r\n  }\r\n\r\n  private get baseAccel(): number {\r\n    return constant.accel.accelPhaseCoef[this._runningStyle][this._phase]\r\n      * Math.sqrt(this.stat.pow * constant.accel.accelPowCoefSqrt)\r\n      * groundProperRate[this._horse.properRate.groundType[this._course.groundType]]\r\n      * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].power;\r\n  }\r\n\r\n  get accel(): number {\r\n    if (this._mode.has(Mode.ZeroHp)) {\r\n      return constant.accel.accelDecreaseZeroHpCoef;\r\n    }\r\n\r\n    if (this._speed <= this.targetSpeed) {\r\n      return (this._mode.has(Mode.StartDash) ? constant.accel.startAccelAdd : 0)\r\n        + this.baseAccel * (this._mode.has(Mode.UpSlope) ? constant.accel.accelPowCoefUpSlope : constant.accel.accelPowCoef);\r\n    }\r\n    return constant.accel.accelDecreaseCoef[this._phase];\r\n  }\r\n\r\n  private get phaseEndHpDecreaseRate() {\r\n    return constant.hp.hpGutsBase + constant.hp.hpGutsCoef / Math.sqrt(constant.hp.hpGutsCoefSqrt * this.stat.guts);\r\n  }\r\n\r\n  private get modeHpDecreaseRate() {\r\n    if (this._mode.has(Mode.Temptation)) {\r\n      return constant.hp.hpDecRateBaseTemptation;\r\n    }\r\n    if (this._mode.has(Mode.PositionKeepPaceDown)) {\r\n      return constant.hp.hpDecRateBasePositionKeepPaseDown;\r\n    }\r\n    return constant.hp.hpDecRateBaseNormal;\r\n  }\r\n\r\n  get hpDecreaseRate(): number {\r\n    return constant.hp.hpDecBase * constant.hp.groundModifierMultiHpSub[this._course.groundType][this._course.groundStatus]\r\n      * (this._phase >= CoursePhase.End ? this.phaseEndHpDecreaseRate : 1)\r\n      * this.modeHpDecreaseRate\r\n      * (this._mode.has(Mode.DownSlopeAccel) ? constant.hp.hpDecRateMultiplyDownSlopeAccelMode : 1);\r\n  }\r\n\r\n  get minBreakpoint(): { breakPoint: BreakPoint, distance: number, parameters: any } {\r\n    let minKey: BreakPoint = BreakPoint.None;\r\n    let minDistance: number = Number.MAX_VALUE;\r\n    let minParameters: any;\r\n    for (const [key, value] of Object.entries(this._breakPoints)) {\r\n      let targetValue: BreakPointData;\r\n      if (Array.isArray(value)) {\r\n        targetValue = value[value.length - 1];\r\n      } else {\r\n        targetValue = value;\r\n      }\r\n\r\n      if (targetValue.distance !== undefined) {\r\n        if (targetValue.distance < minDistance) {\r\n          minDistance = targetValue.distance;\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        } else if (targetValue.distance === minDistance && key < minKey) {\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        }\r\n      } else if (targetValue.time !== undefined) {\r\n        const distance = this._distance + (targetValue.time - this._time) * this._speed;\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        } else if (targetValue.distance === minDistance && key < minKey) {\r\n          minKey = key as BreakPoint;\r\n          minParameters = targetValue.parameters;\r\n        }\r\n      }\r\n    }\r\n    return { breakPoint: minKey, distance: minDistance, parameters: minParameters };\r\n  }\r\n\r\n  private static getAccelHpDecrease({\r\n    initialSpeed, accel, time, hpDecreaseRate, baseTargetSpeed,\r\n  }: {\r\n    initialSpeed: number, accel: number, time: number, hpDecreaseRate: number, baseTargetSpeed: number,\r\n  }): number {\r\n    const speedCoefficient = (initialSpeed - baseTargetSpeed + constant.hp.speedGapParam1);\r\n    return hpDecreaseRate\r\n      * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\r\n      / constant.hp.speedGapParam1Pow;\r\n  }\r\n\r\n  private static getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }: { speed: number, hpDecreaseRate: number, baseTargetSpeed: number }) {\r\n    return hpDecreaseRate * (speed - baseTargetSpeed + constant.hp.speedGapParam1) ** 2 / constant.hp.speedGapParam1Pow;\r\n  }\r\n\r\n  private static getRunHpDecrease({\r\n    speed, hpDecreaseRate, baseTargetSpeed, time,\r\n  }: {\r\n    speed: number, hpDecreaseRate: number, baseTargetSpeed: number, time: number,\r\n  }): number {\r\n    return RaceHorse.getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }) * time;\r\n  }\r\n\r\n  private static accelToTargetSpeed({\r\n    accel, currentSpeed, targetSpeed, maxDistance, hpDecreaseRate, baseTargetSpeed,\r\n  }: {\r\n    accel: number,\r\n    currentSpeed: number,\r\n    targetSpeed: number,\r\n    maxDistance: number,\r\n    hpDecreaseRate: number,\r\n    baseTargetSpeed: number\r\n  }) {\r\n    const targetSpeedByDistanceSquare = currentSpeed ** 2 + 2 * accel * maxDistance;\r\n    const finalSpeed = accel > 0\r\n      ? Math.min(targetSpeed, Math.sqrt(targetSpeedByDistanceSquare))\r\n      : Math.max(targetSpeed, Math.sqrt(Math.max(targetSpeedByDistanceSquare, 0)));\r\n    const time = (finalSpeed - currentSpeed) / accel;\r\n    const distance = (currentSpeed + currentSpeed + accel * time) * time / 2;\r\n    const hpCost = RaceHorse.getAccelHpDecrease({\r\n      initialSpeed: currentSpeed,\r\n      accel,\r\n      time,\r\n      hpDecreaseRate,\r\n      baseTargetSpeed,\r\n    });\r\n    return {\r\n      time, distance, hpCost, finalSpeed,\r\n    };\r\n  }\r\n\r\n  private doGateOpen(): void {\r\n    this._time += Math.floor(_.random(constant.course.gateTimeRange.min, constant.course.gateTimeRange.max, true) / constant.course.frameTime)\r\n      * constant.course.frameTime;\r\n    this._mode.add(Mode.StartDash);\r\n    this._breakPoints[BreakPoint.FinishBlock] = { distance: this._course.blockDistance };\r\n    this._breakPoints[BreakPoint.Goal] = { distance: this._course.distance };\r\n  }\r\n\r\n  private finishStartDash(): void {\r\n    const { accel, targetSpeed } = this;\r\n    const {\r\n      time, distance, hpCost, finalSpeed,\r\n    } = RaceHorse.accelToTargetSpeed({\r\n      accel,\r\n      currentSpeed: this._speed,\r\n      targetSpeed,\r\n      maxDistance: this._course.distance,\r\n      hpDecreaseRate: this.hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n    this._time += time;\r\n    this._distance += distance;\r\n    this._hp -= hpCost;\r\n    this._speed = finalSpeed;\r\n\r\n    this._mode.delete(Mode.StartDash);\r\n    if (this._runningStyle === RunningStyle.Sashi || this._runningStyle === RunningStyle.Oikomi) {\r\n      this._breakPoints[BreakPoint.FinishFirstBlock] = { distance: this._course.blockDistance };\r\n      this._mode.add(Mode.FirstBlock);\r\n    } else {\r\n      this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\r\n    }\r\n  }\r\n\r\n  private calculateAccelAndRun(distance: number) {\r\n    const { accel, targetSpeed } = this;\r\n    const {\r\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\r\n    } = RaceHorse.accelToTargetSpeed({\r\n      accel,\r\n      currentSpeed: this._speed,\r\n      targetSpeed,\r\n      maxDistance: distance - this._distance,\r\n      hpDecreaseRate: this.hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n\r\n    const runDistance = (distance - this._distance - accelDistance);\r\n    const runTime = runDistance / finalSpeed;\r\n    const runHpCost = RaceHorse.getRunHpDecrease({\r\n      speed: finalSpeed,\r\n      time: runTime,\r\n      hpDecreaseRate: this.hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n\r\n    return {\r\n      time: accelTime + runTime,\r\n      distance: accelDistance + runDistance,\r\n      hpCost: accelHpCost + runHpCost,\r\n      finalSpeed,\r\n    };\r\n  }\r\n\r\n  private doAccelAndRun(distance: number) {\r\n    const { accel, targetSpeed, hpDecreaseRate } = this;\r\n    const {\r\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\r\n    } = RaceHorse.accelToTargetSpeed({\r\n      accel,\r\n      currentSpeed: this._speed,\r\n      targetSpeed,\r\n      maxDistance: distance - this._distance,\r\n      hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n\r\n    if (accelHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\r\n      /**\r\n       * Accel HP cost formula:\r\n       * hpDecrease = hpDecreaseRate * (accel^2 * time^3 / 3 + accel * time^2 * speedCoefficient + speedCoefficient^2 * time)/ 144\r\n       * speedCoefficient = initialSpeed - baseTargetSpeed + 12\r\n       * Given accel and initialSpeed, hpDecrease = this.hp is a cubic equation of time.\r\n       * It's hard to get a formula solution, but we can get a approximate value by applying Newton's Method.\r\n       */\r\n      const speedCoefficient = this._speed - this._course.baseTargetSpeed + constant.hp.speedGapParam1;\r\n      const realAccelTime = nr(\r\n        (time: number) => (\r\n          hpDecreaseRate * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\r\n        ),\r\n        (time: number) => (\r\n          hpDecreaseRate * (accel ** 2 * time ** 2 + accel * time * 2 * speedCoefficient + speedCoefficient ** 2)\r\n        ),\r\n        10,\r\n      );\r\n      const realAccelDistance = (this._speed + this._speed + accel * accelTime) * accelTime / 2;\r\n      this._time += realAccelTime;\r\n      this._distance += realAccelDistance;\r\n      this._hp = 0;\r\n      this._mode.add(Mode.ZeroHp);\r\n      delete this._breakPoints[BreakPoint.ZeroHp];\r\n      return false;\r\n    }\r\n\r\n    this._hp -= accelHpCost;\r\n    this._time += accelTime;\r\n    this._distance += accelDistance;\r\n    this._speed = finalSpeed;\r\n\r\n    const speedHpDecreaseRate = RaceHorse.getSpeedHpDecrease({\r\n      speed: this._speed,\r\n      hpDecreaseRate,\r\n      baseTargetSpeed: this._course.baseTargetSpeed,\r\n    });\r\n    const runDistance = distance - this._distance;\r\n    const runTime = runDistance / this._speed;\r\n    const runHpCost = speedHpDecreaseRate * runTime;\r\n\r\n    if (runHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\r\n      const realRunTime = this._hp / speedHpDecreaseRate;\r\n      const realRunDistance = realRunTime * this._speed;\r\n      this._time += realRunTime;\r\n      this._distance += realRunDistance;\r\n      this._hp = 0;\r\n      this._mode.add(Mode.ZeroHp);\r\n      delete this._breakPoints[BreakPoint.ZeroHp];\r\n      return false;\r\n    }\r\n\r\n    this._hp -= runHpCost;\r\n    this._time += runTime;\r\n    this._distance += runDistance;\r\n    if (!this._mode.has(Mode.ZeroHp)) {\r\n      this._breakPoints[BreakPoint.ZeroHp] = { distance: this._distance + this.hp / speedHpDecreaseRate * this._speed };\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private finishFirstBlock = () => {\r\n    this._mode.delete(Mode.FirstBlock);\r\n    this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\r\n  };\r\n\r\n  private finishBlock = () => {\r\n    if (!this._mode.has(Mode.LastSpurt) && this._course.distance > this._distance) {\r\n      this.refreshSpeedRandomValue();\r\n      this._breakPoints[BreakPoint.FinishBlock] = { distance: this._distance + this._course.blockDistance };\r\n    }\r\n  };\r\n\r\n  private finishPhaseStart = () => {\r\n    this._phase = CoursePhase.Middle;\r\n    this._breakPoints[BreakPoint.FinishPhaseMiddle] = { distance: this._course.phaseMiddleDistance };\r\n  };\r\n\r\n  private static randomByCandidates(lastSpurtSpeedCandidates: LastSpurtCandidate[], determineRate: number): LastSpurtCandidate {\r\n    const randomNumber = Math.random();\r\n    const targetItem = Math.min(\r\n      lastSpurtSpeedCandidates.length - 1,\r\n      Math.floor(Math.log(randomNumber) / Math.log(1 - determineRate)),\r\n    );\r\n    return lastSpurtSpeedCandidates[targetItem];\r\n  }\r\n\r\n  private calculateLastSpurt = (): { lastSpurtDistance: number, lastSpurtTargetSpeed: number } => {\r\n    this._mode.add(Mode.LastSpurt);\r\n    this._lastSpurtTargetSpeed = this.maxLastSpurtTargetSpeed;\r\n    const { hpCost, finalSpeed } = this.calculateAccelAndRun(this._course.distance - constant.lastSpurt.targetDistanceFromGoal);\r\n    this._mode.delete(Mode.LastSpurt);\r\n    if (hpCost <= this._hp && finalSpeed === this._lastSpurtTargetSpeed) {\r\n      this.raceResult.resultFlags.add(ResultFlag.FullLastSpurt);\r\n      return {\r\n        lastSpurtDistance: this._distance,\r\n        lastSpurtTargetSpeed: finalSpeed,\r\n      };\r\n    }\r\n\r\n    let lastSpurtSpeedCandidates: LastSpurtCandidate[] = [];\r\n    const phaseEndBaseTargetSpeed = this.baseTargetSpeed + this.phaseEndTargetSpeedAddition;\r\n    const maxDistance = this._course.distance - this._distance - constant.lastSpurt.targetDistanceFromGoal;\r\n    const { accel, hpDecreaseRate } = this;\r\n    const { baseTargetSpeed } = this._course;\r\n    for (; this.lastSpurtTargetSpeed >= phaseEndBaseTargetSpeed; this._lastSpurtTargetSpeed -= constant.targetSpeed.lastSpurtTargetSpeedStep) {\r\n      const {\r\n        time: phaseEndAccelTime,\r\n        distance: phaseEndAccelDistance,\r\n        hpCost: phaseEndAccelHpCost,\r\n        finalSpeed: phaseEndFinalSpeed,\r\n      } = RaceHorse.accelToTargetSpeed({\r\n        accel,\r\n        currentSpeed: this._speed,\r\n        targetSpeed: phaseEndBaseTargetSpeed,\r\n        maxDistance,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n      const {\r\n        time: lastSpurtAccelTime,\r\n        distance: lastSpurtAccelDistance,\r\n        hpCost: lastSpurtAccelHpCost,\r\n      } = RaceHorse.accelToTargetSpeed({\r\n        accel,\r\n        currentSpeed: phaseEndFinalSpeed,\r\n        targetSpeed: this.lastSpurtTargetSpeed,\r\n        maxDistance: maxDistance - phaseEndAccelDistance,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n      const runDistance = maxDistance - phaseEndAccelDistance - lastSpurtAccelDistance;\r\n      const phaseEndRunTime = runDistance / phaseEndBaseTargetSpeed;\r\n      const phaseEndRunHpCost = RaceHorse.getRunHpDecrease({\r\n        speed: phaseEndBaseTargetSpeed,\r\n        time: phaseEndRunTime,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n      const lastSpurtRunTime = runDistance / this.lastSpurtTargetSpeed;\r\n      const lastSpurtRunHpCost = RaceHorse.getRunHpDecrease({\r\n        speed: this.lastSpurtTargetSpeed,\r\n        time: lastSpurtRunTime,\r\n        hpDecreaseRate,\r\n        baseTargetSpeed,\r\n      });\r\n\r\n      if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + lastSpurtRunHpCost) {\r\n        lastSpurtSpeedCandidates.push({\r\n          lastSpurtDistance: this._distance,\r\n          targetSpeed: this.lastSpurtTargetSpeed,\r\n          time: phaseEndAccelTime + lastSpurtAccelTime + lastSpurtRunTime,\r\n        });\r\n      } else if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost) {\r\n        const hpLeft = this.hp - (phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost);\r\n        const hpDiff = lastSpurtRunHpCost - phaseEndRunHpCost;\r\n        lastSpurtSpeedCandidates.push({\r\n          lastSpurtDistance: this._distance + phaseEndAccelDistance + runDistance * (1 - hpLeft / hpDiff),\r\n          targetSpeed: this.lastSpurtTargetSpeed,\r\n          time: phaseEndAccelTime + lastSpurtAccelTime + (hpLeft / hpDiff) * lastSpurtRunTime + (1 - hpLeft / hpDiff) * phaseEndRunTime,\r\n        });\r\n      }\r\n    }\r\n    lastSpurtSpeedCandidates.push({\r\n      lastSpurtDistance: Number.MAX_VALUE,\r\n      targetSpeed: phaseEndBaseTargetSpeed,\r\n      time: Number.MAX_VALUE,\r\n    });\r\n    lastSpurtSpeedCandidates = _.sortBy(lastSpurtSpeedCandidates, ['time']);\r\n    const candidate = RaceHorse.randomByCandidates(lastSpurtSpeedCandidates, this.lastSpurtDetermineRate);\r\n    return {\r\n      lastSpurtDistance: candidate.lastSpurtDistance,\r\n      lastSpurtTargetSpeed: candidate.targetSpeed,\r\n    };\r\n  };\r\n\r\n  private finishPhaseMiddle = () => {\r\n    this._phase = CoursePhase.End;\r\n    const { lastSpurtDistance, lastSpurtTargetSpeed } = this.calculateLastSpurt();\r\n    this._breakPoints[BreakPoint.FinishPhaseEnd] = { distance: this._course.phaseEndDistance };\r\n    this._breakPoints[BreakPoint.LastSpurt] = { distance: lastSpurtDistance };\r\n    this._lastSpurtTargetSpeed = lastSpurtTargetSpeed;\r\n  };\r\n\r\n  private finishPhaseEnd = () => {\r\n    this._phase = CoursePhase.LastSpurt;\r\n    this._breakPoints[BreakPoint.FinishPhaseLastSpurt] = { distance: this._course.distance };\r\n  };\r\n\r\n  private doLastSpurt = () => {\r\n    this._mode.add(Mode.LastSpurt);\r\n    delete this._breakPoints[BreakPoint.FinishBlock];\r\n  };\r\n\r\n  private finishLastSpurt = () => {};\r\n\r\n  private triggerPositionSense = () => {};\r\n\r\n  private zeroHp = () => {\r\n    if (this.hp <= 0) {\r\n      this._mode.add(Mode.ZeroHp);\r\n    }\r\n  };\r\n\r\n  private changeSlope = ({ slopePer }: { slopePer: number }) => {\r\n    if (this._slopePer > -1 && slopePer <= -1) {\r\n      this.checkDownSlopeAccelMode();\r\n    } else if (this._slopePer <= -1 && slopePer > -1) {\r\n      this._mode.delete(Mode.DownSlopeAccel);\r\n      delete this._breakPoints[BreakPoint.DownSlopeAccelMode];\r\n    }\r\n    this._slopePer = slopePer;\r\n  };\r\n\r\n  private checkDownSlopeAccelMode = () => {\r\n    if (this._mode.has(Mode.DownSlopeAccel)) {\r\n      if (Math.random() <= constant.slope.downSlopeEndChance) {\r\n        this._mode.delete(Mode.DownSlopeAccel);\r\n      } else {\r\n        this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\r\n      }\r\n    } else if (Math.random() <= this.stat.wiz * constant.slope.downSlopeAccelModeChanceBase) {\r\n      this._mode.add(Mode.DownSlopeAccel);\r\n      this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\r\n    }\r\n  };\r\n\r\n  private activateAbility({ skillId, ability }: { skillId: string, ability: SkillAbilityData }) {\r\n    if (!(skillId in this.raceResult.skillsActivated)) {\r\n      this.raceResult.skillsActivated[skillId] = { count: 1 };\r\n    } else {\r\n      this.raceResult.skillsActivated[skillId].count += 1;\r\n    }\r\n\r\n    for (const effect of ability.effects) {\r\n    }\r\n  }\r\n\r\n  private triggerSkill = () => {};\r\n\r\n  private reachGoal = () => {\r\n    this._breakPoints = {};\r\n  };\r\n\r\n  private readonly breakPointMap: { [key in BreakPoint]: (parameters: any) => void } = {\r\n    [BreakPoint.None]: () => {},\r\n    [BreakPoint.FinishFirstBlock]: this.finishFirstBlock,\r\n    [BreakPoint.FinishBlock]: this.finishBlock,\r\n    [BreakPoint.FinishPhaseStart]: this.finishPhaseStart,\r\n    [BreakPoint.FinishPhaseMiddle]: this.finishPhaseMiddle,\r\n    [BreakPoint.FinishPhaseEnd]: this.finishPhaseEnd,\r\n    [BreakPoint.LastSpurt]: this.doLastSpurt,\r\n    [BreakPoint.FinishPhaseLastSpurt]: this.finishLastSpurt,\r\n    [BreakPoint.PositionSense]: this.triggerPositionSense,\r\n    [BreakPoint.ZeroHp]: this.zeroHp,\r\n    [BreakPoint.Slope]: this.changeSlope,\r\n    [BreakPoint.DownSlopeAccelMode]: this.checkDownSlopeAccelMode,\r\n    [BreakPoint.TriggerSkill]: this.triggerSkill,\r\n    [BreakPoint.Goal]: this.reachGoal,\r\n  };\r\n\r\n  buildSlopeBreakPoints() {\r\n    const slopePers = this._course.allSlopePers;\r\n    for (let i = slopePers.length - 1; i > 0; i -= 1) {\r\n      this.addBreakPoint(BreakPoint.Slope, {\r\n        distance: slopePers[i].distance,\r\n        parameters: {\r\n          slopePer: slopePers[i].slope_per,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  addBreakPoint(type: BreakPoint, data: BreakPointData) {\r\n    switch (type) {\r\n      case BreakPoint.TriggerSkill:\r\n      case BreakPoint.Slope:\r\n        if (!(type in this._breakPoints)) {\r\n          this._breakPoints[type] = [data];\r\n        } else {\r\n          this._breakPoints[type]?.push(data);\r\n        }\r\n        break;\r\n      default:\r\n        this._breakPoints[type] = data;\r\n        break;\r\n    }\r\n  }\r\n\r\n  removeBreakPoint(type: BreakPoint) {\r\n    switch (type) {\r\n      case BreakPoint.TriggerSkill:\r\n      case BreakPoint.Slope:\r\n        this._breakPoints[type]?.pop();\r\n        if (this._breakPoints[type]?.length === 0) {\r\n          delete this._breakPoints[type];\r\n        }\r\n        break;\r\n      default:\r\n        delete this._breakPoints[type];\r\n        break;\r\n    }\r\n  }\r\n\r\n  getSkillTriggerStat(skill: SkillData): { distances: number[], specific: boolean } {\r\n    const course = this._course;\r\n    return { distances: [], specific: false };\r\n  }\r\n\r\n  populateSkills() {\r\n    const { skillActivateRate } = this;\r\n    const generalTriggerDistances = new Set<number>();\r\n    const specificTriggerDistances = [];\r\n    for (const skill of this._horse.skills) {\r\n      if (Skill.matchBase(skill, this) && Math.random() <= skillActivateRate) {\r\n        if (skill.abilities[0].ability_time === -0.0001) {\r\n          this.activateAbility({ skillId: skill.id, ability: skill.abilities[0] });\r\n        } else {\r\n          const { distances, specific } = this.getSkillTriggerStat(skill);\r\n          if (specific) {\r\n            specificTriggerDistances.push({ distances, skill });\r\n          } else {\r\n            for (const distance of distances) {\r\n              generalTriggerDistances.add(distance);\r\n            }\r\n            this._generalSkills.push(skill);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  simulate() {\r\n    this._speed = constant.course.startSpeed;\r\n    this._time = 0;\r\n    this._distance = 0;\r\n    this._hp = this.maxHp;\r\n    this._mode = new Set();\r\n    this._phase = CoursePhase.Start;\r\n    this._breakPoints = {};\r\n    this._statAddition = {\r\n      speed: 0,\r\n      stamina: 0,\r\n      pow: 0,\r\n      guts: 0,\r\n      wiz: 0,\r\n    };\r\n    this._stat = _.clone(this._horse.stat);\r\n    this._generalSkills = [];\r\n    this._activateCountSkills = [];\r\n    this._skillCooldown = {};\r\n\r\n    this.populateSkills();\r\n\r\n    const upperBound = (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\r\n    * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\r\n    const lowerBound = constant.targetSpeed.baseTargetSpeedRandomMinusVal1\r\n      + (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\r\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\r\n    this._speedWizRandomRange = [lowerBound, upperBound];\r\n    this.refreshSpeedRandomValue();\r\n\r\n    this.buildSlopeBreakPoints();\r\n    this.doGateOpen();\r\n    this.debugOutput();\r\n    this.finishStartDash();\r\n    this.debugOutput();\r\n\r\n    while (Object.keys(this._breakPoints).length > 0) {\r\n      const { breakPoint, distance, parameters } = this.minBreakpoint;\r\n      if (this.doAccelAndRun(distance)) {\r\n        this.removeBreakPoint(breakPoint);\r\n        this.breakPointMap[breakPoint](parameters);\r\n      }\r\n      this.debugOutput();\r\n    }\r\n\r\n    this.raceResult.time = this._time;\r\n    this.raceResult.hpLeft = this._hp;\r\n  }\r\n\r\n  debugOutput() {\r\n    return;\r\n    const debugData = {\r\n      hp: this.hp,\r\n      speed: this._speed,\r\n      time: this._time,\r\n      distance: this._distance,\r\n      phase: this._phase,\r\n      mode: Array.from(this._mode),\r\n      breakPoints: util.inspect(this._breakPoints, { depth: null }),\r\n      slopePer: this._slopePer,\r\n    };\r\n    console.log(debugData);\r\n  }\r\n}\r\n\r\nexport default RaceHorse;\r\n","import React, { Component } from 'react';\r\n\r\nimport _ from 'lodash';\r\nimport Common, { CourseDataType, LocalizationData } from '../../library/common';\r\nimport constant from '../../library/race/constant';\r\nimport { RaceResultData, ResultFlag } from '../../library/race/common';\r\n\r\nimport '../component.css';\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  raceResults: RaceResultData[];\r\n  course?: CourseDataType,\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass RaceResult extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { localization, raceResults, course } = this.props;\r\n    if (course === undefined || raceResults.length === 0) {\r\n      return (\r\n        <>\r\n        </>\r\n      );\r\n    }\r\n\r\n    const timeAverage = _.meanBy(raceResults, 'time');\r\n    const timeShown: string = (timeAverage * constant.course.finishTimeCoef > parseFloat(course.finish_time_min) / 10000)\r\n      ? Common.secondToTime(timeAverage * constant.course.finishTimeCoef)\r\n      : localization.site.TimeMin;\r\n\r\n    let timeDeviationSum = 0;\r\n    let fullLastSpurtCount = 0;\r\n    let hpLeftSum = 0;\r\n    for (const result of raceResults) {\r\n      timeDeviationSum += (result.time - timeAverage) ** 2;\r\n      if (result.resultFlags.has(ResultFlag.FullLastSpurt)) {\r\n        fullLastSpurtCount += 1;\r\n      }\r\n      hpLeftSum += result.hpLeft;\r\n    }\r\n    return (\r\n      <table>\r\n        <tr>\r\n          <th>{localization.site.TimeAverage}</th>\r\n          <th>{localization.site.TimeStandardDeviation}</th>\r\n          <th>{localization.site.TimeShown}</th>\r\n          <th>{localization.site.FullLastSpurtRate}</th>\r\n          <th>{localization.site.HpLeftAverage}</th>\r\n        </tr>\r\n        <tr>\r\n          <td>{timeAverage.toFixed(3)}</td>\r\n          <td>{Math.sqrt(timeDeviationSum / raceResults.length).toFixed(3)}</td>\r\n          <td>{timeShown}</td>\r\n          <td>{(fullLastSpurtCount / raceResults.length).toLocaleString('en', { style: 'percent' })}</td>\r\n          <td>{(hpLeftSum / raceResults.length).toFixed(3)}</td>\r\n        </tr>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RaceResult;\r\n","import {\r\n  DistanceType, ProperRate, GroundType, RunningStyle, SkillData,\r\n} from '../common';\r\n\r\nexport interface HorseStat {\r\n  speed: number;\r\n  stamina: number;\r\n  pow: number;\r\n  guts: number;\r\n  wiz: number;\r\n}\r\n\r\nexport interface HorseProperRate {\r\n  distanceType: { [key in DistanceType]: ProperRate },\r\n  groundType: { [key in GroundType]: ProperRate },\r\n  runningStyle: { [key in RunningStyle]: ProperRate },\r\n}\r\n\r\nclass Horse {\r\n  stat: HorseStat;\r\n\r\n  properRate: HorseProperRate;\r\n\r\n  skills: SkillData[];\r\n\r\n  constructor(\r\n    { stat, properRate, skills }: {\r\n      stat: HorseStat,\r\n      properRate: HorseProperRate,\r\n      skills: SkillData[],\r\n    },\r\n  ) {\r\n    this.stat = stat;\r\n    this.properRate = properRate;\r\n    this.skills = skills;\r\n  }\r\n}\r\n\r\nexport default Horse;\r\n","import constant from './constant';\r\nimport {\r\n  DistanceType, GroundType, GroundStatus, CourseDataType, TurnType,\r\n} from '../common';\r\n\r\nclass Course {\r\n  private _courseData: CourseDataType;\r\n\r\n  groundStatus: GroundStatus;\r\n\r\n  static getDistanceType(distance: number): DistanceType {\r\n    if (distance >= constant.course.distanceShort.min && distance <= constant.course.distanceShort.max) {\r\n      return DistanceType.Short;\r\n    }\r\n    if (distance >= constant.course.distanceMile.min && distance <= constant.course.distanceMile.max) {\r\n      return DistanceType.Mile;\r\n    }\r\n    if (distance >= constant.course.distanceMiddle.min && distance <= constant.course.distanceMiddle.max) {\r\n      return DistanceType.Middle;\r\n    }\r\n    if (distance >= constant.course.distanceLong.min && distance <= constant.course.distanceLong.max) {\r\n      return DistanceType.Long;\r\n    }\r\n    return DistanceType.Long;\r\n  }\r\n\r\n  constructor({ courseData, groundStatus } : { courseData: CourseDataType, groundStatus: GroundStatus }) {\r\n    this._courseData = courseData;\r\n    this.groundStatus = groundStatus;\r\n  }\r\n\r\n  get distance(): number {\r\n    return this._courseData.distance;\r\n  }\r\n\r\n  get distanceType(): DistanceType {\r\n    return Course.getDistanceType(this.distance);\r\n  }\r\n\r\n  get groundType(): GroundType {\r\n    return this._courseData.ground;\r\n  }\r\n\r\n  get turnType(): TurnType {\r\n    return this._courseData.turn;\r\n  }\r\n\r\n  get blockDistance(): number {\r\n    return this.distance * constant.course.blockPortion;\r\n  }\r\n\r\n  get phaseStartDistance(): number {\r\n    return this.distance * constant.course.phaseStart;\r\n  }\r\n\r\n  get phaseMiddleDistance(): number {\r\n    return this.distance * constant.course.phaseMiddle;\r\n  }\r\n\r\n  get phaseEndDistance(): number {\r\n    return this.distance * constant.course.phaseEnd;\r\n  }\r\n\r\n  get positionSenseDistance(): number {\r\n    return this.distance * constant.course.positionSense;\r\n  }\r\n\r\n  get baseTargetSpeed(): number {\r\n    return 20 - (this.distance - constant.baseDistance) * constant.course.distanceTargetSpeedCoefficient;\r\n  }\r\n\r\n  get allSlopePers(): { distance: number, slope_per: number }[] {\r\n    return this._courseData.slope_per;\r\n  }\r\n\r\n  get trackId(): string {\r\n    return this._courseData.race_track_id;\r\n  }\r\n}\r\n\r\nexport default Course;\r\n","import {\r\n  SkillConditionObject, SkillConditionObjectFormula, SkillConditionObjectLogical, SkillConditionOperatorsFormula,\r\n} from '../common';\r\nimport { IRaceHorse } from './common';\r\n\r\nclass Skill {\r\n  static matchBase(condition: SkillConditionObject, raceHorse: IRaceHorse): boolean {\r\n    if (condition === {}) {\r\n      return true;\r\n    }\r\n\r\n    const realCondition = condition as SkillConditionObjectLogical | SkillConditionObjectFormula;\r\n    if (realCondition.operator === 'and') {\r\n      const andCondition = realCondition as SkillConditionObjectLogical;\r\n      for (const childCondition of andCondition.items) {\r\n        if (!Skill.matchBase(childCondition, raceHorse)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (realCondition.operator === 'or') {\r\n      const orCondition = realCondition as SkillConditionObjectLogical;\r\n      for (const childCondition of orCondition.items) {\r\n        if (Skill.matchBase(childCondition, raceHorse)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const formulaCondition = realCondition as SkillConditionObjectFormula;\r\n    const targetValue = Skill.getTargetValue(formulaCondition, raceHorse);\r\n    if (typeof targetValue === 'boolean') {\r\n      return targetValue;\r\n    }\r\n\r\n    switch (formulaCondition.operator) {\r\n      case SkillConditionOperatorsFormula.GreaterThan:\r\n        return targetValue > parseFloat(formulaCondition.value);\r\n      case SkillConditionOperatorsFormula.GreaterThanOrEqualTo:\r\n        return targetValue >= parseFloat(formulaCondition.value);\r\n      case SkillConditionOperatorsFormula.LessThan:\r\n        return targetValue < parseFloat(formulaCondition.value);\r\n      case SkillConditionOperatorsFormula.LessThanOrEqualTo:\r\n        return targetValue <= parseFloat(formulaCondition.value);\r\n      case SkillConditionOperatorsFormula.EqualTo:\r\n        return targetValue === formulaCondition.value;\r\n      case SkillConditionOperatorsFormula.NotEqualTo:\r\n        return targetValue !== formulaCondition.value;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  static getTargetValue(condition: SkillConditionObjectFormula, raceHorse: IRaceHorse): string | number | boolean {\r\n    switch (condition.key) {\r\n      case 'rotation':\r\n        return raceHorse.course.turnType;\r\n      case 'track_id':\r\n        return raceHorse.course.trackId;\r\n      case 'is_basis_distance':\r\n        return raceHorse.course.distance % 400 === 0 ? '1' : '0';\r\n      case 'season':\r\n        return raceHorse.season;\r\n      case 'weather':\r\n        return raceHorse.weather;\r\n      case 'post_number':\r\n        return raceHorse.postNumber;\r\n      case 'running_style_count_same':\r\n        return raceHorse.sameRunningStyleCount;\r\n      case 'running_style_equal_popularity_one':\r\n        return raceHorse.popularityFirstRunningStyle === raceHorse.runningStyle ? '1' : '0';\r\n      case 'popularity':\r\n        return raceHorse.popularity;\r\n      case 'grade':\r\n        // TODO\r\n        return true;\r\n      case 'running_style':\r\n        return raceHorse.runningStyle;\r\n      case 'random_lot':\r\n        // Verification needed.\r\n        return Math.random() * 100 <= parseFloat(condition.value);\r\n      case 'same_skill_horse_count':\r\n        // TODO\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Skill;\r\n","import _ from 'lodash';\r\nimport {\r\n  Button, Col, InputNumber, Row, Progress,\r\n} from 'antd';\r\nimport React, { Component } from 'react';\r\nimport Promise from 'bluebird';\r\n\r\nimport {\r\n  CourseDataType, DistanceType, GroundStatus, GroundType, LocalizationData, RunningStyle, SkillData,\r\n} from '../../library/common';\r\nimport { RaceResultData, Season, Weather } from '../../library/race/common';\r\nimport {\r\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate,\r\n} from './common';\r\nimport Horse from '../../library/race/horse';\r\nimport Course from '../../library/race/course';\r\nimport RaceHorse from '../../library/race/race-horse';\r\n\r\nimport skillJson from '../../db/skill.json';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport '../component.css';\r\n\r\nconst skillData = skillJson as { [key: string]: SkillData };\r\n\r\ninterface SimulatorState extends IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\r\n  strategy?: string,\r\n  groundStatus?: string,\r\n\r\n  racecourse?: string,\r\n  ground?: string,\r\n  distance?: number,\r\n  course?: CourseDataType,\r\n\r\n  skills?: string[],\r\n}\r\n\r\ninterface IProps {\r\n  localization: LocalizationData;\r\n  setData: (key: string, value: any) => void,\r\n  state: SimulatorState,\r\n}\r\n\r\ninterface IState {\r\n  running: boolean,\r\n  finished: number,\r\n  rounds: number,\r\n}\r\n\r\nclass SimulatorCalculator extends Component<IProps, IState> {\r\n  static readonly concurrency = 50;\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n      running: false,\r\n      rounds: 1000,\r\n      finished: 0,\r\n    };\r\n  }\r\n\r\n  calculate = async () => {\r\n    this.setState({\r\n      running: true,\r\n      finished: 0,\r\n    });\r\n    const { state, setData } = this.props;\r\n    const {\r\n      speed, stamina, pow, guts, wiz,\r\n      strategy, groundStatus, course,\r\n      skills,\r\n      groundTypeTurf, groundTypeDirt,\r\n      distanceTypeShort, distanceTypeMile, distanceTypeMiddle, distanceTypeLong,\r\n      runningStyleNige, runningStyleSenko, runningStyleSashi, runningStyleOikomi,\r\n    } = state;\r\n    const { rounds } = this.state;\r\n\r\n    const targetCourse = new Course({\r\n      courseData: course as CourseDataType,\r\n      groundStatus: groundStatus as GroundStatus,\r\n    });\r\n    const targetHorse = new Horse({\r\n      stat: {\r\n        speed, stamina, pow, guts, wiz,\r\n      },\r\n      properRate: {\r\n        groundType: {\r\n          [GroundType.Turf]: groundTypeTurf,\r\n          [GroundType.Dirt]: groundTypeDirt,\r\n        },\r\n        distanceType: {\r\n          [DistanceType.Short]: distanceTypeShort,\r\n          [DistanceType.Mile]: distanceTypeMile,\r\n          [DistanceType.Middle]: distanceTypeMiddle,\r\n          [DistanceType.Long]: distanceTypeLong,\r\n        },\r\n        runningStyle: {\r\n          [RunningStyle.Nige]: runningStyleNige,\r\n          [RunningStyle.Senko]: runningStyleSenko,\r\n          [RunningStyle.Sashi]: runningStyleSashi,\r\n          [RunningStyle.Oikomi]: runningStyleOikomi,\r\n        },\r\n      },\r\n      skills: _.map(skills, (skillId) => (skillData[skillId])),\r\n    });\r\n\r\n    let counter = 0;\r\n    let started = 0;\r\n    const worksPerThread = Math.ceil(rounds / SimulatorCalculator.concurrency);\r\n    const raceResults: RaceResultData[] = [];\r\n    await Promise.map(\r\n      new Array(SimulatorCalculator.concurrency),\r\n      async () => {\r\n        const raceHorse = new RaceHorse({\r\n          horse: targetHorse,\r\n          course: targetCourse,\r\n          runningStyle: strategy as RunningStyle,\r\n          season: Season.Spring,\r\n          weather: Weather.Sunny,\r\n          postNumber: 1,\r\n          popularity: 1,\r\n          sameRunningStyle: 0,\r\n          popularityFirstRunningStyle: strategy as RunningStyle,\r\n        });\r\n        for (let i = 0; i < worksPerThread && started < rounds; i += 1) {\r\n          started += 1;\r\n          raceHorse.simulate();\r\n          raceResults.push(raceHorse.raceResult);\r\n          counter += 1;\r\n          this.setState({ finished: counter });\r\n          await Promise.delay(0);\r\n        }\r\n      },\r\n      { concurrency: SimulatorCalculator.concurrency },\r\n    );\r\n    this.setState({ running: false });\r\n    setData('raceResults', raceResults);\r\n  };\r\n\r\n  render() {\r\n    const { localization, state } = this.props;\r\n    const { course } = state;\r\n    const { finished, rounds, running } = this.state;\r\n    const progressPercent = _.round(finished / rounds * 100, 1);\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        <Col span={4}>\r\n          <div className=\"flex\">\r\n            <span className=\"select-label\">{`${localization.site.SimulatorCalculateRounds}:`}</span>\r\n            <InputNumber\r\n              className=\"select\"\r\n              value={rounds}\r\n              min={1}\r\n              max={1000}\r\n              onChange={(value) => this.setState({ rounds: value })}\r\n            />\r\n            <Button\r\n              className=\"select-label\"\r\n              type=\"primary\"\r\n              disabled={course === undefined || running}\r\n              onClick={this.calculate}\r\n            >\r\n              {localization.site.SimulatorCalculate}\r\n            </Button>\r\n            { running ? <Progress className=\"select-label\" percent={progressPercent} /> : null }\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimulatorCalculator;\r\n","import _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { Row, Col, TreeSelect } from 'antd';\r\n\r\nimport { LocalizationData, SkillData } from '../../library/common';\r\n\r\nimport skillJson from '../../db/skill.json';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport '../component.css';\r\n\r\ninterface SkillSelectorDefinition {\r\n  categoryName: string,\r\n  icon?: string,\r\n  sets: string[],\r\n  children?: SkillSelectorDefinition[],\r\n}\r\n\r\nconst SKILL_SELECTOR_HIERARCHY: SkillSelectorDefinition[] = [\r\n  {\r\n    categoryName: 'SkillPassive',\r\n    sets: ['10061'],\r\n    children: [\r\n      {\r\n        categoryName: 'Speed',\r\n        icon: '10011',\r\n        sets: ['10011'],\r\n      },\r\n      {\r\n        categoryName: 'Stamina',\r\n        icon: '10021',\r\n        sets: ['10021'],\r\n      },\r\n      {\r\n        categoryName: 'Power',\r\n        icon: '10031',\r\n        sets: ['10031'],\r\n      },\r\n      {\r\n        categoryName: 'Guts',\r\n        icon: '10041',\r\n        sets: ['10041'],\r\n      },\r\n      {\r\n        categoryName: 'Wiz',\r\n        icon: '10051',\r\n        sets: ['10051'],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    categoryName: 'SkillActive',\r\n    sets: [],\r\n    children: [\r\n      {\r\n        categoryName: 'SkillSpeed',\r\n        icon: '20011',\r\n        sets: ['20011', '20012'],\r\n      },\r\n      {\r\n        categoryName: 'SkillAccel',\r\n        icon: '20041',\r\n        sets: ['20041', '20042'],\r\n      },\r\n      {\r\n        categoryName: 'SkillHeal',\r\n        icon: '20021',\r\n        sets: ['20021', '20022'],\r\n      },\r\n      {\r\n        categoryName: 'SkillLane',\r\n        icon: '20051',\r\n        sets: ['20051', '20052'],\r\n      },\r\n      {\r\n        categoryName: 'SkillSight',\r\n        icon: '20091',\r\n        sets: ['20091', '20092'],\r\n      },\r\n      {\r\n        categoryName: 'SkillGate',\r\n        icon: '20061',\r\n        sets: ['20061', '20062'],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    categoryName: 'SkillDebuff',\r\n    sets: [],\r\n    children: [\r\n      {\r\n        categoryName: 'SkillSpeed',\r\n        icon: '30011',\r\n        sets: ['30011', '30012'],\r\n      },\r\n      {\r\n        categoryName: 'SkillTemptation',\r\n        icon: '30041',\r\n        sets: ['30041', '30042'],\r\n      },\r\n      {\r\n        categoryName: 'SkillHeal',\r\n        icon: '30051',\r\n        sets: ['30051', '30052'],\r\n      },\r\n      {\r\n        categoryName: 'SkillSight',\r\n        icon: '30071',\r\n        sets: ['30071', '30072'],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst { TreeNode } = TreeSelect;\r\nconst skillData = skillJson as { [key: string]: SkillData };\r\n\r\ninterface IProps {\r\n  localization: LocalizationData,\r\n  setData: (key: string, value: any) => void,\r\n  state: {\r\n  },\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass SkillSelector extends Component<IProps, IState> {\r\n  private _skillSets: { [key: string]: SkillData[] } = {};\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n\r\n    for (const [, skill] of Object.entries(skillData)) {\r\n      if (!(skill.icon_id in this._skillSets)) {\r\n        this._skillSets[skill.icon_id] = [];\r\n      }\r\n\r\n      if (skill.rarity === 1 || skill.rarity === 2) {\r\n        this._skillSets[skill.icon_id].push(skill);\r\n      }\r\n    }\r\n  }\r\n\r\n  buildSkillTreeNodes(definitions: SkillSelectorDefinition[] | undefined, localization: LocalizationData): JSX.Element[] {\r\n    if (!definitions) {\r\n      return [];\r\n    }\r\n\r\n    return _.map(definitions, (definition) => {\r\n      let title: any = localization.site[definition.categoryName];\r\n      if ('icon' in definition) {\r\n        title = (\r\n          <span>\r\n            <img\r\n              className=\"skillIcon\"\r\n              src={`${process.env.PUBLIC_URL}/static/image/skill/${definition.icon}.png`}\r\n              alt={title}\r\n            />\r\n            {title}\r\n          </span>\r\n        );\r\n      }\r\n\r\n      let children: JSX.Element[] = [];\r\n      if ('children' in definition) {\r\n        children = this.buildSkillTreeNodes(definition.children, localization);\r\n      }\r\n\r\n      let skills: JSX.Element[] = [];\r\n      if ('sets' in definition) {\r\n        skills = _\r\n          .chain(definition.sets)\r\n          .map((set) => this._skillSets[set])\r\n          .filter((skillSet) => Array.isArray(skillSet))\r\n          .flatten()\r\n          .sortBy(['group_id', 'id'])\r\n          .map((skill) => (\r\n            <TreeNode\r\n              key={skill.id}\r\n              title={(\r\n                <span className={`skill_${skill.rarity}`}>\r\n                  <img\r\n                    className=\"skillIcon\"\r\n                    src={`${process.env.PUBLIC_URL}/static/image/skill/${skill.icon_id}.png`}\r\n                    alt={skill.name}\r\n                  />\r\n                  {skill.name}\r\n                </span>\r\n              )}\r\n              value={skill.id}\r\n            />\r\n          ))\r\n          .value();\r\n      }\r\n\r\n      return (\r\n        <TreeNode\r\n          key={definition.categoryName}\r\n          title={title}\r\n          value={0}\r\n          disabled\r\n        >\r\n          {children}\r\n          {skills}\r\n        </TreeNode>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { localization, setData } = this.props;\r\n    return (\r\n      <Row gutter={[8, 8]}>\r\n        <Col span={24}>\r\n          <div className=\"flex\">\r\n            <span className=\"select-label\">{`${localization.site.SkillSelector}:`}</span>\r\n            <TreeSelect\r\n              dropdownPopupAlign={{\r\n                overflow: { adjustY: 0, adjustX: 0 },\r\n                offset: [0, 2],\r\n              }}\r\n              treeLine\r\n              allowClear\r\n              multiple\r\n              autoClearSearchValue\r\n              showCheckedStrategy={TreeSelect.SHOW_PARENT}\r\n              style={{\r\n                width: '100%',\r\n              }}\r\n              onChange={(value) => setData('skills', value)}\r\n            >\r\n              { this.buildSkillTreeNodes(SKILL_SELECTOR_HIERARCHY, localization) }\r\n            </TreeSelect>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SkillSelector;\r\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundStatus, GroundType, LocalizationData, ProperRate, RunningStyle,\n} from '../../library/common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate,\n} from './common';\nimport CourseData from '../course-data';\nimport HorseData from './horse-data';\nimport RaceData from './race-data';\nimport RaceResult from './race-result';\nimport SimulatorCalculator from './simulator-calculator';\nimport SkillSelector from './skill-selector';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\nimport '../../app.css';\n\nimport courseJson from '../../db/course.json';\nimport { RaceResultData } from '../../library/race/common';\n\nconst courses = courseJson as CourseDataType[];\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\ninterface IProperRate extends IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n}\n\ninterface IState extends IHorseState, IProperRate {\n  skills?: string[],\n\n  racecourse?: string,\n  ground?: GroundType,\n  distance?: number,\n  course?: CourseDataType,\n\n  strategy?: RunningStyle,\n  groundStatus?: GroundStatus,\n\n  raceResults: RaceResultData[],\n}\n\nclass Simulator extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.loadCourseData();\n    this.state = {\n      speed: 1200,\n      stamina: 300,\n      pow: 1200,\n      guts: 300,\n      wiz: 300,\n\n      groundTypeTurf: ProperRate.A,\n      groundTypeDirt: ProperRate.A,\n\n      distanceTypeShort: ProperRate.A,\n      distanceTypeMile: ProperRate.A,\n      distanceTypeMiddle: ProperRate.A,\n      distanceTypeLong: ProperRate.A,\n\n      runningStyleNige: ProperRate.A,\n      runningStyleSenko: ProperRate.A,\n      runningStyleSashi: ProperRate.A,\n      runningStyleOikomi: ProperRate.A,\n\n      racecourse: '10009',\n      ground: GroundType.Turf,\n      distance: 2200,\n      course: this.courseCategories['10009'][GroundType.Turf][2200],\n\n      strategy: RunningStyle.Nige,\n      groundStatus: GroundStatus.Good,\n\n      raceResults: [],\n    };\n  }\n\n  updateCourse = () => {\n    const {\n      strategy, racecourse, ground, distance, groundStatus,\n    } = this.state;\n    if (racecourse === undefined || ground === undefined || distance === undefined || strategy === undefined || groundStatus === undefined) {\n      this.setState({ course: undefined });\n    } else {\n      this.setState({ course: this.courseCategories[racecourse][ground][distance] });\n    }\n  };\n\n  setData = (key: string, value: any): void => {\n    switch (key) {\n      case 'racecourse':\n        this.setState({\n          racecourse: value,\n          ground: undefined,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'ground':\n        this.setState({\n          ground: value as GroundType,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'distance':\n      case 'strategy':\n      case 'groundStatus':\n        this.setState<'distance' | 'strategy' | 'groundStatus'>({ [key]: value }, this.updateCourse);\n        break;\n      case 'speed':\n      case 'stamina':\n      case 'pow':\n      case 'guts':\n      case 'wiz':\n        this.setState({ [key]: value as number } as Pick<IHorseState, keyof IHorseState>);\n        break;\n      case 'raceResults':\n        this.setState({ raceResults: value });\n        break;\n      case 'skills':\n        this.setState({ skills: value as string[] });\n        break;\n      default:\n        this.setState({ [key]: value } as Pick<IProperRate, keyof IProperRate>);\n        break;\n    }\n  };\n\n  loadCourseData() {\n    for (const course of courses) {\n      if (!(course.race_track_id in this.courseCategories)) {\n        this.courseCategories[course.race_track_id] = {};\n      }\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\n        this.courseCategories[course.race_track_id][course.ground] = {};\n      }\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\n    }\n  }\n\n  render() {\n    const { localization } = this.props;\n    const { raceResults, course } = this.state;\n    return (\n      <div className=\"content\">\n        <HorseData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SkillSelector\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <CourseData\n          localization={localization}\n          courseCategories={this.courseCategories}\n          setData={this.setData}\n          state={this.state}\n        />\n        <RaceData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SimulatorCalculator\n          localization={localization}\n          state={this.state}\n          setData={this.setData}\n        />\n        <RaceResult localization={localization} raceResults={raceResults} course={course} />\n      </div>\n    );\n  }\n}\n\nexport default Simulator;\n","import React, { Component } from 'react';\r\nimport {\r\n  ComposedChart, Line, XAxis, YAxis, Tooltip, ReferenceLine, Legend, ReferenceArea, Label,\r\n} from 'recharts';\r\n\r\nimport {\r\n  CourseCategory, CourseDataType, LocalizationData,\r\n} from '../../library/common';\r\n\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nconst CORNER_COLOR: { [key: string]: any } = {\r\n  Default: {\r\n    stroke: '#00ff00',\r\n    strokeOpacity: 0.3,\r\n    fill: '#00ff00',\r\n    fillOpacity: 0.3,\r\n  },\r\n  1: {\r\n    stroke: '#00bb00',\r\n    strokeOpacity: 0.3,\r\n    fill: '#00bb00',\r\n    fillOpacity: 0.3,\r\n  },\r\n  2: {\r\n    stroke: '#009900',\r\n    strokeOpacity: 0.3,\r\n    fill: '#009900',\r\n    fillOpacity: 0.3,\r\n  },\r\n  3: {\r\n    stroke: '#00f660',\r\n    strokeOpacity: 0.3,\r\n    fill: '#006600',\r\n    fillOpacity: 0.3,\r\n  },\r\n  4: {\r\n    stroke: '#003300',\r\n    strokeOpacity: 0.3,\r\n    fill: '#003300',\r\n    fillOpacity: 0.3,\r\n  },\r\n};\r\n\r\ninterface IProps {\r\n  localization: LocalizationData\r\n  state: {\r\n    course?: CourseDataType,\r\n  }\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\nclass CourseChart extends Component<IProps, IState> {\r\n  private courseCategories: CourseCategory = {};\r\n\r\n  render() {\r\n    const { localization, state } = this.props;\r\n    const { course } = state;\r\n\r\n    if (course === undefined) {\r\n      return (<></>);\r\n    }\r\n\r\n    const blockDistance = course.distance / 24;\r\n    const slopeDistance = course.distance / 1000;\r\n    let lastSlopePer = 0;\r\n    let lastSlopePerDistance = 0;\r\n    const data = [];\r\n    for (const slope of course.slope_per) {\r\n      if (lastSlopePer === 0 && slope.slope_per !== 0 && lastSlopePerDistance < slope.distance - slopeDistance) {\r\n        data.push({\r\n          slopePer: 0,\r\n          distance: slope.distance - slopeDistance,\r\n        });\r\n      }\r\n\r\n      data.push({\r\n        slopePer: slope.slope_per,\r\n        distance: slope.distance,\r\n      });\r\n      lastSlopePer = slope.slope_per;\r\n      lastSlopePerDistance = slope.distance;\r\n    }\r\n    if (lastSlopePer !== course.distance) {\r\n      data.push({\r\n        slopePer: 0,\r\n        distance: course.distance,\r\n      });\r\n    }\r\n\r\n    const referenceAreas = [];\r\n    for (let i = 0; i < course.param.corner.length; i += 1) {\r\n      let index = 'Default';\r\n      if (course.param.corner_index.includes(i)) {\r\n        index = (course.param.corner_index.indexOf(i) + 1).toString();\r\n      }\r\n      referenceAreas.push(<ReferenceArea\r\n        x1={course.param.corner[i].start}\r\n        x2={course.param.corner[i].end}\r\n        y1={-2.5}\r\n        y2={-3}\r\n        stroke={CORNER_COLOR[index].stroke}\r\n        strokeOpacity={CORNER_COLOR[index].strokeOpacity}\r\n        fill={CORNER_COLOR[index].fill}\r\n        fillOpacity={CORNER_COLOR[index].fillOpacity}\r\n        label={<Label position=\"insideTop\">{localization.site[`CourseCorner${index}`]}</Label>}\r\n      />);\r\n    }\r\n    return (\r\n      <ComposedChart\r\n        width={1000}\r\n        height={500}\r\n        data={data}\r\n      >\r\n        <XAxis type=\"number\" dataKey=\"distance\" />\r\n        <YAxis domain={[-3, 3]} />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line dot={false} name={localization.site.CourseSlope} type=\"monotone\" dataKey=\"slopePer\" stroke=\"#8884d8\" />\r\n        <ReferenceLine\r\n          x={blockDistance * 10}\r\n          stroke=\"red\"\r\n          label={<Label position=\"insideTop\">{localization.site.CoursePositionKeepEnd}</Label>}\r\n        />\r\n        <ReferenceLine\r\n          x={blockDistance * 4}\r\n          stroke=\"red\"\r\n          label={<Label position=\"insideTop\">{localization.site.CourseMiddlePhase}</Label>}\r\n        />\r\n        <ReferenceLine\r\n          x={blockDistance * 16}\r\n          stroke=\"red\"\r\n          label={<Label position=\"insideTop\">{localization.site.CourseEndPhase}</Label>}\r\n        />\r\n        { referenceAreas }\r\n      </ComposedChart>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseChart;\r\n","/* eslint-disable react/no-unused-state */\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  CourseCategory, CourseDataType, GroundType, LocalizationData,\r\n} from '../../library/common';\r\nimport CourseData from '../course-data';\r\nimport CourseChart from './course-chart';\r\n\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\nimport courseJson from '../../db/course.json';\r\n\r\nconst courses = courseJson as CourseDataType[];\r\n\r\ninterface IProps {\r\n  localization: LocalizationData\r\n}\r\n\r\ninterface IState {\r\n  racecourse?: string,\r\n  ground?: GroundType,\r\n  distance?: number,\r\n  course?: CourseDataType,\r\n}\r\n\r\nclass Course extends Component<IProps, IState> {\r\n  private courseCategories: CourseCategory = {};\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.loadCourseData();\r\n    this.state = {\r\n      racecourse: '10009',\r\n      ground: GroundType.Turf,\r\n      distance: 2200,\r\n      course: this.courseCategories['10009'][GroundType.Turf][2200],\r\n    };\r\n  }\r\n\r\n  setData = (key: string, value: any): void => {\r\n    this.setState({ [key]: value } as Pick<IState, keyof IState>, this.updateCourse);\r\n  };\r\n\r\n  updateCourse = () => {\r\n    const { racecourse, ground, distance } = this.state;\r\n    if (racecourse === undefined || ground === undefined || distance === undefined) {\r\n      this.setState({ course: undefined });\r\n    } else {\r\n      this.setState({ course: this.courseCategories[racecourse][ground][distance] });\r\n    }\r\n  };\r\n\r\n  loadCourseData() {\r\n    for (const course of courses) {\r\n      if (!(course.race_track_id in this.courseCategories)) {\r\n        this.courseCategories[course.race_track_id] = {};\r\n      }\r\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\r\n        this.courseCategories[course.race_track_id][course.ground] = {};\r\n      }\r\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { localization } = this.props;\r\n    return (\r\n      <div className=\"content\">\r\n        <CourseData\r\n          localization={localization}\r\n          courseCategories={this.courseCategories}\r\n          setData={this.setData}\r\n          state={this.state}\r\n        />\r\n        <CourseChart\r\n          localization={localization}\r\n          state={this.state}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Course;\r\n","import _ from 'lodash';\r\n\r\nimport { LocalizationData, LocalizationSubData } from './library/common';\r\n\r\nclass Localization {\r\n  default: {};\r\n\r\n  localizer: {\r\n    [key: string]: () => __WebpackModuleApi.RequireContext;\r\n  };\r\n\r\n  static getLocalizationJaJp() {\r\n    return require.context('./localization/ja_jp/', true, /\\.json$/);\r\n  }\r\n\r\n  static getLocalizationEnUs() {\r\n    return require.context('./localization/en_us/', true, /\\.json$/);\r\n  }\r\n\r\n  static getLocalizationZhTw() {\r\n    return require.context('./localization/zh_tw', true, /\\.json$/);\r\n  }\r\n\r\n  constructor() {\r\n    this.default = {};\r\n    this.localizer = {\r\n      'ja-jp': Localization.getLocalizationJaJp,\r\n      'en-us': Localization.getLocalizationEnUs,\r\n      'zh-tw': Localization.getLocalizationZhTw,\r\n    };\r\n    this.default = this.getLocalization('ja-jp');\r\n  }\r\n\r\n  getLocalization(locale: string): LocalizationData {\r\n    const files = this.localizer[locale]();\r\n    const fileJson: LocalizationSubData = {};\r\n    for (const fileKey of files.keys()) {\r\n      const structure = fileKey.split('.')[1].split('/');\r\n\r\n      let target: LocalizationSubData = fileJson;\r\n      for (let i = 1; i < structure.length; i += 1) {\r\n        if (!(structure[i] in fileJson)) {\r\n          target[structure[i]] = {};\r\n        }\r\n        target = target[structure[i]] as LocalizationSubData;\r\n      }\r\n      _.merge(target, files(fileKey));\r\n    }\r\n    return _.merge({}, this.default, fileJson) as LocalizationData;\r\n  }\r\n}\r\n\r\nexport default Localization;\r\n","import {\n  Layout, Menu, Select, Row, Col,\n} from 'antd';\nimport React, { Component } from 'react';\nimport {\n  Redirect, HashRouter as Router, Route, Link, Switch,\n} from 'react-router-dom';\n\nimport { LocalizationData } from './library/common';\nimport RelationGraph from './component/relation/graph';\nimport RelationQuery from './component/relation/query';\nimport Simulator from './component/simulator/simulator';\nimport Course from './component/course/course';\nimport Localization from './localization';\n\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst { Header, Content, Footer } = Layout;\nconst { Option } = Select;\n\ninterface IProps {\n}\n\ninterface IState {\n  localization: LocalizationData,\n}\n\nclass App extends Component<IProps, IState> {\n  localization: Localization;\n\n  constructor(props: {}) {\n    super(props);\n    this.localization = new Localization();\n    this.state = {\n      localization: this.localization.getLocalization('ja-jp'),\n    };\n  }\n\n  changeLocalization = (locale: string) => {\n    this.setState({\n      localization: this.localization.getLocalization(locale),\n    });\n  };\n\n  render() {\n    const { localization } = this.state;\n\n    return (\n      <Router>\n        <Layout className=\"layout\">\n          <Header className=\"header\">\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n              <Menu.Item key=\"1\">\n                <Link to=\"/relation/graph\" className=\"link\">{localization.site['Relation Graph']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <Link to=\"/relation/query\" className=\"link\">{localization.site['Relation Query']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <Link to=\"/course\" className=\"link\">{localization.site.Course}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"4\">\n                <Link to=\"/simulator\" className=\"link\">{localization.site.Simulator}</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content className=\"tabs\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/relation/graph\" />\n              </Route>\n              <Route path=\"/relation/graph\" render={() => (<RelationGraph localization={localization} />)} />\n              <Route path=\"/relation/query\" render={() => (<RelationQuery localization={localization} />)} />\n              <Route path=\"/simulator\" render={() => (<Simulator localization={localization} />)} />\n              <Route path=\"/course\" render={() => (<Course localization={localization} />)} />\n            </Switch>\n          </Content>\n          <Footer className=\"footer\" style={{ padding: '5px' }}>\n            <Row gutter={[8, 8]}>\n              <Col span={20} />\n              <Col span={2}>\n                <a className=\"github\" href=\"https://github.com/greydust/umamusume\" target=\"_blank\" rel=\"noreferrer\">\n                  <img src={`${process.env.PUBLIC_URL}/static/image/github.png`} height=\"30\" alt=\"GitHub\" />\n                  GitHub\n                </a>\n              </Col>\n              <Col span={2}>\n                <Select className=\"localizationSelector\" defaultValue=\"ja-jp\" onChange={this.changeLocalization}>\n                  <Option value=\"zh-tw\">繁體中文</Option>\n                  <Option value=\"ja-jp\">日本語</Option>\n                  <Option value=\"en-us\">English</Option>\n                </Select>\n              </Col>\n            </Row>\n          </Footer>\n        </Layout>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}