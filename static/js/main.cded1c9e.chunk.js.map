{"version":3,"sources":["localization/ja_jp sync //.json$","localization/en_us sync //.json$","localization/zh_tw sync //.json$","library/common.ts","component/relation/graph.tsx","component/relation/query.tsx","component/course-data.tsx","component/simulator/horse-proper-rate.tsx","component/simulator/horse-stat-data.tsx","library/race/common.ts","component/simulator/horse-data.tsx","component/simulator/race-data.tsx","library/race/constant.ts","library/race/race-horse.ts","component/simulator/race-result.tsx","library/race/horse.ts","library/race/course.ts","library/race/skill.ts","component/simulator/simulator-calculator.tsx","component/simulator/skill-selector.tsx","component/simulator/simulator.tsx","component/course/course-chart.tsx","component/course/course.tsx","localization.ts","app.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","RunningStyle","DistanceType","GroundType","TurnType","InoutType","CoursePhase","GroundStatus","ProperRate","SkillAbilityType","SkillAbilityTargetType","SkillConditionOperatorsLogical","SkillConditionOperatorsFormula","characters","characterJson","relations","relationJson","relationMembers","relationMemberJson","RelationGraph","props","characterIds","i","length","j","calculateRelation","this","idToPortrait","_","targetId","localization","className","src","process","alt","character","name","createRow","id1","id2","targetRelations","intersection","reduce","sum","parseInt","Component","RelationQuery","horses","selectHorse","event","value","target","setState","horseId","selectHorse2","horseId2","state","horseId2Img","inputId","rel","rel3","forEach","targetHorseId","relation1","rel2","parentHorseId","push","relation","calculateGrandRelation","sortBy","horseRela","id3","image1","image2","relation2","image3","relation3","relationTotal","horseGreatRow","father","mother","Horseallrela","slice","Fragment","rowSpan","width","inputId2","image","horseRow","onClick","relationArray","buildRelationArray","grandArray","buildGrandArray","buildBestArray","sideRelationArray","bestRelation","FormControl","InputLabel","Select","labelId","onChange","MenuItem","style","float","marginRight","colSpan","undefined","Common","time","hour","Math","floor","hourString","minute","minuteString","toString","padStart","second","secondString","minorString","Option","CourseData","setData","racecourse","span","site","Racecourse","course","key","courseCategories","ground","Ground","distance","Distance","racecourseComponent","getRacecourseComponent","groundComponent","getGroundComponent","distanceComponent","getDistanceComponent","gutter","HorseProperRate","properRateTypes","properTypes","properName","properRateType","camelProperRateType","camelCase","properRate","G","F","E","D","C","B","A","S","HorseStatData","stats","min","max","data","speed","stamina","pow","guts","wiz","ResultFlag","Season","Weather","HorseData","RaceData","strategy","Strategy","Nige","RunningStyleNige","Senko","RunningStyleSenko","Sashi","RunningStyleSashi","Oikomi","RunningStyleOikomi","groundStatus","Good","GroundStatusGood","SlightlyHeavy","GroundStatusSlightlyHeavy","Heavy","GroundStatusHeavy","Bad","GroundStatusBad","strategyComponent","getStrategyComponent","groundStatusComponent","getGroundStatusComponent","constant","baseDistance","minSpeed","minSpeedRate","minSpeedGutsCoefSqrt","minSpeedGutsCoef","startDash","targetSpeedCoefficient","startAccelAdd","targetSpeed","baseTargetSpeedRandomMinusVal1","baseTargetSpeedRandomMinusVal2","baseTargetSpeedRandomPlusVal1","baseTargetSpeedRandomLogCoefficient","baseTargetSpeedRandomCoefficient","Start","Middle","End","LastSpurt","phaseEndBaseTargetSpeedCoef","addSpeedParamCoef","baseTargetSpeedCoef","lastSpurtBaseTargetSpeedAddCoef","lastSpurtTargetSpeedCoefSqrt","upSlopeAddSpeedVal1","downSlopeAddSpeedVal1","downSlopeAddSpeedVal2","firstBlockSlowStyles","lastSpurtTargetSpeedStep","accel","accelPhaseCoef","accelPowCoef","accelPowCoefUpSlope","accelPowCoefSqrt","accelDecreaseCoef","accelDecreaseZeroHpCoef","hp","hpInitialVal1","hpMaxCoef","hpDecBase","hpDecRateBaseNormal","hpDecRateBaseTemptation","hpDecRateBasePositionKeepPaseDown","hpDecRateMultiplyDownSlopeAccelMode","speedGapParam1","speedGapParam1Pow","groundModifierMultiHpSub","Turf","Dirt","hpGutsBase","hpGutsCoef","hpGutsCoefSqrt","distanceTargetSpeedCoefficient","blockPortion","distanceShort","distanceMile","distanceMiddle","distanceLong","Number","MAX_VALUE","startSpeed","phaseStart","phaseMiddle","phaseEnd","positionSense","frameTime","gateTimeRange","finishTimeCoef","lastSpurt","determineRateBase","determineRateWizMultiplier","targetDistanceFromGoal","slope","downSlopeAccelModeChanceBase","downSlopeEndChance","skill","activatePerMin","lotActivatePerVal1","lotActivatePerVal2","abilityTimeDivideDistance","coolDownTimeDivideDistance","BreakPoint","Mode","RaceResult","raceResults","timeAverage","meanBy","timeShown","parseFloat","finish_time_min","secondToTime","TimeMin","timeDeviationSum","fullLastSpurtCount","hpLeftSum","result","resultFlags","has","FullLastSpurt","hpLeft","TimeAverage","TimeStandardDeviation","TimeShown","FullLastSpurtRate","HpLeftAverage","toFixed","sqrt","toLocaleString","Horse","stat","skills","Course","courseData","_courseData","getDistanceType","turn","slope_per","race_track_id","Short","Mile","Long","Skill","condition","raceHorse","realCondition","operator","andCondition","items","childCondition","matchBase","orCondition","formulaCondition","targetValue","getTargetValue","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","EqualTo","NotEqualTo","turnType","trackId","season","weather","postNumber","sameRunningStyleCount","popularityFirstRunningStyle","runningStyle","popularity","random","distanceProperRate","distanceProperRateJson","groundProperRate","groundProperRateJson","RaceHorse","horse","sameRunningStyle","_course","_horse","_runningStyle","_season","_weather","_postNumber","_popularity","_sameRunningStyleCount","_popularityFirstRunningStyle","_statAddition","_stat","_generalSkills","_activateCountSkills","_skillCooldown","_speedWizRandomRange","_speedWizRandom","_phase","_mode","Set","_speed","_lastSpurtTargetSpeed","_hp","_distance","_time","_breakPoints","_startDashTargetSpeed","_slopePer","raceResult","finishFirstBlock","delete","FirstBlock","FinishPhaseStart","phaseStartDistance","finishBlock","refreshSpeedRandomValue","FinishBlock","blockDistance","finishPhaseStart","FinishPhaseMiddle","phaseMiddleDistance","calculateLastSpurt","add","maxLastSpurtTargetSpeed","calculateAccelAndRun","hpCost","finalSpeed","lastSpurtDistance","lastSpurtTargetSpeed","lastSpurtSpeedCandidates","phaseEndBaseTargetSpeed","baseTargetSpeed","phaseEndTargetSpeedAddition","maxDistance","hpDecreaseRate","accelToTargetSpeed","currentSpeed","phaseEndAccelTime","phaseEndAccelDistance","phaseEndAccelHpCost","phaseEndFinalSpeed","lastSpurtAccelTime","lastSpurtAccelDistance","lastSpurtAccelHpCost","runDistance","phaseEndRunTime","phaseEndRunHpCost","getRunHpDecrease","lastSpurtRunTime","lastSpurtRunHpCost","hpDiff","candidate","randomByCandidates","lastSpurtDetermineRate","finishPhaseMiddle","FinishPhaseEnd","phaseEndDistance","finishPhaseEnd","FinishPhaseLastSpurt","doLastSpurt","finishLastSpurt","triggerPositionSense","zeroHp","ZeroHp","changeSlope","slopePer","checkDownSlopeAccelMode","DownSlopeAccel","DownSlopeAccelMode","triggerSkill","reachGoal","breakPointMap","None","FinishFirstBlock","PositionSense","Slope","TriggerSkill","Goal","clone","skillsActivated","temptation","triggered","originalStat","distanceType","StartDash","startDashTargetSpeed","slopeAdd","abs","baseTargetSpeedRandom","realTargetSpeed","groundType","power","baseAccel","UpSlope","Temptation","PositionKeepPaceDown","phaseEndHpDecreaseRate","modeHpDecreaseRate","minParameters","minKey","minDistance","entries","Array","isArray","parameters","breakPoint","accelTime","accelDistance","accelHpCost","runTime","speedCoefficient","realAccelTime","nr","realAccelDistance","speedHpDecreaseRate","getSpeedHpDecrease","runHpCost","realRunTime","realRunDistance","effect","targets","target_type","Self","ability_type","AddSpeed","AddStamina","AddPow","AddGuts","AddWiz","AddSight","AddHp","ExtendTemptation","AddTargetSpeed","AddLaneAccel","AddAccel","skillId","ability","count","cooldown_time","effects","applyEffect","slopePers","allSlopePers","addBreakPoint","type","pop","distances","specific","skillActivateRate","generalTriggerDistances","specificTriggerDistances","abilities","ability_time","activateAbility","getSkillTriggerStat","maxHp","populateSkills","upperBound","log10","lowerBound","buildSlopeBreakPoints","doGateOpen","debugOutput","finishStartDash","minBreakpoint","doAccelAndRun","removeBreakPoint","console","log","initialSpeed","targetSpeedByDistanceSquare","getAccelHpDecrease","determineRate","randomNumber","skillData","skillJson","SimulatorCalculator","calculate","a","running","finished","groundTypeTurf","groundTypeDirt","distanceTypeShort","distanceTypeMile","distanceTypeMiddle","distanceTypeLong","runningStyleNige","runningStyleSenko","runningStyleSashi","runningStyleOikomi","rounds","targetCourse","targetHorse","counter","started","worksPerThread","ceil","concurrency","Promise","Spring","Sunny","simulate","delay","progressPercent","round","SimulatorCalculateRounds","disabled","SimulatorCalculate","percent","SKILL_SELECTOR_HIERARCHY","categoryName","sets","children","icon","TreeNode","TreeSelect","SkillSelector","_skillSets","icon_id","rarity","definitions","definition","title","buildSkillTreeNodes","chain","set","filter","skillSet","flatten","dropdownPopupAlign","overflow","adjustY","adjustX","offset","treeLine","allowClear","multiple","autoClearSearchValue","showCheckedStrategy","SHOW_PARENT","courses","courseJson","Simulator","updateCourse","loadCourseData","CORNER_COLOR","Default","stroke","strokeOpacity","fill","fillOpacity","1","2","3","4","STRAIGHT_COLOR","CourseChart","_referenceAreas","_referenceDots","maxSlope","minSlope","param","corner","index","corner_index","includes","indexOf","end","start","ReferenceDot","x","y","label","Label","position","ReferenceArea","x1","x2","y1","y2","straight","CourseStraight","buildData","buildCorner","buildStraight","ComposedChart","height","XAxis","dataKey","YAxis","domain","Tooltip","Legend","Line","dot","CourseSlope","ReferenceLine","CourseMiddlePhase","CoursePositionKeepEnd","CourseEndPhase","slopeDistance","lastSlopePer","lastSlopePerDistance","Localization","default","localizer","getLocalizationJaJp","getLocalizationEnUs","getLocalizationZhTw","getLocalization","locale","files","fileJson","fileKey","structure","split","merge","require","Header","Layout","Content","Footer","App","changeLocalization","theme","mode","defaultSelectedKeys","Item","to","exact","path","render","padding","href","defaultValue","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cded1c9e.chunk.js","sourcesContent":["var map = {\n\t\"./character/name.json\": 451,\n\t\"./course/ground.json\": 452,\n\t\"./course/inout.json\": 453,\n\t\"./course/racecourse.json\": 454,\n\t\"./site.json\": 455\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 450;","var map = {\n\t\"./character/name.json\": 457,\n\t\"./course/racecourse.json\": 458,\n\t\"./site.json\": 459\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 456;","var map = {\n\t\"./character/name.json\": 461,\n\t\"./course/racecourse.json\": 462,\n\t\"./site.json\": 463\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 460;","/* eslint-disable @typescript-eslint/no-shadow */\nexport interface LocalizationData {\n  character: {\n    name: LocalizationMap,\n  },\n  course: {\n    racecourse: LocalizationMap,\n    ground: LocalizationMap,\n    inout: LocalizationMap,\n  },\n  site: LocalizationMap,\n  [key: string]: string | LocalizationSubData,\n}\n\nexport interface LocalizationSubData {\n  [key: string]: string | LocalizationSubData,\n}\n\ninterface LocalizationMap {\n  [key: string]: string,\n}\n\nexport enum RunningStyle {\n  Nige = 'RunningStyleNige',\n  Senko = 'RunningStyleSenko',\n  Sashi = 'RunningStyleSashi',\n  Oikomi = 'RunningStyleOikomi',\n}\n\nexport enum DistanceType {\n  Short = 'DistanceTypeShort',\n  Mile = 'DistanceTypeMile',\n  Middle = 'DistanceTypeMiddle',\n  Long = 'DistanceTypeLong',\n}\n\nexport enum GroundType {\n  Turf = '1',\n  Dirt = '2',\n}\n\nexport enum TurnType {\n  Right = '1',\n  Left = '2',\n  Straight = '4',\n}\n\nexport enum InoutType {\n  Normal = '1',\n  Inner = '2',\n  Outer = '3',\n  OuterInner = '4',\n}\n\nexport enum CoursePhase {\n  Start = 0,\n  Middle = 1,\n  End = 2,\n  LastSpurt = 3,\n}\n\nexport enum GroundStatus {\n  Good = 'GroundStatusGood',\n  SlightlyHeavy = 'GroundStatusSlightlyHeavy',\n  Heavy = 'GroundStatusHeavy',\n  Bad = 'GroundStatusBad',\n}\n\nexport enum ProperRate {\n  G = '1',\n  F = '2',\n  E = '3',\n  D = '4',\n  C = '5',\n  B = '6',\n  A = '7',\n  S = '8',\n}\n\nexport interface CourseCategory {\n  [key: string]: {\n    [key: string]: {\n      [key: string]: CourseDataType,\n    },\n  },\n}\n\nexport interface CourseDataType {\n  id: string,\n  race_track_id: string,\n  distance: number,\n  ground: GroundType,\n  turn: TurnType,\n  inout: InoutType,\n  course_set_status_id: string,\n  finish_time_min: string,\n  finish_time_min_random_range: string,\n  finish_time_max: string,\n  finish_time_max_random_range: string,\n  param: {\n    corner: { start?: number, end?: number }[],\n    straight: { start: number, end: number }[],\n    corner_index: number[],\n  },\n  slope_per: { distance: number, slope_per: number }[],\n}\n\nexport interface SkillData {\n  id: string,\n  name: string,\n  rarity: number,\n  description: string,\n  icon_id: string,\n  need_skill_point: number | null,\n  abilities: SkillAbilityData[],\n}\n\nexport interface SkillAbilityData {\n  condition_raw: string,\n  condition: SkillConditionObject,\n  ability_time: number,\n  cooldown_time: number,\n  effects: SkillEffectData[],\n}\n\nexport interface SkillEffectData {\n  ability_type: SkillAbilityType,\n  ability_value: number,\n  target_type: SkillAbilityTargetType,\n  target_value: number,\n}\n\nexport enum SkillAbilityType {\n  AddSpeed = '1',\n  AddStamina = '2',\n  AddPow = '3',\n  AddGuts = '4',\n  AddWiz = '5',\n  AddSight = '8',\n  AddHp = '9',\n  ExtendTemptation = '13',\n  AddTargetSpeed = '27',\n  AddLaneAccel = '28',\n  AddAccel = '31',\n}\n\nexport enum SkillAbilityTargetType {\n  Self = '1',\n  FrontInSight = '4',\n  FrontAll = '9',\n  BehindAll = '10',\n  RunningStyle = '18',\n  DistanceFront = '19',\n  DistanceBehind = '20',\n  RunningStyleInTemptation = '21',\n}\n\nenum SkillConditionOperatorsLogical {\n  And = 'and',\n  Or = 'or',\n}\n\nexport enum SkillConditionOperatorsFormula {\n  GreaterThan = '>',\n  GreaterThanOrEqualTo = '>=',\n  LessThan = '<',\n  LessThanOrEqualTo = '<=',\n  EqualTo = '==',\n  NotEqualTo = '!=',\n}\n\nexport interface SkillConditionObjectLogical {\n  operator: SkillConditionOperatorsLogical,\n  items: SkillConditionObject[],\n}\n\nexport interface SkillConditionObjectFormula {\n  operator: SkillConditionOperatorsFormula,\n  key: string,\n  value: string,\n}\n\nexport type SkillConditionObject = SkillConditionObjectLogical | SkillConditionObjectFormula | {};\n\nclass Common {\n  static secondToTime(time: number): string {\n    const hour = Math.floor(time / 3600);\n    const hourString = hour > 0 ? `${hour}:` : '';\n    const minute = Math.floor((time - hour * 3600) / 60);\n    const minuteString = minute > 0\n      ? `${hour > 0 ? `${minute.toString().padStart(2, '0')}` : minute}:`\n      : '';\n    const second = Math.floor(time - hour * 3600 - minute * 60);\n    const secondString = second > 0\n      ? `${(hour > 0 || minute > 0) ? `${second.toString().padStart(2, '0')}` : second}`\n      : '0';\n    const minorString = `.${Math.floor((time - hour * 3600 - minute * 60 - second) * 1000).toString().padStart(3, '0')}`;\n    return `${hourString}${minuteString}${secondString}${minorString}`;\n  }\n}\n\nexport default Common;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport 'react-tabs/style/react-tabs.css';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../library/common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n}\n\nclass RelationGraph extends Component<IProps, IState> {\n  static calculateRelation(id1: string, id2: string) {\n    if (id1 === id2) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  characterIds: string[];\n\n  relations: { [key: string]: { [key: string]: number } };\n\n  constructor(props: IProps) {\n    super(props);\n    this.characterIds = Object.keys(characters);\n    this.relations = {};\n    for (let i = 0; i < this.characterIds.length; i += 1) {\n      this.relations[this.characterIds[i]] = {};\n      for (let j = 0; j < this.characterIds.length; j += 1) {\n        this.relations[this.characterIds[i]][this.characterIds[j]] = RelationGraph.calculateRelation(this.characterIds[i], this.characterIds[j]);\n      }\n    }\n  }\n\n  createRow(id: string) {\n    return (\n      <tr key={`relation_row_${id}`}>\n        <th key={`portrait_row_${id}`}>{this.idToPortrait(id)}</th>\n        { _.map(this.characterIds, (targetId) => <th key={`relation_${id}_${targetId}`}>{ RelationGraph.calculateRelation(id, targetId) }</th>) }\n      </tr>\n    );\n  }\n\n  idToPortrait(id: string) {\n    const { localization } = this.props;\n    return (\n      <img\n        className=\"portrait\"\n        src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${id}.png`}\n        alt={localization.character.name[id]}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <table>\n          <tbody>\n            <tr>\n              <th />\n              { _.map(this.characterIds, (id) => <th key={`portrait_column_${id}`}>{this.idToPortrait(id)}</th>) }\n            </tr>\n            { _.map(this.characterIds, (id) => this.createRow(id)) }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationGraph;\n","import _ from 'lodash';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport React, { Component } from 'react';\n\nimport '../../app.css';\nimport './relation.css';\n\nimport { LocalizationData } from '../../library/common';\nimport characterJson from '../../db/character.json';\nimport relationJson from '../../db/relation.json';\nimport relationMemberJson from '../../db/relation_member.json';\n\nconst characters = characterJson as { [key: string]: {} };\nconst relations = relationJson as { [key: string]: string };\nconst relationMembers = relationMemberJson as { [key: string]: string[] };\n\ninterface HorseRow {\n  id: string;\n  name: string;\n  relation: number;\n  image: string;\n}\ninterface HorseGreatRow {\n  id1:string\n  image1 : string;\n  relation1: number;\n  id2:string\n  image2 : string;\n  relation2: number;\n  id3:string\n  image3 : string;\n  relation3: number;\n  relationTotal: number;\n}\ninterface HorseAllRela{\n  father:HorseGreatRow\n  mother:HorseGreatRow\n  relation:number\n}\ninterface HorseRela {\n  id: string;\n  relation: number;\n}\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\nconst tableStyle = {\n  float: 'left',\n};\n\ninterface IState {\n  horseId: string\n  horseId2: string\n  horseId2Img: string \n}\n\nclass RelationQuery extends Component<IProps, IState> {\n  static calculateRelation(id1: string | undefined, id2: string): number {\n    if (id1 === id2 || id1 === undefined) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n  static calculateGrandRelation(id1: string | undefined, id2: string, id3: string): number {\n    if (id1 === id2 || id1 === undefined || id1 === id3 || id2 === id3) {\n      return 0;\n    }\n    const targetRelations: string[] = _.intersection(relationMembers[id1], relationMembers[id2], relationMembers[id3]);\n    return _.reduce(targetRelations, (sum: number, id: string) => sum + parseInt(relations[id], 10), 0);\n  }\n\n  horses: string[];\n\n  constructor(props: IProps) {\n    super(props);\n    this.horses = Object.keys(characters);\n    this.state = {\n      horseId: '', \n      horseId2: '',     \n      horseId2Img: '',\n    };\n  }\n\n  selectHorse = (event: any) => {\n    const { value } = event.target;\n    this.setState({ horseId: value });\n  };\n  selectHorse2 = (event: any) => {\n    const { value } = event.target;\n    this.setState({ horseId2: value });\n  };\n\n\n  buildBestArray(inputId:string|undefined) {\n    //const { horseId } = this.state;\n    const { localization } = this.props;\n    let rel: HorseGreatRow[] = [];\n    \n    let rel3: HorseAllRela[] = [];\n    this.horses.forEach((targetHorseId) => {\n      if (targetHorseId !== inputId) {\n\n\n        let relation1: number = RelationQuery.calculateRelation(inputId, targetHorseId);\n\n        let rel2: HorseRela[] = [];\n        this.horses.forEach((parentHorseId) => {\n          if (targetHorseId !== parentHorseId || inputId !== parentHorseId) {\n            rel2.push({\n              id: parentHorseId,\n              relation: RelationQuery.calculateGrandRelation(inputId, targetHorseId, parentHorseId),\n            })\n          }\n        });\n        rel2 = _.sortBy(rel2, [(horseRela) => -horseRela.relation]);\n        rel.push({\n          id1:targetHorseId,\n          id2:rel2[0].id,\n          id3:rel2[1].id,\n          image1: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\n          relation1: relation1,\n          image2: `${process.env.PUBLIC_URL}/static/image/character/portrait/${rel2[0].id}.png`,\n          relation2: rel2[0].relation,\n          image3: `${process.env.PUBLIC_URL}/static/image/character/portrait/${rel2[1].id}.png`,\n          relation3: rel2[1].relation,\n          relationTotal:  relation1 + rel2[0].relation + rel2[1].relation\n        });\n      }\n    });\n    rel = _.sortBy(rel, [(horseGreatRow) => -horseGreatRow.relationTotal]);\n    \n    for(let father = 0; father < rel.length-1; father++){\n      for(let mother = father + 1; mother < rel.length; mother++){\n        rel3.push({\n          father:rel[father],\n          mother:rel[mother],\n          relation:RelationQuery.calculateRelation(rel[father].id1, rel[mother].id1) + rel[father].relationTotal + rel[mother].relationTotal,\n        });\n      }\n    }\n    \n    rel3 = _.sortBy(rel3, [(Horseallrela) => -Horseallrela.relation]);\n    rel3 = rel3.slice(0,4);\n    return [\n      rel.map((horseGreatRow) => (\n        <React.Fragment>\n          <tr>\n            \n            <td rowSpan={2}><img className=\"portrait\" src={horseGreatRow.image1}  /></td>\n            <td rowSpan={2} width={'15%'}>{horseGreatRow.relation1}</td>\n            <td><img className=\"portrait\" src={horseGreatRow.image2}  /></td>\n            <td width={'15%'}>{horseGreatRow.relation2}</td>\n            \n            <td rowSpan={2} width={'15%'}>{horseGreatRow.relationTotal}</td>\n          </tr>\n          <tr>\n            <td><img className=\"portrait\" src={horseGreatRow.image3}  /></td>\n            <td width={'15%'}>{horseGreatRow.relation3}</td>\n          </tr>\n        </React.Fragment>\n      )),\n      rel3.map((Horseallrela) => (\n        <React.Fragment>\n          <tr>\n            <td rowSpan={4}>{Horseallrela.relation}</td>\n            <td rowSpan={2}><img className=\"portrait\" src={Horseallrela.father.image1}  /></td>\n            <td><img className=\"portrait\" src={Horseallrela.father.image2}  /></td>          \n          </tr>\n          <tr>\n            <td><img className=\"portrait\" src={Horseallrela.father.image3}  /></td>\n          </tr>\n          <tr>           \n            <td rowSpan={2}><img className=\"portrait\" src={Horseallrela.mother.image1}  /></td>\n            <td><img className=\"portrait\" src={Horseallrela.mother.image2}  /></td>\n          </tr>\n          <tr>\n            <td><img className=\"portrait\" src={Horseallrela.mother.image3}  /></td>\n          </tr>\n        </React.Fragment>\n      )),\n    ];\n  }\n  buildGrandArray(inputId:string|undefined,inputId2:string) {\n    //const { horseId } = this.state;\n    const { localization } = this.props;\n    let rel: HorseRow[] = [];\n    this.horses.forEach((targetHorseId) => {\n      if (targetHorseId !== inputId && targetHorseId !== inputId2) {\n        rel.push({\n          id:targetHorseId,\n          name: localization.character.name[targetHorseId],\n          relation: RelationQuery.calculateGrandRelation(inputId, inputId2, targetHorseId),\n          image: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\n        });\n      }\n    });\n    rel = _.sortBy(rel, [(horseRow) => -horseRow.relation]);\n\n    return rel.map((horseRow) => (\n      <React.Fragment>\n        <tr>\n          <td>{horseRow.name}</td>\n          <td><img className=\"portrait\" src={horseRow.image} alt={horseRow.name} /></td>\n          <td width={'15%'}>{horseRow.relation}</td>\n        </tr>\n      </React.Fragment>\n    ));\n  }\n  buildRelationArray(inputId:string|undefined) {\n    //const { horseId } = this.state;\n    const { localization } = this.props;\n    let rel: HorseRow[] = [];\n    this.horses.forEach((targetHorseId) => {\n      if (targetHorseId !== inputId) {\n        rel.push({\n          id: targetHorseId,\n          name: localization.character.name[targetHorseId],\n          relation: RelationQuery.calculateRelation(inputId, targetHorseId),\n          image: `${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`,\n        });\n      }\n    });\n    rel = _.sortBy(rel, [(horseRow) => -horseRow.relation]);\n\n    return rel.map((horseRow) => (\n      <React.Fragment>\n        <tr onClick={() => this.setState({ horseId2:horseRow.id,horseId2Img:horseRow.image})}>   \n          <td>{horseRow.name}</td>\n          <td><img className=\"portrait\" src={horseRow.image} alt={horseRow.name} /></td>\n          <td width={'15%'}>{horseRow.relation}</td>\n        </tr>\n      </React.Fragment>\n    ));\n  }\n\n  render() {\n    const { localization } = this.props;\n    const relationArray = this.buildRelationArray(this.state.horseId);\n    const grandArray = this.buildGrandArray(this.state.horseId,this.state.horseId2);\n    const [sideRelationArray,bestRelation] = this.buildBestArray(this.state.horseId);\n    return (\n      <div className=\"content\">\n        <div className=\"dropdown\" >\n          <FormControl>\n            <InputLabel id=\"demo-simple-select-label\">ウマ</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              onChange={this.selectHorse}\n              \n            >\n              { this.horses.map((targetHorseId) => (\n                <MenuItem key={`${targetHorseId}_option`} value={targetHorseId}>\n                  <img\n                    className=\"portrait\"\n                    src={`${process.env.PUBLIC_URL}/static/image/character/portrait/${targetHorseId}.png`}\n                    alt={localization.character.name[targetHorseId]}\n                  />\n                  {localization.character.name[targetHorseId]}\n                </MenuItem>\n              ))}\n            </Select>\n           \n          </FormControl>\n          \n        </div>\n        <table style={{float:'left',marginRight:'20px'}}>\n          \n          {relationArray}\n        </table>\n        <table style={{float:'left',marginRight:'20px'}}>\n          <th >そふぼ<br/>click left table Img</th>\n          <th colSpan={2}><img className=\"portrait\" src={this.state.horseId2Img} ></img></th>\n          \n          {grandArray}\n        </table>\n        <table style={{float:'left',marginRight:'20px'}}>\n          <th colSpan={5}>Side parent</th>\n          {sideRelationArray}\n        </table>\n        <table style={{float:'left'}}>\n          <th colSpan={3}>Best couple</th>\n          {bestRelation}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RelationQuery;\n","import _ from 'lodash';\nimport {\n  Row, Col, Select,\n} from 'antd';\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, LocalizationData,\n} from '../library/common';\n\nimport 'antd/dist/antd.css';\nimport './component.css';\n\nconst { Option } = Select;\n\ninterface IProps {\n  localization: LocalizationData,\n  courseCategories: CourseCategory,\n  setData: (key: string, value: any) => void,\n  state: {\n    racecourse?: string,\n    ground?: string,\n    distance?: number,\n    course?: CourseDataType,\n  },\n}\n\ninterface IState {\n}\n\nclass CourseData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  getRacecourseComponent() {\n    const { localization, setData, state } = this.props;\n    const { racecourse } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Racecourse}:`}</span>\n          <Select className=\"select\" value={racecourse} onChange={(value) => setData('racecourse', value)}>\n            { _.map(localization.course.racecourse, (value: string, key: string) => (\n              <Option value={key}>{value}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getGroundComponent() {\n    const {\n      localization, courseCategories, setData, state,\n    } = this.props;\n    const { racecourse, ground } = state;\n\n    if (racecourse === undefined) {\n      return null;\n    }\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Ground}:`}</span>\n          <Select className=\"select\" value={ground} onChange={(value) => setData('ground', value)}>\n            { _.map(courseCategories[racecourse], (value: string, key: string) => (\n              <Option value={key}>{localization.course.ground[key]}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getDistanceComponent() {\n    const {\n      localization, courseCategories, setData, state,\n    } = this.props;\n    const { racecourse, ground, distance } = state;\n\n    if (racecourse === undefined || ground === undefined) {\n      return null;\n    }\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Distance}:`}</span>\n          <Select className=\"select\" value={distance} onChange={(value) => setData('distance', value)}>\n            { _.map(courseCategories[racecourse][ground], (value: string, key: number) => (\n              <Option value={key}>{key}</Option>\n            ))}\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  render() {\n    const racecourseComponent = this.getRacecourseComponent();\n    const groundComponent = this.getGroundComponent();\n    const distanceComponent = this.getDistanceComponent();\n\n    return (\n      <Row gutter={[8, 8]}>\n        {racecourseComponent}\n        {groundComponent}\n        {distanceComponent}\n      </Row>\n    );\n  }\n}\n\nexport default CourseData;\n","import _ from 'lodash';\nimport { Row, Col, Select } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: string },\n\n}\n\ninterface IState {\n}\n\nclass HorseProperRate extends Component<IProps, IState> {\n  static readonly properRateTypes = {\n    GroundType: ['GroundTypeTurf', 'GroundTypeDirt'],\n    DistanceType: ['DistanceTypeShort', 'DistanceTypeMile', 'DistanceTypeMiddle', 'DistanceTypeLong'],\n    RunningStyle: ['RunningStyleNige', 'RunningStyleSenko', 'RunningStyleSashi', 'RunningStyleOikomi'],\n  };\n\n  static readonly properRate = {\n    G: '1',\n    F: '2',\n    E: '3',\n    D: '4',\n    C: '5',\n    B: '6',\n    A: '7',\n    S: '8',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        { _.map(HorseProperRate.properRateTypes, (properTypes, properName) => (\n          <>\n            <Row gutter={[8, 8]}><Col span={24}>{localization.site[properName]}</Col></Row>\n            <Row gutter={[8, 8]}>\n              { _.map(properTypes, (properRateType) => {\n                const camelProperRateType = _.camelCase(properRateType);\n                return (\n                  <Col span={4}>\n                    <div className=\"flex\">\n                      <span className=\"select-label\">{`${localization.site[properRateType]}:`}</span>\n                      <Select className=\"select\" value={state[camelProperRateType]} onChange={(value) => setData(camelProperRateType, value)}>\n                        { _.map(HorseProperRate.properRate, (value, key) => (\n                          <Select.Option value={value}>{localization.site[key]}</Select.Option>\n                        ))}\n                      </Select>\n                    </div>\n                  </Col>\n                );\n              })}\n            </Row>\n          </>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default HorseProperRate;\n","import _ from 'lodash';\nimport { InputNumber, Row, Col } from 'antd';\nimport React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: { [key: string]: number },\n}\n\ninterface IState {\n}\n\nclass HorseStatData extends Component<IProps, IState> {\n  static readonly stats = {\n    speed: 'Speed',\n    stamina: 'Stamina',\n    pow: 'Power',\n    guts: 'Guts',\n    wiz: 'Wiz',\n  };\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <Row gutter={[8, 8]}>\n        { _.map(HorseStatData.stats, (value, key) => (\n          <Col span={4}>\n            <div className=\"flex\">\n              <span className=\"select-label\">{`${localization.site[value]}:`}</span>\n              <InputNumber className=\"select\" value={state[key]} min={1} max={1200} onChange={(data) => setData(key, data)} />\n            </div>\n          </Col>\n        ))}\n      </Row>\n    );\n  }\n}\n\nexport default HorseStatData;\n","import { RunningStyle } from '../common';\nimport Course from './course';\n\nexport enum ResultFlag {\n  FullLastSpurt,\n}\n\nexport enum Season {\n  Spring = '1',\n  Summer = '2',\n  Fall = '3',\n  Winter = '4',\n}\n\nexport enum Weather {\n  Sunny = '1',\n  Cloudy = '2',\n  Rainy = '3',\n  Snowy = '4',\n}\n\nexport interface RaceResultData {\n  time: number,\n  hpLeft: number,\n  resultFlags: Set<ResultFlag>,\n  skillsActivated: {\n    [key: string]: {\n      count: number,\n    },\n  },\n  temptation: {\n    triggered: boolean,\n    time: number,\n  },\n}\n\nexport interface IRaceHorse {\n  get course(): Course;\n  get season(): Season;\n  get weather(): Weather;\n  get postNumber(): number;\n  get popularity(): number;\n  get sameRunningStyleCount(): number;\n  get popularityFirstRunningStyle(): RunningStyle;\n  get runningStyle(): RunningStyle;\n}\n\nclass Common {\n}\n\nexport default Common;\n","import React, { Component } from 'react';\n\nimport { LocalizationData } from '../../library/common';\nimport HorseProperRate from './horse-proper-rate';\nimport HorseStatData from './horse-stat-data';\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: any,\n}\n\ninterface IState {\n}\n\nclass HorseData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    const { localization, setData, state } = this.props;\n    return (\n      <>\n        <HorseStatData localization={localization} setData={setData} state={state} />\n        <HorseProperRate localization={localization} setData={setData} state={state} />\n      </>\n    );\n  }\n}\n\nexport default HorseData;\n","import {\n  Row, Col, Select,\n} from 'antd';\nimport React, { Component } from 'react';\n\nimport {\n  GroundStatus, LocalizationData, RunningStyle,\n} from '../../library/common';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\n\nconst { Option } = Select;\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: {\n    strategy?: string,\n    groundStatus?: string,\n  },\n}\n\ninterface IState {\n}\n\nclass RaceData extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  getStrategyComponent() {\n    const { localization, setData, state } = this.props;\n    const { strategy } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.Strategy}:`}</span>\n          <Select className=\"select\" value={strategy} onChange={(value) => setData('strategy', value)}>\n            <Option value={RunningStyle.Nige}>{localization.site.RunningStyleNige}</Option>\n            <Option value={RunningStyle.Senko}>{localization.site.RunningStyleSenko}</Option>\n            <Option value={RunningStyle.Sashi}>{localization.site.RunningStyleSashi}</Option>\n            <Option value={RunningStyle.Oikomi}>{localization.site.RunningStyleOikomi}</Option>\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  getGroundStatusComponent() {\n    const { localization, setData, state } = this.props;\n    const { groundStatus } = state;\n    return (\n      <Col span={4}>\n        <div className=\"flex\">\n          <span className=\"select-label\">{`${localization.site.GroundStatus}:`}</span>\n          <Select className=\"select\" value={groundStatus} onChange={(value) => setData('groundStatus', value)}>\n            <Option value={GroundStatus.Good}>{localization.site.GroundStatusGood}</Option>\n            <Option value={GroundStatus.SlightlyHeavy}>{localization.site.GroundStatusSlightlyHeavy}</Option>\n            <Option value={GroundStatus.Heavy}>{localization.site.GroundStatusHeavy}</Option>\n            <Option value={GroundStatus.Bad}>{localization.site.GroundStatusBad}</Option>\n          </Select>\n        </div>\n      </Col>\n    );\n  }\n\n  render() {\n    const strategyComponent = this.getStrategyComponent();\n    const groundStatusComponent = this.getGroundStatusComponent();\n\n    return (\n      <Row gutter={[8, 8]}>\n        {strategyComponent}\n        {groundStatusComponent}\n      </Row>\n    );\n  }\n}\n\nexport default RaceData;\n","import {\n  RunningStyle, CoursePhase, GroundType, GroundStatus,\n} from '../common';\n\nconst constant = {\n  baseDistance: 2000,\n  minSpeed: {\n    minSpeedRate: 0.85,\n    minSpeedGutsCoefSqrt: 200,\n    minSpeedGutsCoef: 0.001,\n  },\n  startDash: {\n    targetSpeedCoefficient: 0.85,\n    startAccelAdd: 24,\n  },\n  targetSpeed: {\n    baseTargetSpeedRandomMinusVal1: -0.0065,\n    baseTargetSpeedRandomMinusVal2: 5500,\n    baseTargetSpeedRandomPlusVal1: 5500,\n    baseTargetSpeedRandomLogCoefficient: 0.1,\n    baseTargetSpeedRandomCoefficient: 0.01,\n    targetSpeedCoefficient: {\n      [RunningStyle.Nige]: {\n        [CoursePhase.Start]: 1,\n        [CoursePhase.Middle]: 0.98,\n        [CoursePhase.End]: 0.98,\n        [CoursePhase.LastSpurt]: 0.98,\n      },\n      [RunningStyle.Senko]: {\n        [CoursePhase.Start]: 0.978,\n        [CoursePhase.Middle]: 0.991,\n        [CoursePhase.End]: 0.975,\n        [CoursePhase.LastSpurt]: 0.975,\n      },\n      [RunningStyle.Sashi]: {\n        [CoursePhase.Start]: 0.938,\n        [CoursePhase.Middle]: 0.998,\n        [CoursePhase.End]: 0.994,\n        [CoursePhase.LastSpurt]: 0.994,\n      },\n      [RunningStyle.Oikomi]: {\n        [CoursePhase.Start]: 0.931,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 1,\n        [CoursePhase.LastSpurt]: 1,\n      },\n    },\n    phaseEndBaseTargetSpeedCoef: 500,\n    addSpeedParamCoef: 0.002,\n    baseTargetSpeedCoef: 1.05,\n    lastSpurtBaseTargetSpeedAddCoef: 0.01,\n    lastSpurtTargetSpeedCoefSqrt: 500,\n    upSlopeAddSpeedVal1: 200,\n    downSlopeAddSpeedVal1: 0.3,\n    downSlopeAddSpeedVal2: 10,\n    firstBlockSlowStyles: [RunningStyle.Sashi, RunningStyle.Oikomi],\n    lastSpurtTargetSpeedStep: 0.1,\n  },\n  accel: {\n    accelPhaseCoef: {\n      [RunningStyle.Nige]: {\n        [CoursePhase.Start]: 1,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.996,\n        [CoursePhase.LastSpurt]: 0.996,\n      },\n      [RunningStyle.Senko]: {\n        [CoursePhase.Start]: 0.985,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.996,\n        [CoursePhase.LastSpurt]: 0.996,\n      },\n      [RunningStyle.Sashi]: {\n        [CoursePhase.Start]: 0.975,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 1,\n        [CoursePhase.LastSpurt]: 1,\n      },\n      [RunningStyle.Oikomi]: {\n        [CoursePhase.Start]: 0.945,\n        [CoursePhase.Middle]: 1,\n        [CoursePhase.End]: 0.997,\n        [CoursePhase.LastSpurt]: 0.997,\n      },\n    },\n    accelPowCoef: 0.0006,\n    accelPowCoefUpSlope: 0.0004,\n    accelPowCoefSqrt: 500,\n    startAccelAdd: 24,\n    accelDecreaseCoef: {\n      [CoursePhase.Start]: -1.2,\n      [CoursePhase.Middle]: -0.8,\n      [CoursePhase.End]: 1.2,\n      [CoursePhase.LastSpurt]: 1.2,\n    },\n    accelDecreaseZeroHpCoef: -1.2,\n  },\n  hp: {\n    hpInitialVal1: 0.8,\n    hpMaxCoef: {\n      [RunningStyle.Nige]: 0.95,\n      [RunningStyle.Senko]: 0.89,\n      [RunningStyle.Sashi]: 1.0,\n      [RunningStyle.Oikomi]: 0.995,\n    },\n    hpDecBase: 20,\n    hpDecRateBaseNormal: 1,\n    hpDecRateBaseTemptation: 1.6,\n    hpDecRateBasePositionKeepPaseDown: 0.6,\n    hpDecRateMultiplyDownSlopeAccelMode: 0.4,\n    speedGapParam1: 12,\n    speedGapParam1Pow: 144,\n    groundModifierMultiHpSub: {\n      [GroundType.Turf]: {\n        [GroundStatus.Good]: 1,\n        [GroundStatus.SlightlyHeavy]: 1,\n        [GroundStatus.Heavy]: 1.02,\n        [GroundStatus.Bad]: 1.02,\n      },\n      [GroundType.Dirt]: {\n        [GroundStatus.Good]: 1,\n        [GroundStatus.SlightlyHeavy]: 1,\n        [GroundStatus.Heavy]: 1.01,\n        [GroundStatus.Bad]: 1.02,\n      },\n    },\n    hpGutsBase: 1,\n    hpGutsCoef: 200,\n    hpGutsCoefSqrt: 600,\n  },\n  course: {\n    distanceTargetSpeedCoefficient: 0.001,\n    blockPortion: 1 / 24,\n    distanceShort: { min: 0, max: 1400 },\n    distanceMile: { min: 1401, max: 1800 },\n    distanceMiddle: { min: 1801, max: 2400 },\n    distanceLong: { min: 2401, max: Number.MAX_VALUE },\n    startSpeed: 3,\n    phaseStart: 1 / 6,\n    phaseMiddle: 4 / 6,\n    phaseEnd: 5 / 6,\n    positionSense: 10 / 24,\n    frameTime: 1 / 15,\n    gateTimeRange: { min: 0, max: 0.1 },\n    finishTimeCoef: 1.18,\n  },\n  lastSpurt: {\n    determineRateBase: 0.15,\n    determineRateWizMultiplier: 0.0005,\n    targetDistanceFromGoal: 60,\n  },\n  slope: {\n    downSlopeAccelModeChanceBase: 0.0004,\n    downSlopeEndChance: 0.2,\n  },\n  skill: {\n    activatePerMin: 0.2,\n    lotActivatePerVal1: 1,\n    lotActivatePerVal2: 90,\n    abilityTimeDivideDistance: 1000,\n    coolDownTimeDivideDistance: 1000,\n  },\n};\n\nexport default constant;\n","import _ from 'lodash';\nimport nr from 'newton-raphson-method';\nimport util from 'util';\n\nimport constant from './constant';\nimport Course from './course';\nimport Horse, { HorseStat } from './horse';\nimport Skill from './skill';\nimport {\n  RaceResultData, ResultFlag, Season, Weather, IRaceHorse,\n} from './common';\nimport {\n  RunningStyle, CoursePhase, SkillEffectData, SkillData, SkillAbilityData, SkillAbilityTargetType, SkillAbilityType,\n} from '../common';\n\nimport distanceProperRateJson from '../../db/proper_rate/distance.json';\nimport groundProperRateJson from '../../db/proper_rate/ground.json';\nimport runningStyleProperRateJson from '../../db/proper_rate/running_style.json';\n\nconst distanceProperRate = distanceProperRateJson as { [key: string]: { speed: number, power: number } };\nconst groundProperRate = groundProperRateJson as { [key: string]: number };\nconst runningStyleProperRate = runningStyleProperRateJson as { [key: string]: number };\n\nenum BreakPoint {\n  Goal = '0000',\n\n  FinishFirstBlock = '1000',\n  FinishPhaseStart = '1010',\n  FinishPhaseMiddle = '1020',\n  FinishPhaseEnd = '1030',\n  FinishPhaseLastSpurt = '1040',\n\n  LastSpurt = '2000',\n  PositionSense = '2010',\n  TriggerSkill = '2020',\n  DownSlopeAccelMode = '2030',\n  ZeroHp = '2040',\n\n  FinishBlock = '3000',\n  Slope = '3010',\n\n  None = '9999',\n}\n\ninterface BreakPointData {\n  distance?: number,\n  time?: number,\n  parameters?: any\n}\n\ninterface BreakPointSet {\n  [BreakPoint.FinishFirstBlock]?: BreakPointData,\n  [BreakPoint.FinishPhaseStart]?: BreakPointData,\n  [BreakPoint.FinishPhaseMiddle]?: BreakPointData,\n  [BreakPoint.FinishPhaseEnd]?: BreakPointData,\n  [BreakPoint.FinishPhaseLastSpurt]?: BreakPointData,\n\n  [BreakPoint.LastSpurt]?: BreakPointData,\n  [BreakPoint.PositionSense]?: BreakPointData,\n  [BreakPoint.TriggerSkill]?: BreakPointData[],\n  [BreakPoint.DownSlopeAccelMode]?: BreakPointData,\n  [BreakPoint.ZeroHp]?: BreakPointData,\n\n  [BreakPoint.FinishBlock]?: BreakPointData,\n  [BreakPoint.Slope]?: BreakPointData[],\n\n  [BreakPoint.Goal]?: BreakPointData,\n\n  [BreakPoint.None]?: BreakPointData,\n}\n\nenum Mode {\n  StartDash,\n  FirstBlock,\n  LastSpurt,\n  UpSlope,\n  DownSlopeAccel,\n  Temptation,\n  PositionKeepPaceDown,\n  ZeroHp,\n}\n\ninterface LastSpurtCandidate {\n  time: number,\n  targetSpeed: number,\n  lastSpurtDistance: number,\n}\n\nclass RaceHorse implements IRaceHorse {\n  private _course: Course;\n\n  private _horse: Horse;\n\n  private _runningStyle: RunningStyle;\n\n  private _season: Season;\n\n  private _weather: Weather;\n\n  private _postNumber: number;\n\n  private _popularity: number;\n\n  private _sameRunningStyleCount: number;\n\n  private _popularityFirstRunningStyle: RunningStyle;\n\n  private _statAddition: HorseStat;\n\n  private _stat: HorseStat;\n\n  private _generalSkills: SkillData[] = [];\n\n  private _activateCountSkills: SkillData[] = [];\n\n  private _skillCooldown: { [key: string]: number } = {};\n\n  private _speedWizRandomRange: [number, number] = [0, 0];\n\n  private _speedWizRandom: number = 0;\n\n  private _phase: CoursePhase = CoursePhase.Start;\n\n  private _mode: Set<Mode> = new Set<Mode>();\n\n  private _speed: number = 0;\n\n  private _lastSpurtTargetSpeed: number = 0;\n\n  private _hp: number = 0;\n\n  private _distance: number = 0;\n\n  private _time: number = 0;\n\n  private _breakPoints: BreakPointSet = {};\n\n  private _startDashTargetSpeed: number | undefined = undefined;\n\n  private _slopePer: number = 0;\n\n  raceResult: RaceResultData;\n\n  constructor({\n    horse, course, runningStyle, season, weather, postNumber, popularity, sameRunningStyle, popularityFirstRunningStyle,\n  }: {\n    horse: Horse,\n    course: Course,\n    runningStyle: RunningStyle,\n    season: Season,\n    weather: Weather,\n    postNumber: number;\n    popularity: number;\n    sameRunningStyle: number;\n    popularityFirstRunningStyle: RunningStyle,\n  }) {\n    this._horse = horse;\n    this._course = course;\n    this._runningStyle = runningStyle;\n    this._season = season;\n    this._weather = weather;\n    this._postNumber = postNumber;\n    this._popularity = popularity;\n    this._sameRunningStyleCount = sameRunningStyle;\n    this._popularityFirstRunningStyle = popularityFirstRunningStyle;\n    this._statAddition = {\n      speed: 0,\n      stamina: 0,\n      pow: 0,\n      guts: 0,\n      wiz: 0,\n    };\n    this._stat = _.clone(this._horse.stat);\n    this.raceResult = {\n      time: 0,\n      hpLeft: 0,\n      resultFlags: new Set<ResultFlag>(),\n      skillsActivated: {},\n      temptation: {\n        triggered: false,\n        time: 0,\n      },\n    };\n  }\n\n  get course(): Course {\n    return this._course;\n  }\n\n  get season(): Season {\n    return this._season;\n  }\n\n  get weather(): Weather {\n    return this._weather;\n  }\n\n  get postNumber(): number {\n    return this._postNumber;\n  }\n\n  get popularity(): number {\n    return this._popularity;\n  }\n\n  get sameRunningStyleCount(): number {\n    return this._sameRunningStyleCount;\n  }\n\n  get popularityFirstRunningStyle(): RunningStyle {\n    return this._popularityFirstRunningStyle;\n  }\n\n  get runningStyle(): RunningStyle {\n    return this._runningStyle;\n  }\n\n  get maxHp(): number {\n    return this._course.distance + this.stat.stamina * constant.hp.hpMaxCoef[this._runningStyle] * constant.hp.hpInitialVal1;\n  }\n\n  private get hp(): number {\n    return this._hp;\n  }\n\n  private get time(): number {\n    return this._time;\n  }\n\n  private get lastSpurtDetermineRate(): number {\n    return constant.lastSpurt.determineRateBase + constant.lastSpurt.determineRateWizMultiplier * this.stat.wiz;\n  }\n\n  private get originalStat(): HorseStat {\n    return this._horse.stat;\n  }\n\n  private get stat(): HorseStat {\n    return this._stat;\n  }\n\n  private get skillActivateRate(): number {\n    return Math.max(constant.skill.activatePerMin, constant.skill.lotActivatePerVal1 - constant.skill.lotActivatePerVal2 / this.originalStat.wiz);\n  }\n\n  private get minSpeed(): number {\n    return this._course.baseTargetSpeed * constant.minSpeed.minSpeedRate\n      + Math.sqrt(this.stat.guts * constant.minSpeed.minSpeedGutsCoefSqrt) * constant.minSpeed.minSpeedGutsCoef;\n  }\n\n  private get startDashTargetSpeed(): number {\n    if (this._startDashTargetSpeed === undefined) {\n      this._startDashTargetSpeed = Math.max(this._course.baseTargetSpeed * constant.startDash.targetSpeedCoefficient, this.minSpeed);\n    }\n    return this._startDashTargetSpeed;\n  }\n\n  private get baseTargetSpeed(): number {\n    return this._course.baseTargetSpeed * constant.targetSpeed.targetSpeedCoefficient[this._runningStyle][this._phase];\n  }\n\n  private get baseTargetSpeedRandom(): number {\n    return this.baseTargetSpeed * this._speedWizRandom;\n  }\n\n  private get phaseEndTargetSpeedAddition(): number {\n    return Math.sqrt(constant.targetSpeed.phaseEndBaseTargetSpeedCoef * this.stat.speed)\n      * constant.targetSpeed.addSpeedParamCoef * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].speed;\n  }\n\n  private get maxLastSpurtTargetSpeed(): number {\n    return Math.max(\n      (this.baseTargetSpeed + this.phaseEndTargetSpeedAddition + constant.targetSpeed.lastSpurtBaseTargetSpeedAddCoef * this._course.baseTargetSpeed)\n          * constant.targetSpeed.baseTargetSpeedCoef\n        + this.phaseEndTargetSpeedAddition,\n      this.minSpeed,\n    );\n  }\n\n  private get lastSpurtTargetSpeed(): number {\n    return this._lastSpurtTargetSpeed;\n  }\n\n  private get realTargetSpeed(): number {\n    if (this._mode.has(Mode.StartDash) || this._mode.has(Mode.FirstBlock)) {\n      return this.startDashTargetSpeed;\n    }\n    if (this._mode.has(Mode.LastSpurt)) {\n      return this.lastSpurtTargetSpeed;\n    }\n\n    const slopePer = this._slopePer;\n    let slopeAdd = 0;\n    if (slopePer >= 1) {\n      slopeAdd = -slopePer * constant.targetSpeed.upSlopeAddSpeedVal1 / this.stat.pow;\n    } else if (slopePer <= -1 && this._mode.has(Mode.DownSlopeAccel)) {\n      slopeAdd = constant.targetSpeed.downSlopeAddSpeedVal1 + Math.abs(slopePer) / constant.targetSpeed.downSlopeAddSpeedVal2;\n    }\n    return this.baseTargetSpeed + this.baseTargetSpeedRandom + slopeAdd\n      + (this._phase >= 2 ? this.phaseEndTargetSpeedAddition : 0);\n  }\n\n  get targetSpeed(): number {\n    if (this._mode.has(Mode.ZeroHp)) {\n      return this.minSpeed;\n    }\n    return Math.max(this.minSpeed, this.realTargetSpeed);\n  }\n\n  refreshSpeedRandomValue(): void {\n    this._speedWizRandom = _.random(...this._speedWizRandomRange, true);\n  }\n\n  private get baseAccel(): number {\n    return constant.accel.accelPhaseCoef[this._runningStyle][this._phase]\n      * Math.sqrt(this.stat.pow * constant.accel.accelPowCoefSqrt)\n      * groundProperRate[this._horse.properRate.groundType[this._course.groundType]]\n      * distanceProperRate[this._horse.properRate.distanceType[this._course.distanceType]].power;\n  }\n\n  get accel(): number {\n    if (this._mode.has(Mode.ZeroHp)) {\n      return constant.accel.accelDecreaseZeroHpCoef;\n    }\n\n    if (this._speed <= this.targetSpeed) {\n      return (this._mode.has(Mode.StartDash) ? constant.accel.startAccelAdd : 0)\n        + this.baseAccel * (this._mode.has(Mode.UpSlope) ? constant.accel.accelPowCoefUpSlope : constant.accel.accelPowCoef);\n    }\n    return constant.accel.accelDecreaseCoef[this._phase];\n  }\n\n  private get phaseEndHpDecreaseRate() {\n    return constant.hp.hpGutsBase + constant.hp.hpGutsCoef / Math.sqrt(constant.hp.hpGutsCoefSqrt * this.stat.guts);\n  }\n\n  private get modeHpDecreaseRate() {\n    if (this._mode.has(Mode.Temptation)) {\n      return constant.hp.hpDecRateBaseTemptation;\n    }\n    if (this._mode.has(Mode.PositionKeepPaceDown)) {\n      return constant.hp.hpDecRateBasePositionKeepPaseDown;\n    }\n    return constant.hp.hpDecRateBaseNormal;\n  }\n\n  get hpDecreaseRate(): number {\n    return constant.hp.hpDecBase * constant.hp.groundModifierMultiHpSub[this._course.groundType][this._course.groundStatus]\n      * (this._phase >= CoursePhase.End ? this.phaseEndHpDecreaseRate : 1)\n      * this.modeHpDecreaseRate\n      * (this._mode.has(Mode.DownSlopeAccel) ? constant.hp.hpDecRateMultiplyDownSlopeAccelMode : 1);\n  }\n\n  get minBreakpoint(): { breakPoint: BreakPoint, distance: number, parameters: any } {\n    let minKey: BreakPoint = BreakPoint.None;\n    let minDistance: number = Number.MAX_VALUE;\n    let minParameters: any;\n    for (const [key, value] of Object.entries(this._breakPoints)) {\n      let targetValue: BreakPointData;\n      if (Array.isArray(value)) {\n        targetValue = value[value.length - 1];\n      } else {\n        targetValue = value;\n      }\n\n      if (targetValue.distance !== undefined) {\n        if (targetValue.distance < minDistance) {\n          minDistance = targetValue.distance;\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        } else if (targetValue.distance === minDistance && key < minKey) {\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        }\n      } else if (targetValue.time !== undefined) {\n        const distance = this._distance + (targetValue.time - this._time) * this._speed;\n        if (distance < minDistance) {\n          minDistance = distance;\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        } else if (targetValue.distance === minDistance && key < minKey) {\n          minKey = key as BreakPoint;\n          minParameters = targetValue.parameters;\n        }\n      }\n    }\n    return { breakPoint: minKey, distance: minDistance, parameters: minParameters };\n  }\n\n  private static getAccelHpDecrease({\n    initialSpeed, accel, time, hpDecreaseRate, baseTargetSpeed,\n  }: {\n    initialSpeed: number, accel: number, time: number, hpDecreaseRate: number, baseTargetSpeed: number,\n  }): number {\n    const speedCoefficient = (initialSpeed - baseTargetSpeed + constant.hp.speedGapParam1);\n    return hpDecreaseRate\n      * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\n      / constant.hp.speedGapParam1Pow;\n  }\n\n  private static getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }: { speed: number, hpDecreaseRate: number, baseTargetSpeed: number }) {\n    return hpDecreaseRate * (speed - baseTargetSpeed + constant.hp.speedGapParam1) ** 2 / constant.hp.speedGapParam1Pow;\n  }\n\n  private static getRunHpDecrease({\n    speed, hpDecreaseRate, baseTargetSpeed, time,\n  }: {\n    speed: number, hpDecreaseRate: number, baseTargetSpeed: number, time: number,\n  }): number {\n    return RaceHorse.getSpeedHpDecrease({ speed, hpDecreaseRate, baseTargetSpeed }) * time;\n  }\n\n  private static accelToTargetSpeed({\n    accel, currentSpeed, targetSpeed, maxDistance, hpDecreaseRate, baseTargetSpeed,\n  }: {\n    accel: number,\n    currentSpeed: number,\n    targetSpeed: number,\n    maxDistance: number,\n    hpDecreaseRate: number,\n    baseTargetSpeed: number\n  }) {\n    const targetSpeedByDistanceSquare = currentSpeed ** 2 + 2 * accel * maxDistance;\n    const finalSpeed = accel > 0\n      ? Math.min(targetSpeed, Math.sqrt(targetSpeedByDistanceSquare))\n      : Math.max(targetSpeed, Math.sqrt(Math.max(targetSpeedByDistanceSquare, 0)));\n    const time = (finalSpeed - currentSpeed) / accel;\n    const distance = (currentSpeed + currentSpeed + accel * time) * time / 2;\n    const hpCost = RaceHorse.getAccelHpDecrease({\n      initialSpeed: currentSpeed,\n      accel,\n      time,\n      hpDecreaseRate,\n      baseTargetSpeed,\n    });\n    return {\n      time, distance, hpCost, finalSpeed,\n    };\n  }\n\n  private doGateOpen(): void {\n    this._time += Math.floor(_.random(constant.course.gateTimeRange.min, constant.course.gateTimeRange.max, true) / constant.course.frameTime)\n      * constant.course.frameTime;\n    this._mode.add(Mode.StartDash);\n    this._breakPoints[BreakPoint.FinishBlock] = { distance: this._course.blockDistance };\n    this._breakPoints[BreakPoint.Goal] = { distance: this._course.distance };\n  }\n\n  private finishStartDash(): void {\n    const { accel, targetSpeed } = this;\n    const {\n      time, distance, hpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: this._course.distance,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n    this._time += time;\n    this._distance += distance;\n    this._hp -= hpCost;\n    this._speed = finalSpeed;\n\n    this._mode.delete(Mode.StartDash);\n    if (this._runningStyle === RunningStyle.Sashi || this._runningStyle === RunningStyle.Oikomi) {\n      this._breakPoints[BreakPoint.FinishFirstBlock] = { distance: this._course.blockDistance };\n      this._mode.add(Mode.FirstBlock);\n    } else {\n      this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\n    }\n  }\n\n  private calculateAccelAndRun(distance: number) {\n    const { accel, targetSpeed } = this;\n    const {\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: distance - this._distance,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    const runDistance = (distance - this._distance - accelDistance);\n    const runTime = runDistance / finalSpeed;\n    const runHpCost = RaceHorse.getRunHpDecrease({\n      speed: finalSpeed,\n      time: runTime,\n      hpDecreaseRate: this.hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    return {\n      time: accelTime + runTime,\n      distance: accelDistance + runDistance,\n      hpCost: accelHpCost + runHpCost,\n      finalSpeed,\n    };\n  }\n\n  private doAccelAndRun(distance: number) {\n    const { accel, targetSpeed, hpDecreaseRate } = this;\n    const {\n      time: accelTime, distance: accelDistance, hpCost: accelHpCost, finalSpeed,\n    } = RaceHorse.accelToTargetSpeed({\n      accel,\n      currentSpeed: this._speed,\n      targetSpeed,\n      maxDistance: distance - this._distance,\n      hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n\n    if (accelHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\n      /**\n       * Accel HP cost formula:\n       * hpDecrease = hpDecreaseRate * (accel^2 * time^3 / 3 + accel * time^2 * speedCoefficient + speedCoefficient^2 * time)/ 144\n       * speedCoefficient = initialSpeed - baseTargetSpeed + 12\n       * Given accel and initialSpeed, hpDecrease = this.hp is a cubic equation of time.\n       * It's hard to get a formula solution, but we can get a approximate value by applying Newton's Method.\n       */\n      const speedCoefficient = this._speed - this._course.baseTargetSpeed + constant.hp.speedGapParam1;\n      const realAccelTime = nr(\n        (time: number) => (\n          hpDecreaseRate * (accel ** 2 * time ** 3 / 3 + accel * time ** 2 * speedCoefficient + speedCoefficient ** 2 * time)\n        ),\n        (time: number) => (\n          hpDecreaseRate * (accel ** 2 * time ** 2 + accel * time * 2 * speedCoefficient + speedCoefficient ** 2)\n        ),\n        10,\n      );\n      const realAccelDistance = (this._speed + this._speed + accel * accelTime) * accelTime / 2;\n      this._time += realAccelTime;\n      this._distance += realAccelDistance;\n      this._hp = 0;\n      this._mode.add(Mode.ZeroHp);\n      delete this._breakPoints[BreakPoint.ZeroHp];\n      return false;\n    }\n\n    this._hp -= accelHpCost;\n    this._time += accelTime;\n    this._distance += accelDistance;\n    this._speed = finalSpeed;\n\n    const speedHpDecreaseRate = RaceHorse.getSpeedHpDecrease({\n      speed: this._speed,\n      hpDecreaseRate,\n      baseTargetSpeed: this._course.baseTargetSpeed,\n    });\n    const runDistance = distance - this._distance;\n    const runTime = runDistance / this._speed;\n    const runHpCost = speedHpDecreaseRate * runTime;\n\n    if (runHpCost > this.hp && !this._mode.has(Mode.ZeroHp)) {\n      const realRunTime = this._hp / speedHpDecreaseRate;\n      const realRunDistance = realRunTime * this._speed;\n      this._time += realRunTime;\n      this._distance += realRunDistance;\n      this._hp = 0;\n      this._mode.add(Mode.ZeroHp);\n      delete this._breakPoints[BreakPoint.ZeroHp];\n      return false;\n    }\n\n    this._hp -= runHpCost;\n    this._time += runTime;\n    this._distance += runDistance;\n    if (!this._mode.has(Mode.ZeroHp)) {\n      this._breakPoints[BreakPoint.ZeroHp] = { distance: this._distance + this.hp / speedHpDecreaseRate * this._speed };\n    }\n    return true;\n  }\n\n  private finishFirstBlock = () => {\n    this._mode.delete(Mode.FirstBlock);\n    this._breakPoints[BreakPoint.FinishPhaseStart] = { distance: this._course.phaseStartDistance };\n  };\n\n  private finishBlock = () => {\n    if (!this._mode.has(Mode.LastSpurt) && this._course.distance > this._distance) {\n      this.refreshSpeedRandomValue();\n      this._breakPoints[BreakPoint.FinishBlock] = { distance: this._distance + this._course.blockDistance };\n    }\n  };\n\n  private finishPhaseStart = () => {\n    this._phase = CoursePhase.Middle;\n    this._breakPoints[BreakPoint.FinishPhaseMiddle] = { distance: this._course.phaseMiddleDistance };\n  };\n\n  private static randomByCandidates(lastSpurtSpeedCandidates: LastSpurtCandidate[], determineRate: number): LastSpurtCandidate {\n    const randomNumber = Math.random();\n    const targetItem = Math.min(\n      lastSpurtSpeedCandidates.length - 1,\n      Math.floor(Math.log(randomNumber) / Math.log(1 - determineRate)),\n    );\n    return lastSpurtSpeedCandidates[targetItem];\n  }\n\n  private calculateLastSpurt = (): { lastSpurtDistance: number, lastSpurtTargetSpeed: number } => {\n    this._mode.add(Mode.LastSpurt);\n    this._lastSpurtTargetSpeed = this.maxLastSpurtTargetSpeed;\n    const { hpCost, finalSpeed } = this.calculateAccelAndRun(this._course.distance - constant.lastSpurt.targetDistanceFromGoal);\n    this._mode.delete(Mode.LastSpurt);\n    if (hpCost <= this._hp && finalSpeed === this._lastSpurtTargetSpeed) {\n      this.raceResult.resultFlags.add(ResultFlag.FullLastSpurt);\n      return {\n        lastSpurtDistance: this._distance,\n        lastSpurtTargetSpeed: finalSpeed,\n      };\n    }\n\n    let lastSpurtSpeedCandidates: LastSpurtCandidate[] = [];\n    const phaseEndBaseTargetSpeed = this.baseTargetSpeed + this.phaseEndTargetSpeedAddition;\n    const maxDistance = this._course.distance - this._distance - constant.lastSpurt.targetDistanceFromGoal;\n    const { accel, hpDecreaseRate } = this;\n    const { baseTargetSpeed } = this._course;\n    for (; this.lastSpurtTargetSpeed >= phaseEndBaseTargetSpeed; this._lastSpurtTargetSpeed -= constant.targetSpeed.lastSpurtTargetSpeedStep) {\n      const {\n        time: phaseEndAccelTime,\n        distance: phaseEndAccelDistance,\n        hpCost: phaseEndAccelHpCost,\n        finalSpeed: phaseEndFinalSpeed,\n      } = RaceHorse.accelToTargetSpeed({\n        accel,\n        currentSpeed: this._speed,\n        targetSpeed: phaseEndBaseTargetSpeed,\n        maxDistance,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const {\n        time: lastSpurtAccelTime,\n        distance: lastSpurtAccelDistance,\n        hpCost: lastSpurtAccelHpCost,\n      } = RaceHorse.accelToTargetSpeed({\n        accel,\n        currentSpeed: phaseEndFinalSpeed,\n        targetSpeed: this.lastSpurtTargetSpeed,\n        maxDistance: maxDistance - phaseEndAccelDistance,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const runDistance = maxDistance - phaseEndAccelDistance - lastSpurtAccelDistance;\n      const phaseEndRunTime = runDistance / phaseEndBaseTargetSpeed;\n      const phaseEndRunHpCost = RaceHorse.getRunHpDecrease({\n        speed: phaseEndBaseTargetSpeed,\n        time: phaseEndRunTime,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n      const lastSpurtRunTime = runDistance / this.lastSpurtTargetSpeed;\n      const lastSpurtRunHpCost = RaceHorse.getRunHpDecrease({\n        speed: this.lastSpurtTargetSpeed,\n        time: lastSpurtRunTime,\n        hpDecreaseRate,\n        baseTargetSpeed,\n      });\n\n      if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + lastSpurtRunHpCost) {\n        lastSpurtSpeedCandidates.push({\n          lastSpurtDistance: this._distance,\n          targetSpeed: this.lastSpurtTargetSpeed,\n          time: phaseEndAccelTime + lastSpurtAccelTime + lastSpurtRunTime,\n        });\n      } else if (this.hp >= phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost) {\n        const hpLeft = this.hp - (phaseEndAccelHpCost + lastSpurtAccelHpCost + phaseEndRunHpCost);\n        const hpDiff = lastSpurtRunHpCost - phaseEndRunHpCost;\n        lastSpurtSpeedCandidates.push({\n          lastSpurtDistance: this._distance + phaseEndAccelDistance + runDistance * (1 - hpLeft / hpDiff),\n          targetSpeed: this.lastSpurtTargetSpeed,\n          time: phaseEndAccelTime + lastSpurtAccelTime + (hpLeft / hpDiff) * lastSpurtRunTime + (1 - hpLeft / hpDiff) * phaseEndRunTime,\n        });\n      }\n    }\n    lastSpurtSpeedCandidates.push({\n      lastSpurtDistance: Number.MAX_VALUE,\n      targetSpeed: phaseEndBaseTargetSpeed,\n      time: Number.MAX_VALUE,\n    });\n    lastSpurtSpeedCandidates = _.sortBy(lastSpurtSpeedCandidates, ['time']);\n    const candidate = RaceHorse.randomByCandidates(lastSpurtSpeedCandidates, this.lastSpurtDetermineRate);\n    return {\n      lastSpurtDistance: candidate.lastSpurtDistance,\n      lastSpurtTargetSpeed: candidate.targetSpeed,\n    };\n  };\n\n  private finishPhaseMiddle = () => {\n    this._phase = CoursePhase.End;\n    const { lastSpurtDistance, lastSpurtTargetSpeed } = this.calculateLastSpurt();\n    this._breakPoints[BreakPoint.FinishPhaseEnd] = { distance: this._course.phaseEndDistance };\n    this._breakPoints[BreakPoint.LastSpurt] = { distance: lastSpurtDistance };\n    this._lastSpurtTargetSpeed = lastSpurtTargetSpeed;\n  };\n\n  private finishPhaseEnd = () => {\n    this._phase = CoursePhase.LastSpurt;\n    this._breakPoints[BreakPoint.FinishPhaseLastSpurt] = { distance: this._course.distance };\n  };\n\n  private doLastSpurt = () => {\n    this._mode.add(Mode.LastSpurt);\n    delete this._breakPoints[BreakPoint.FinishBlock];\n  };\n\n  private finishLastSpurt = () => {};\n\n  private triggerPositionSense = () => {};\n\n  private zeroHp = () => {\n    if (this.hp <= 0) {\n      this._mode.add(Mode.ZeroHp);\n    }\n  };\n\n  private changeSlope = ({ slopePer }: { slopePer: number }) => {\n    if (this._slopePer > -1 && slopePer <= -1) {\n      this.checkDownSlopeAccelMode();\n    } else if (this._slopePer <= -1 && slopePer > -1) {\n      this._mode.delete(Mode.DownSlopeAccel);\n      delete this._breakPoints[BreakPoint.DownSlopeAccelMode];\n    }\n    this._slopePer = slopePer;\n  };\n\n  private checkDownSlopeAccelMode = () => {\n    if (this._mode.has(Mode.DownSlopeAccel)) {\n      if (Math.random() <= constant.slope.downSlopeEndChance) {\n        this._mode.delete(Mode.DownSlopeAccel);\n      } else {\n        this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\n      }\n    } else if (Math.random() <= this.stat.wiz * constant.slope.downSlopeAccelModeChanceBase) {\n      this._mode.add(Mode.DownSlopeAccel);\n      this._breakPoints[BreakPoint.DownSlopeAccelMode] = { time: this._time + 1 };\n    }\n  };\n\n  private applyEffect(effect: SkillEffectData) {\n    const targets: RaceHorse[] = [];\n    switch (effect.target_type) {\n      case SkillAbilityTargetType.Self:\n        targets.push(this);\n        break;\n      default:\n        break;\n    }\n\n    _.map(targets, (target) => {\n      switch (effect.ability_type) {\n        case SkillAbilityType.AddSpeed:\n          break;\n        case SkillAbilityType.AddStamina:\n          break;\n        case SkillAbilityType.AddPow:\n          break;\n        case SkillAbilityType.AddGuts:\n          break;\n        case SkillAbilityType.AddWiz:\n          break;\n        case SkillAbilityType.AddSight:\n          break;\n        case SkillAbilityType.AddHp:\n          break;\n        case SkillAbilityType.ExtendTemptation:\n          break;\n        case SkillAbilityType.AddTargetSpeed:\n          break;\n        case SkillAbilityType.AddLaneAccel:\n          break;\n        case SkillAbilityType.AddAccel:\n          break;\n      }\n    });\n  }\n\n  private activateAbility({ skillId, ability }: { skillId: string, ability: SkillAbilityData }) {\n    if (!(skillId in this.raceResult.skillsActivated)) {\n      this.raceResult.skillsActivated[skillId] = { count: 1 };\n    } else {\n      this.raceResult.skillsActivated[skillId].count += 1;\n    }\n\n    this._skillCooldown[skillId] = this._time + ability.cooldown_time;\n\n    for (const effect of ability.effects) {\n      this.applyEffect(effect);\n    }\n  }\n\n  private triggerSkill = () => {};\n\n  private reachGoal = () => {\n    this._breakPoints = {};\n  };\n\n  private readonly breakPointMap: { [key in BreakPoint]: (parameters: any) => void } = {\n    [BreakPoint.None]: () => {},\n    [BreakPoint.FinishFirstBlock]: this.finishFirstBlock,\n    [BreakPoint.FinishBlock]: this.finishBlock,\n    [BreakPoint.FinishPhaseStart]: this.finishPhaseStart,\n    [BreakPoint.FinishPhaseMiddle]: this.finishPhaseMiddle,\n    [BreakPoint.FinishPhaseEnd]: this.finishPhaseEnd,\n    [BreakPoint.LastSpurt]: this.doLastSpurt,\n    [BreakPoint.FinishPhaseLastSpurt]: this.finishLastSpurt,\n    [BreakPoint.PositionSense]: this.triggerPositionSense,\n    [BreakPoint.ZeroHp]: this.zeroHp,\n    [BreakPoint.Slope]: this.changeSlope,\n    [BreakPoint.DownSlopeAccelMode]: this.checkDownSlopeAccelMode,\n    [BreakPoint.TriggerSkill]: this.triggerSkill,\n    [BreakPoint.Goal]: this.reachGoal,\n  };\n\n  buildSlopeBreakPoints() {\n    const slopePers = this._course.allSlopePers;\n    for (let i = slopePers.length - 1; i > 0; i -= 1) {\n      this.addBreakPoint(BreakPoint.Slope, {\n        distance: slopePers[i].distance,\n        parameters: {\n          slopePer: slopePers[i].slope_per,\n        },\n      });\n    }\n  }\n\n  addBreakPoint(type: BreakPoint, data: BreakPointData) {\n    switch (type) {\n      case BreakPoint.TriggerSkill:\n      case BreakPoint.Slope:\n        if (!(type in this._breakPoints)) {\n          this._breakPoints[type] = [data];\n        } else {\n          this._breakPoints[type]?.push(data);\n        }\n        break;\n      default:\n        this._breakPoints[type] = data;\n        break;\n    }\n  }\n\n  removeBreakPoint(type: BreakPoint) {\n    switch (type) {\n      case BreakPoint.TriggerSkill:\n      case BreakPoint.Slope:\n        this._breakPoints[type]?.pop();\n        if (this._breakPoints[type]?.length === 0) {\n          delete this._breakPoints[type];\n        }\n        break;\n      default:\n        delete this._breakPoints[type];\n        break;\n    }\n  }\n\n  getSkillTriggerStat(skill: SkillData): { distances: number[], specific: boolean } {\n    const course = this._course;\n    return { distances: [], specific: false };\n  }\n\n  populateSkills() {\n    const { skillActivateRate } = this;\n    const generalTriggerDistances = new Set<number>();\n    const specificTriggerDistances = [];\n    for (const skill of this._horse.skills) {\n      if (Skill.matchBase(skill, this) && Math.random() <= skillActivateRate) {\n        if (skill.abilities[0].ability_time === -0.0001) {\n          this.activateAbility({ skillId: skill.id, ability: skill.abilities[0] });\n        } else {\n          const { distances, specific } = this.getSkillTriggerStat(skill);\n          if (specific) {\n            specificTriggerDistances.push({ distances, skill });\n          } else {\n            for (const distance of distances) {\n              generalTriggerDistances.add(distance);\n            }\n            this._generalSkills.push(skill);\n          }\n        }\n      }\n    }\n  }\n\n  simulate() {\n    this._speed = constant.course.startSpeed;\n    this._time = 0;\n    this._distance = 0;\n    this._hp = this.maxHp;\n    this._mode = new Set();\n    this._phase = CoursePhase.Start;\n    this._breakPoints = {};\n    this._statAddition = {\n      speed: 0,\n      stamina: 0,\n      pow: 0,\n      guts: 0,\n      wiz: 0,\n    };\n    this._stat = _.clone(this._horse.stat);\n    this._generalSkills = [];\n    this._activateCountSkills = [];\n    this._skillCooldown = {};\n\n    this.populateSkills();\n\n    const upperBound = (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\n    * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\n    const lowerBound = constant.targetSpeed.baseTargetSpeedRandomMinusVal1\n      + (this.stat.wiz / constant.targetSpeed.baseTargetSpeedRandomPlusVal1) * constant.targetSpeed.baseTargetSpeedRandomCoefficient\n      * Math.log10(this.stat.wiz * constant.targetSpeed.baseTargetSpeedRandomLogCoefficient);\n    this._speedWizRandomRange = [lowerBound, upperBound];\n    this.refreshSpeedRandomValue();\n\n    this.buildSlopeBreakPoints();\n    this.doGateOpen();\n    this.debugOutput();\n    this.finishStartDash();\n    this.debugOutput();\n\n    while (Object.keys(this._breakPoints).length > 0) {\n      const { breakPoint, distance, parameters } = this.minBreakpoint;\n      if (this.doAccelAndRun(distance)) {\n        this.removeBreakPoint(breakPoint);\n        this.breakPointMap[breakPoint](parameters);\n      }\n      this.debugOutput();\n    }\n\n    this.raceResult.time = this._time;\n    console.log(this._hp);\n    this.raceResult.hpLeft = this._hp;\n  }\n\n  debugOutput() {\n    return;\n    const debugData = {\n      hp: this.hp,\n      speed: this._speed,\n      time: this._time,\n      distance: this._distance,\n      phase: this._phase,\n      mode: Array.from(this._mode),\n      breakPoints: util.inspect(this._breakPoints, { depth: null }),\n      slopePer: this._slopePer,\n    };\n    console.log(debugData);\n  }\n}\n\nexport default RaceHorse;\n","import React, { Component } from 'react';\n\nimport _ from 'lodash';\nimport Common, { CourseDataType, LocalizationData } from '../../library/common';\nimport constant from '../../library/race/constant';\nimport { RaceResultData, ResultFlag } from '../../library/race/common';\n\nimport '../component.css';\n\ninterface IProps {\n  localization: LocalizationData;\n  raceResults: RaceResultData[];\n  course?: CourseDataType,\n}\n\ninterface IState {\n}\n\nclass RaceResult extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    const { localization, raceResults, course } = this.props;\n    if (course === undefined || raceResults.length === 0) {\n      return (\n        <>\n        </>\n      );\n    }\n\n    const timeAverage = _.meanBy(raceResults, 'time');\n    const timeShown: string = (timeAverage * constant.course.finishTimeCoef > parseFloat(course.finish_time_min) / 10000)\n      ? Common.secondToTime(timeAverage * constant.course.finishTimeCoef)\n      : localization.site.TimeMin;\n\n    let timeDeviationSum = 0;\n    let fullLastSpurtCount = 0;\n    let hpLeftSum = 0;\n    for (const result of raceResults) {\n      timeDeviationSum += (result.time - timeAverage) ** 2;\n      if (result.resultFlags.has(ResultFlag.FullLastSpurt)) {\n        fullLastSpurtCount += 1;\n      }\n      hpLeftSum += result.hpLeft;\n    }\n    return (\n      <table>\n        <tr>\n          <th>{localization.site.TimeAverage}</th>\n          <th>{localization.site.TimeStandardDeviation}</th>\n          <th>{localization.site.TimeShown}</th>\n          <th>{localization.site.FullLastSpurtRate}</th>\n          <th>{localization.site.HpLeftAverage}</th>\n        </tr>\n        <tr>\n          <td>{timeAverage.toFixed(3)}</td>\n          <td>{Math.sqrt(timeDeviationSum / raceResults.length).toFixed(3)}</td>\n          <td>{timeShown}</td>\n          <td>{(fullLastSpurtCount / raceResults.length).toLocaleString('en', { style: 'percent' })}</td>\n          <td>{(hpLeftSum / raceResults.length).toFixed(3)}</td>\n        </tr>\n      </table>\n    );\n  }\n}\n\nexport default RaceResult;\n","import {\n  DistanceType, ProperRate, GroundType, RunningStyle, SkillData,\n} from '../common';\n\nexport interface HorseStat {\n  speed: number;\n  stamina: number;\n  pow: number;\n  guts: number;\n  wiz: number;\n}\n\nexport interface HorseProperRate {\n  distanceType: { [key in DistanceType]: ProperRate },\n  groundType: { [key in GroundType]: ProperRate },\n  runningStyle: { [key in RunningStyle]: ProperRate },\n}\n\nclass Horse {\n  stat: HorseStat;\n\n  properRate: HorseProperRate;\n\n  skills: SkillData[];\n\n  constructor(\n    { stat, properRate, skills }: {\n      stat: HorseStat,\n      properRate: HorseProperRate,\n      skills: SkillData[],\n    },\n  ) {\n    this.stat = stat;\n    this.properRate = properRate;\n    this.skills = skills;\n  }\n}\n\nexport default Horse;\n","import constant from './constant';\nimport {\n  DistanceType, GroundType, GroundStatus, CourseDataType, TurnType,\n} from '../common';\n\nclass Course {\n  private _courseData: CourseDataType;\n\n  groundStatus: GroundStatus;\n\n  static getDistanceType(distance: number): DistanceType {\n    if (distance >= constant.course.distanceShort.min && distance <= constant.course.distanceShort.max) {\n      return DistanceType.Short;\n    }\n    if (distance >= constant.course.distanceMile.min && distance <= constant.course.distanceMile.max) {\n      return DistanceType.Mile;\n    }\n    if (distance >= constant.course.distanceMiddle.min && distance <= constant.course.distanceMiddle.max) {\n      return DistanceType.Middle;\n    }\n    if (distance >= constant.course.distanceLong.min && distance <= constant.course.distanceLong.max) {\n      return DistanceType.Long;\n    }\n    return DistanceType.Long;\n  }\n\n  constructor({ courseData, groundStatus } : { courseData: CourseDataType, groundStatus: GroundStatus }) {\n    this._courseData = courseData;\n    this.groundStatus = groundStatus;\n  }\n\n  get distance(): number {\n    return this._courseData.distance;\n  }\n\n  get distanceType(): DistanceType {\n    return Course.getDistanceType(this.distance);\n  }\n\n  get groundType(): GroundType {\n    return this._courseData.ground;\n  }\n\n  get turnType(): TurnType {\n    return this._courseData.turn;\n  }\n\n  get blockDistance(): number {\n    return this.distance * constant.course.blockPortion;\n  }\n\n  get phaseStartDistance(): number {\n    return this.distance * constant.course.phaseStart;\n  }\n\n  get phaseMiddleDistance(): number {\n    return this.distance * constant.course.phaseMiddle;\n  }\n\n  get phaseEndDistance(): number {\n    return this.distance * constant.course.phaseEnd;\n  }\n\n  get positionSenseDistance(): number {\n    return this.distance * constant.course.positionSense;\n  }\n\n  get baseTargetSpeed(): number {\n    return 20 - (this.distance - constant.baseDistance) * constant.course.distanceTargetSpeedCoefficient;\n  }\n\n  get allSlopePers(): { distance: number, slope_per: number }[] {\n    return this._courseData.slope_per;\n  }\n\n  get trackId(): string {\n    return this._courseData.race_track_id;\n  }\n}\n\nexport default Course;\n","import {\n  SkillConditionObject, SkillConditionObjectFormula, SkillConditionObjectLogical, SkillConditionOperatorsFormula,\n} from '../common';\nimport { IRaceHorse } from './common';\n\nclass Skill {\n  static matchBase(condition: SkillConditionObject, raceHorse: IRaceHorse): boolean {\n    if (condition === {}) {\n      return true;\n    }\n\n    const realCondition = condition as SkillConditionObjectLogical | SkillConditionObjectFormula;\n    if (realCondition.operator === 'and') {\n      const andCondition = realCondition as SkillConditionObjectLogical;\n      for (const childCondition of andCondition.items) {\n        if (!Skill.matchBase(childCondition, raceHorse)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (realCondition.operator === 'or') {\n      const orCondition = realCondition as SkillConditionObjectLogical;\n      for (const childCondition of orCondition.items) {\n        if (Skill.matchBase(childCondition, raceHorse)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    const formulaCondition = realCondition as SkillConditionObjectFormula;\n    const targetValue = Skill.getTargetValue(formulaCondition, raceHorse);\n    if (typeof targetValue === 'boolean') {\n      return targetValue;\n    }\n\n    switch (formulaCondition.operator) {\n      case SkillConditionOperatorsFormula.GreaterThan:\n        return targetValue > parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.GreaterThanOrEqualTo:\n        return targetValue >= parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.LessThan:\n        return targetValue < parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.LessThanOrEqualTo:\n        return targetValue <= parseFloat(formulaCondition.value);\n      case SkillConditionOperatorsFormula.EqualTo:\n        return targetValue === formulaCondition.value;\n      case SkillConditionOperatorsFormula.NotEqualTo:\n        return targetValue !== formulaCondition.value;\n      default:\n        return false;\n    }\n  }\n\n  static getTargetValue(condition: SkillConditionObjectFormula, raceHorse: IRaceHorse): string | number | boolean {\n    switch (condition.key) {\n      case 'rotation':\n        return raceHorse.course.turnType;\n      case 'track_id':\n        return raceHorse.course.trackId;\n      case 'is_basis_distance':\n        return raceHorse.course.distance % 400 === 0 ? '1' : '0';\n      case 'season':\n        return raceHorse.season;\n      case 'weather':\n        return raceHorse.weather;\n      case 'post_number':\n        return raceHorse.postNumber;\n      case 'running_style_count_same':\n        return raceHorse.sameRunningStyleCount;\n      case 'running_style_equal_popularity_one':\n        return raceHorse.popularityFirstRunningStyle === raceHorse.runningStyle ? '1' : '0';\n      case 'popularity':\n        return raceHorse.popularity;\n      case 'grade':\n        // TODO\n        return true;\n      case 'running_style':\n        return raceHorse.runningStyle;\n      case 'random_lot':\n        // Verification needed.\n        return Math.random() * 100 <= parseFloat(condition.value);\n      case 'same_skill_horse_count':\n        // TODO\n        return true;\n      default:\n        return true;\n    }\n  }\n}\n\nexport default Skill;\n","import _ from 'lodash';\nimport {\n  Button, Col, InputNumber, Row, Progress,\n} from 'antd';\nimport React, { Component } from 'react';\nimport Promise from 'bluebird';\n\nimport {\n  CourseDataType, DistanceType, GroundStatus, GroundType, LocalizationData, RunningStyle, SkillData,\n} from '../../library/common';\nimport { RaceResultData, Season, Weather } from '../../library/race/common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate,\n} from './common';\nimport Horse from '../../library/race/horse';\nimport Course from '../../library/race/course';\nimport RaceHorse from '../../library/race/race-horse';\n\nimport skillJson from '../../db/skill.json';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\n\nconst skillData = skillJson as { [key: string]: SkillData };\n\ninterface SimulatorState extends IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n  strategy?: string,\n  groundStatus?: string,\n\n  racecourse?: string,\n  ground?: string,\n  distance?: number,\n  course?: CourseDataType,\n\n  skills?: string[],\n}\n\ninterface IProps {\n  localization: LocalizationData;\n  setData: (key: string, value: any) => void,\n  state: SimulatorState,\n}\n\ninterface IState {\n  running: boolean,\n  finished: number,\n  rounds: number,\n}\n\nclass SimulatorCalculator extends Component<IProps, IState> {\n  static readonly concurrency = 50;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      running: false,\n      rounds: 1000,\n      finished: 0,\n    };\n  }\n\n  calculate = async () => {\n    this.setState({\n      running: true,\n      finished: 0,\n    });\n    const { state, setData } = this.props;\n    const {\n      speed, stamina, pow, guts, wiz,\n      strategy, groundStatus, course,\n      skills,\n      groundTypeTurf, groundTypeDirt,\n      distanceTypeShort, distanceTypeMile, distanceTypeMiddle, distanceTypeLong,\n      runningStyleNige, runningStyleSenko, runningStyleSashi, runningStyleOikomi,\n    } = state;\n    const { rounds } = this.state;\n\n    const targetCourse = new Course({\n      courseData: course as CourseDataType,\n      groundStatus: groundStatus as GroundStatus,\n    });\n    const targetHorse = new Horse({\n      stat: {\n        speed, stamina, pow, guts, wiz,\n      },\n      properRate: {\n        groundType: {\n          [GroundType.Turf]: groundTypeTurf,\n          [GroundType.Dirt]: groundTypeDirt,\n        },\n        distanceType: {\n          [DistanceType.Short]: distanceTypeShort,\n          [DistanceType.Mile]: distanceTypeMile,\n          [DistanceType.Middle]: distanceTypeMiddle,\n          [DistanceType.Long]: distanceTypeLong,\n        },\n        runningStyle: {\n          [RunningStyle.Nige]: runningStyleNige,\n          [RunningStyle.Senko]: runningStyleSenko,\n          [RunningStyle.Sashi]: runningStyleSashi,\n          [RunningStyle.Oikomi]: runningStyleOikomi,\n        },\n      },\n      skills: _.map(skills, (skillId) => (skillData[skillId])),\n    });\n\n    let counter = 0;\n    let started = 0;\n    const worksPerThread = Math.ceil(rounds / SimulatorCalculator.concurrency);\n    const raceResults: RaceResultData[] = [];\n    await Promise.map(\n      new Array(SimulatorCalculator.concurrency),\n      async () => {\n        const raceHorse = new RaceHorse({\n          horse: targetHorse,\n          course: targetCourse,\n          runningStyle: strategy as RunningStyle,\n          season: Season.Spring,\n          weather: Weather.Sunny,\n          postNumber: 1,\n          popularity: 1,\n          sameRunningStyle: 0,\n          popularityFirstRunningStyle: strategy as RunningStyle,\n        });\n        for (let i = 0; i < worksPerThread && started < rounds; i += 1) {\n          started += 1;\n          raceHorse.simulate();\n          raceResults.push(raceHorse.raceResult);\n          counter += 1;\n          this.setState({ finished: counter });\n          await Promise.delay(0);\n        }\n      },\n      { concurrency: SimulatorCalculator.concurrency },\n    );\n    this.setState({ running: false });\n    setData('raceResults', raceResults);\n  };\n\n  render() {\n    const { localization, state } = this.props;\n    const { course } = state;\n    const { finished, rounds, running } = this.state;\n    const progressPercent = _.round(finished / rounds * 100, 1);\n    return (\n      <Row gutter={[8, 8]}>\n        <Col span={4}>\n          <div className=\"flex\">\n            <span className=\"select-label\">{`${localization.site.SimulatorCalculateRounds}:`}</span>\n            <InputNumber\n              className=\"select\"\n              value={rounds}\n              min={1}\n              max={1000}\n              onChange={(value) => this.setState({ rounds: value })}\n            />\n            <Button\n              className=\"select-label\"\n              type=\"primary\"\n              disabled={course === undefined || running}\n              onClick={this.calculate}\n            >\n              {localization.site.SimulatorCalculate}\n            </Button>\n            { running ? <Progress className=\"select-label\" percent={progressPercent} /> : null }\n          </div>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default SimulatorCalculator;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport { Row, Col, TreeSelect } from 'antd';\n\nimport { LocalizationData, SkillData } from '../../library/common';\n\nimport skillJson from '../../db/skill.json';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\n\ninterface SkillSelectorDefinition {\n  categoryName: string,\n  icon?: string,\n  sets: string[],\n  children?: SkillSelectorDefinition[],\n}\n\nconst SKILL_SELECTOR_HIERARCHY: SkillSelectorDefinition[] = [\n  {\n    categoryName: 'SkillPassive',\n    sets: ['10061'],\n    children: [\n      {\n        categoryName: 'Speed',\n        icon: '10011',\n        sets: ['10011'],\n      },\n      {\n        categoryName: 'Stamina',\n        icon: '10021',\n        sets: ['10021'],\n      },\n      {\n        categoryName: 'Power',\n        icon: '10031',\n        sets: ['10031'],\n      },\n      {\n        categoryName: 'Guts',\n        icon: '10041',\n        sets: ['10041'],\n      },\n      {\n        categoryName: 'Wiz',\n        icon: '10051',\n        sets: ['10051'],\n      },\n    ],\n  },\n  {\n    categoryName: 'SkillActive',\n    sets: [],\n    children: [\n      {\n        categoryName: 'SkillSpeed',\n        icon: '20011',\n        sets: ['20011', '20012'],\n      },\n      {\n        categoryName: 'SkillAccel',\n        icon: '20041',\n        sets: ['20041', '20042'],\n      },\n      {\n        categoryName: 'SkillHeal',\n        icon: '20021',\n        sets: ['20021', '20022'],\n      },\n      {\n        categoryName: 'SkillLane',\n        icon: '20051',\n        sets: ['20051', '20052'],\n      },\n      {\n        categoryName: 'SkillSight',\n        icon: '20091',\n        sets: ['20091', '20092'],\n      },\n      {\n        categoryName: 'SkillGate',\n        icon: '20061',\n        sets: ['20061', '20062'],\n      },\n    ],\n  },\n  {\n    categoryName: 'SkillDebuff',\n    sets: [],\n    children: [\n      {\n        categoryName: 'SkillSpeed',\n        icon: '30011',\n        sets: ['30011', '30012'],\n      },\n      {\n        categoryName: 'SkillTemptation',\n        icon: '30041',\n        sets: ['30041', '30042'],\n      },\n      {\n        categoryName: 'SkillHeal',\n        icon: '30051',\n        sets: ['30051', '30052'],\n      },\n      {\n        categoryName: 'SkillSight',\n        icon: '30071',\n        sets: ['30071', '30072'],\n      },\n    ],\n  },\n];\n\nconst { TreeNode } = TreeSelect;\nconst skillData = skillJson as { [key: string]: SkillData };\n\ninterface IProps {\n  localization: LocalizationData,\n  setData: (key: string, value: any) => void,\n  state: {\n  },\n}\n\ninterface IState {\n}\n\nclass SkillSelector extends Component<IProps, IState> {\n  private _skillSets: { [key: string]: SkillData[] } = {};\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n    };\n\n    for (const [, skill] of Object.entries(skillData)) {\n      if (!(skill.icon_id in this._skillSets)) {\n        this._skillSets[skill.icon_id] = [];\n      }\n\n      if (skill.rarity === 1 || skill.rarity === 2) {\n        this._skillSets[skill.icon_id].push(skill);\n      }\n    }\n  }\n\n  buildSkillTreeNodes(definitions: SkillSelectorDefinition[] | undefined, localization: LocalizationData): JSX.Element[] {\n    if (!definitions) {\n      return [];\n    }\n\n    return _.map(definitions, (definition) => {\n      let title: any = localization.site[definition.categoryName];\n      if ('icon' in definition) {\n        title = (\n          <span>\n            <img\n              className=\"skillIcon\"\n              src={`${process.env.PUBLIC_URL}/static/image/skill/${definition.icon}.png`}\n              alt={title}\n            />\n            {title}\n          </span>\n        );\n      }\n\n      let children: JSX.Element[] = [];\n      if ('children' in definition) {\n        children = this.buildSkillTreeNodes(definition.children, localization);\n      }\n\n      let skills: JSX.Element[] = [];\n      if ('sets' in definition) {\n        skills = _\n          .chain(definition.sets)\n          .map((set) => this._skillSets[set])\n          .filter((skillSet) => Array.isArray(skillSet))\n          .flatten()\n          .sortBy(['group_id', 'id'])\n          .map((skill) => (\n            <TreeNode\n              key={skill.id}\n              title={(\n                <span className={`skill_${skill.rarity}`}>\n                  <img\n                    className=\"skillIcon\"\n                    src={`${process.env.PUBLIC_URL}/static/image/skill/${skill.icon_id}.png`}\n                    alt={skill.name}\n                  />\n                  {skill.name}\n                </span>\n              )}\n              value={skill.id}\n            />\n          ))\n          .value();\n      }\n\n      return (\n        <TreeNode\n          key={definition.categoryName}\n          title={title}\n          value={0}\n          disabled\n        >\n          {children}\n          {skills}\n        </TreeNode>\n      );\n    });\n  }\n\n  render() {\n    const { localization, setData } = this.props;\n    return (\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <div className=\"flex\">\n            <span className=\"select-label\">{`${localization.site.SkillSelector}:`}</span>\n            <TreeSelect\n              dropdownPopupAlign={{\n                overflow: { adjustY: 0, adjustX: 0 },\n                offset: [0, 2],\n              }}\n              treeLine\n              allowClear\n              multiple\n              autoClearSearchValue\n              showCheckedStrategy={TreeSelect.SHOW_PARENT}\n              style={{\n                width: '100%',\n              }}\n              onChange={(value) => setData('skills', value)}\n            >\n              { this.buildSkillTreeNodes(SKILL_SELECTOR_HIERARCHY, localization) }\n            </TreeSelect>\n          </div>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default SkillSelector;\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundStatus, GroundType, LocalizationData, ProperRate, RunningStyle,\n} from '../../library/common';\nimport {\n  IHorseState, IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate,\n} from './common';\nimport CourseData from '../course-data';\nimport HorseData from './horse-data';\nimport RaceData from './race-data';\nimport RaceResult from './race-result';\nimport SimulatorCalculator from './simulator-calculator';\nimport SkillSelector from './skill-selector';\n\nimport 'antd/dist/antd.css';\nimport '../component.css';\nimport '../../app.css';\n\nimport courseJson from '../../db/course.json';\nimport { RaceResultData } from '../../library/race/common';\n\nconst courses = courseJson as CourseDataType[];\n\ninterface IProps {\n  localization: LocalizationData;\n}\n\ninterface IProperRate extends IGroundProperRate, IDistanceProperRate, IRunningStyleProperRate {\n}\n\ninterface IState extends IHorseState, IProperRate {\n  skills?: string[],\n\n  racecourse?: string,\n  ground?: GroundType,\n  distance?: number,\n  course?: CourseDataType,\n\n  strategy?: RunningStyle,\n  groundStatus?: GroundStatus,\n\n  raceResults: RaceResultData[],\n}\n\nclass Simulator extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.loadCourseData();\n    this.state = {\n      speed: 1200,\n      stamina: 300,\n      pow: 1200,\n      guts: 300,\n      wiz: 300,\n\n      groundTypeTurf: ProperRate.A,\n      groundTypeDirt: ProperRate.A,\n\n      distanceTypeShort: ProperRate.A,\n      distanceTypeMile: ProperRate.A,\n      distanceTypeMiddle: ProperRate.A,\n      distanceTypeLong: ProperRate.A,\n\n      runningStyleNige: ProperRate.A,\n      runningStyleSenko: ProperRate.A,\n      runningStyleSashi: ProperRate.A,\n      runningStyleOikomi: ProperRate.A,\n\n      racecourse: '10009',\n      ground: GroundType.Turf,\n      distance: 2200,\n      course: this.courseCategories['10009'][GroundType.Turf][2200],\n\n      strategy: RunningStyle.Nige,\n      groundStatus: GroundStatus.Good,\n\n      raceResults: [],\n    };\n  }\n\n  updateCourse = () => {\n    const {\n      strategy, racecourse, ground, distance, groundStatus,\n    } = this.state;\n    let course;\n    if (racecourse !== undefined && ground !== undefined && distance !== undefined && strategy !== undefined && groundStatus !== undefined) {\n      if (ground in this.courseCategories[racecourse]) {\n        course = this.courseCategories[racecourse][ground][distance];\n      }\n    }\n    this.setState({ course });\n  };\n\n  setData = (key: string, value: any): void => {\n    switch (key) {\n      case 'racecourse':\n        this.setState({\n          racecourse: value,\n          ground: undefined,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'ground':\n        this.setState({\n          ground: value as GroundType,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'distance':\n      case 'strategy':\n      case 'groundStatus':\n        this.setState<'distance' | 'strategy' | 'groundStatus'>({ [key]: value }, this.updateCourse);\n        break;\n      case 'speed':\n      case 'stamina':\n      case 'pow':\n      case 'guts':\n      case 'wiz':\n        this.setState({ [key]: value as number } as Pick<IHorseState, keyof IHorseState>);\n        break;\n      case 'raceResults':\n        this.setState({ raceResults: value });\n        break;\n      case 'skills':\n        this.setState({ skills: value as string[] });\n        break;\n      default:\n        this.setState({ [key]: value } as Pick<IProperRate, keyof IProperRate>);\n        break;\n    }\n  };\n\n  loadCourseData() {\n    for (const course of courses) {\n      if (!(course.race_track_id in this.courseCategories)) {\n        this.courseCategories[course.race_track_id] = {};\n      }\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\n        this.courseCategories[course.race_track_id][course.ground] = {};\n      }\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\n    }\n  }\n\n  render() {\n    const { localization } = this.props;\n    const { raceResults, course } = this.state;\n    return (\n      <div className=\"content\">\n        <HorseData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SkillSelector\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <CourseData\n          localization={localization}\n          courseCategories={this.courseCategories}\n          setData={this.setData}\n          state={this.state}\n        />\n        <RaceData\n          localization={localization}\n          setData={this.setData}\n          state={this.state}\n        />\n        <SimulatorCalculator\n          localization={localization}\n          state={this.state}\n          setData={this.setData}\n        />\n        <RaceResult localization={localization} raceResults={raceResults} course={course} />\n      </div>\n    );\n  }\n}\n\nexport default Simulator;\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  ReferenceDot, ComposedChart, Line, XAxis, YAxis, Tooltip, ReferenceLine, Legend, ReferenceArea, Label,\n} from 'recharts';\n\nimport {\n  CourseDataType, LocalizationData,\n} from '../../library/common';\n\nimport 'react-tabs/style/react-tabs.css';\n\nconst CORNER_COLOR: { [key: string]: any } = {\n  Default: {\n    stroke: '#00ff00',\n    strokeOpacity: 0.3,\n    fill: '#00ff00',\n    fillOpacity: 0.3,\n  },\n  1: {\n    stroke: '#00bb00',\n    strokeOpacity: 0.3,\n    fill: '#00bb00',\n    fillOpacity: 0.3,\n  },\n  2: {\n    stroke: '#009900',\n    strokeOpacity: 0.3,\n    fill: '#009900',\n    fillOpacity: 0.3,\n  },\n  3: {\n    stroke: '#00f660',\n    strokeOpacity: 0.3,\n    fill: '#006600',\n    fillOpacity: 0.3,\n  },\n  4: {\n    stroke: '#003300',\n    strokeOpacity: 0.3,\n    fill: '#003300',\n    fillOpacity: 0.3,\n  },\n};\n\nconst STRAIGHT_COLOR: {\n  stroke: string,\n  strokeOpacity: number,\n  fill: string,\n  fillOpacity: number,\n} = {\n  stroke: '#888800',\n  strokeOpacity: 0.3,\n  fill: '#888800',\n  fillOpacity: 0.3,\n};\n\ninterface IProps {\n  localization: LocalizationData\n  state: {\n    course?: CourseDataType,\n  }\n}\n\ninterface IState {\n}\n\nclass CourseChart extends Component<IProps, IState> {\n  private static buildData({\n    course,\n  }: {\n    course: CourseDataType,\n  }) {\n    const slopeDistance = course.distance / 1000;\n    let maxSlope = 3;\n    let minSlope = -3;\n    let lastSlopePer = 0;\n    let lastSlopePerDistance = 0;\n    const data = [];\n    for (const slope of course.slope_per) {\n      if (lastSlopePer === 0 && slope.slope_per !== 0 && lastSlopePerDistance < slope.distance - slopeDistance) {\n        data.push({\n          slopePer: 0,\n          distance: slope.distance - slopeDistance,\n        });\n      }\n      maxSlope = slope.slope_per > maxSlope ? slope.slope_per : maxSlope;\n      minSlope = slope.slope_per < minSlope ? slope.slope_per : minSlope;\n      data.push({\n        slopePer: slope.slope_per,\n        distance: slope.distance,\n      });\n      lastSlopePer = slope.slope_per;\n      lastSlopePerDistance = slope.distance;\n    }\n    maxSlope = Math.ceil(maxSlope);\n    minSlope = Math.floor(minSlope);\n    if (lastSlopePer !== course.distance) {\n      data.push({\n        slopePer: 0,\n        distance: course.distance,\n      });\n    }\n    return { data, maxSlope, minSlope };\n  }\n\n  private _referenceAreas: any[] = [];\n\n  private _referenceDots: any[] = [];\n\n  private buildCorner({\n    course, localization, maxSlope, minSlope,\n  }: {\n    course: CourseDataType, localization: LocalizationData, maxSlope: number, minSlope: number,\n  }) {\n    for (let i = 0; i < course.param.corner.length; i += 1) {\n      let index = 'Default';\n      if (course.param.corner_index.includes(i)) {\n        index = (course.param.corner_index.indexOf(i) + 1).toString();\n      }\n\n      if (i === 0 || course.param.corner[i - 1].end !== course.param.corner[i].start) {\n        this._referenceDots.push(<ReferenceDot\n          x={course.param.corner[i].start}\n          y={minSlope + (maxSlope - minSlope) / 12}\n          label={<Label position=\"insideTop\">{course.param.corner[i].start}</Label>}\n        />);\n      }\n      this._referenceDots.push(<ReferenceDot\n        x={course.param.corner[i].end}\n        y={minSlope + (maxSlope - minSlope) / 12}\n        label={<Label position=\"insideTop\">{course.param.corner[i].end}</Label>}\n      />);\n\n      this._referenceAreas.push(<ReferenceArea\n        x1={course.param.corner[i].start}\n        x2={course.param.corner[i].end}\n        y1={minSlope + (maxSlope - minSlope) / 12}\n        y2={minSlope}\n        stroke={CORNER_COLOR[index].stroke}\n        strokeOpacity={CORNER_COLOR[index].strokeOpacity}\n        fill={CORNER_COLOR[index].fill}\n        fillOpacity={CORNER_COLOR[index].fillOpacity}\n        label={<Label position=\"insideTop\">{localization.site[`CourseCorner${index}`]}</Label>}\n      />);\n    }\n  }\n\n  private buildStraight({\n    course, localization, maxSlope, minSlope,\n  }: {\n    course: CourseDataType, localization: LocalizationData, maxSlope: number, minSlope: number,\n  }) {\n    for (const straight of course.param.straight) {\n      this._referenceAreas.push(<ReferenceArea\n        x1={straight.start}\n        x2={straight.end}\n        y1={minSlope + (maxSlope - minSlope) / 12}\n        y2={minSlope}\n        stroke={STRAIGHT_COLOR.stroke}\n        strokeOpacity={STRAIGHT_COLOR.strokeOpacity}\n        fill={STRAIGHT_COLOR.fill}\n        fillOpacity={STRAIGHT_COLOR.fillOpacity}\n        label={<Label position=\"insideTop\">{localization.site.CourseStraight}</Label>}\n      />);\n    }\n  }\n\n  render() {\n    const { localization, state } = this.props;\n    const { course } = state;\n\n    if (course === undefined) {\n      return (<></>);\n    }\n\n    this._referenceAreas = [];\n    this._referenceDots = [];\n    const { data, maxSlope, minSlope } = CourseChart.buildData({ course });\n    this.buildCorner({\n      course, localization, maxSlope, minSlope,\n    });\n    this.buildStraight({\n      course, localization, maxSlope, minSlope,\n    });\n\n    const blockDistance = course.distance / 24;\n    return (\n      <ComposedChart\n        width={1000}\n        height={500}\n        data={data}\n      >\n        <XAxis type=\"number\" dataKey=\"distance\" />\n        <YAxis domain={[minSlope, maxSlope]} />\n        <Tooltip />\n        <Legend />\n        <Line dot={false} name={localization.site.CourseSlope} type=\"monotone\" dataKey=\"slopePer\" stroke=\"#8884d8\" />\n        <ReferenceLine\n          x={blockDistance * 4}\n          stroke=\"red\"\n          label={<Label position=\"insideTop\">{`${localization.site.CourseMiddlePhase} ${_.round(blockDistance * 4, 2)}`}</Label>}\n        />\n        <ReferenceLine\n          x={blockDistance * 10}\n          stroke=\"red\"\n          label={<Label position=\"insideTop\">{`${localization.site.CoursePositionKeepEnd} ${_.round(blockDistance * 10, 2)}`}</Label>}\n        />\n        <ReferenceLine\n          x={blockDistance * 16}\n          stroke=\"red\"\n          label={<Label position=\"insideTop\">{`${localization.site.CourseEndPhase} ${_.round(blockDistance * 16, 2)}`}</Label>}\n        />\n        { this._referenceAreas }\n        { this._referenceDots }\n      </ComposedChart>\n    );\n  }\n}\n\nexport default CourseChart;\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\n\nimport {\n  CourseCategory, CourseDataType, GroundType, LocalizationData,\n} from '../../library/common';\nimport CourseData from '../course-data';\nimport CourseChart from './course-chart';\n\nimport 'react-tabs/style/react-tabs.css';\n\nimport courseJson from '../../db/course.json';\n\nconst courses = courseJson as CourseDataType[];\n\ninterface IProps {\n  localization: LocalizationData\n}\n\ninterface IState {\n  racecourse?: string,\n  ground?: GroundType,\n  distance?: number,\n  course?: CourseDataType,\n}\n\nclass Course extends Component<IProps, IState> {\n  private courseCategories: CourseCategory = {};\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.loadCourseData();\n    this.state = {\n      racecourse: '10009',\n      ground: GroundType.Turf,\n      distance: 2200,\n      course: this.courseCategories['10009'][GroundType.Turf][2200],\n    };\n  }\n\n  setData = (key: string, value: any): void => {\n    switch (key) {\n      case 'racecourse':\n        this.setState({\n          racecourse: value,\n          ground: undefined,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'ground':\n        this.setState({\n          ground: value as GroundType,\n          distance: undefined,\n          course: undefined,\n        });\n        break;\n      case 'distance':\n        this.setState(\n          {\n            distance: value as number,\n          },\n          this.updateCourse,\n        );\n        break;\n    }\n  };\n\n  updateCourse = () => {\n    const { racecourse, ground, distance } = this.state;\n    let course;\n    if (racecourse !== undefined && ground !== undefined && distance !== undefined) {\n      if (ground in this.courseCategories[racecourse]) {\n        course = this.courseCategories[racecourse][ground][distance];\n      }\n    }\n    this.setState({ course });\n  };\n\n  loadCourseData() {\n    for (const course of courses) {\n      if (!(course.race_track_id in this.courseCategories)) {\n        this.courseCategories[course.race_track_id] = {};\n      }\n      if (!(course.ground in this.courseCategories[course.race_track_id])) {\n        this.courseCategories[course.race_track_id][course.ground] = {};\n      }\n      this.courseCategories[course.race_track_id][course.ground][course.distance] = course;\n    }\n  }\n\n  render() {\n    const { localization } = this.props;\n    return (\n      <div className=\"content\">\n        <CourseData\n          localization={localization}\n          courseCategories={this.courseCategories}\n          setData={this.setData}\n          state={this.state}\n        />\n        <CourseChart\n          localization={localization}\n          state={this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Course;\n","import _ from 'lodash';\n\nimport { LocalizationData, LocalizationSubData } from './library/common';\n\nclass Localization {\n  default: {};\n\n  localizer: {\n    [key: string]: () => __WebpackModuleApi.RequireContext;\n  };\n\n  static getLocalizationJaJp() {\n    return require.context('./localization/ja_jp/', true, /\\.json$/);\n  }\n\n  static getLocalizationEnUs() {\n    return require.context('./localization/en_us/', true, /\\.json$/);\n  }\n\n  static getLocalizationZhTw() {\n    return require.context('./localization/zh_tw', true, /\\.json$/);\n  }\n\n  constructor() {\n    this.default = {};\n    this.localizer = {\n      'ja-jp': Localization.getLocalizationJaJp,\n      'en-us': Localization.getLocalizationEnUs,\n      'zh-tw': Localization.getLocalizationZhTw,\n    };\n    this.default = this.getLocalization('ja-jp');\n  }\n\n  getLocalization(locale: string): LocalizationData {\n    const files = this.localizer[locale]();\n    const fileJson: LocalizationSubData = {};\n    for (const fileKey of files.keys()) {\n      const structure = fileKey.split('.')[1].split('/');\n\n      let target: LocalizationSubData = fileJson;\n      for (let i = 1; i < structure.length; i += 1) {\n        if (!(structure[i] in fileJson)) {\n          target[structure[i]] = {};\n        }\n        target = target[structure[i]] as LocalizationSubData;\n      }\n      _.merge(target, files(fileKey));\n    }\n    return _.merge({}, this.default, fileJson) as LocalizationData;\n  }\n}\n\nexport default Localization;\n","import {\n  Layout, Menu, Select, Row, Col,\n} from 'antd';\nimport React, { Component } from 'react';\nimport {\n  Redirect, HashRouter as Router, Route, Link, Switch,\n} from 'react-router-dom';\n\nimport { LocalizationData } from './library/common';\nimport RelationGraph from './component/relation/graph';\nimport RelationQuery from './component/relation/query';\nimport Simulator from './component/simulator/simulator';\nimport Course from './component/course/course';\nimport Localization from './localization';\n\nimport 'antd/dist/antd.css';\nimport './app.css';\n\nconst { Header, Content, Footer } = Layout;\nconst { Option } = Select;\n\ninterface IProps {\n}\n\ninterface IState {\n  localization: LocalizationData,\n}\n\nclass App extends Component<IProps, IState> {\n  localization: Localization;\n\n  constructor(props: {}) {\n    super(props);\n    this.localization = new Localization();\n    this.state = {\n      localization: this.localization.getLocalization('ja-jp'),\n    };\n  }\n\n  changeLocalization = (locale: string) => {\n    this.setState({\n      localization: this.localization.getLocalization(locale),\n    });\n  };\n\n  render() {\n    const { localization } = this.state;\n\n    return (\n      <Router>\n        <Layout className=\"layout\">\n          <Header className=\"header\">\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n              <Menu.Item key=\"1\">\n                <Link to=\"/relation/graph\" className=\"link\">{localization.site['Relation Graph']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"2\">\n                <Link to=\"/relation/query\" className=\"link\">{localization.site['Relation Query']}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"3\">\n                <Link to=\"/course\" className=\"link\">{localization.site.Course}</Link>\n              </Menu.Item>\n              <Menu.Item key=\"4\">\n                <Link to=\"/simulator\" className=\"link\">{localization.site.Simulator}</Link>\n              </Menu.Item>\n            </Menu>\n          </Header>\n          <Content className=\"tabs\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/relation/graph\" />\n              </Route>\n              <Route path=\"/relation/graph\" render={() => (<RelationGraph localization={localization} />)} />\n              <Route path=\"/relation/query\" render={() => (<RelationQuery localization={localization} />)} />\n              <Route path=\"/simulator\" render={() => (<Simulator localization={localization} />)} />\n              <Route path=\"/course\" render={() => (<Course localization={localization} />)} />\n            </Switch>\n          </Content>\n          <Footer className=\"footer\" style={{ padding: '5px' }}>\n            <Row gutter={[8, 8]}>\n              <Col span={20} />\n              <Col span={2}>\n                <a className=\"github\" href=\"https://github.com/greydust/umamusume\" target=\"_blank\" rel=\"noreferrer\">\n                  <img src={`${process.env.PUBLIC_URL}/static/image/github.png`} height=\"30\" alt=\"GitHub\" />\n                  GitHub\n                </a>\n              </Col>\n              <Col span={2}>\n                <Select className=\"localizationSelector\" defaultValue=\"ja-jp\" onChange={this.changeLocalization}>\n                  <Option value=\"zh-tw\">繁體中文</Option>\n                  <Option value=\"ja-jp\">日本語</Option>\n                  <Option value=\"en-us\">English</Option>\n                </Select>\n              </Col>\n            </Row>\n          </Footer>\n        </Layout>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}